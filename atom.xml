<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louie&#39;s Blog</title>
  <subtitle>黄刘胤的博客 Louie&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://louie.link/"/>
  <updated>2018-04-16T22:14:45.000Z</updated>
  <id>http://louie.link/</id>
  
  <author>
    <name>黄刘胤,Louie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(Week9) 01 Anomaly Detection</title>
    <link href="http://louie.link/Machine-Learning/09_01_AnomalyDetection/"/>
    <id>http://louie.link/Machine-Learning/09_01_AnomalyDetection/</id>
    <published>2018-04-12T07:00:00.000Z</published>
    <updated>2018-04-16T22:14:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Anomaly-Detection&quot;&gt;&lt;a href=&quot;#Anomaly-Detection&quot; class=&quot;headerlink&quot; title=&quot;Anomaly Detection&quot;&gt;&lt;/a&gt;Anomaly Detection&lt;/h2&gt;&lt;p&gt;Materials are from &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/resources/szFCa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coursera Machine Learning by Andrew Ng&lt;/a&gt;. &lt;/p&gt;
&lt;h3 id=&quot;1-Density-Estimation&quot;&gt;&lt;a href=&quot;#1-Density-Estimation&quot; class=&quot;headerlink&quot; title=&quot;1. Density Estimation&quot;&gt;&lt;/a&gt;1. Density Estimation&lt;/h3&gt;&lt;h4 id=&quot;1-1-Problem-Motivation&quot;&gt;&lt;a href=&quot;#1-1-Problem-Motivation&quot; class=&quot;headerlink&quot; title=&quot;1.1 Problem Motivation&quot;&gt;&lt;/a&gt;1.1 Problem Motivation&lt;/h4&gt;&lt;p&gt;Just like in other learning problems, we are given a dataset ${x^{(1)}, x^{(2)},\dots,x^{(m)}}$.&lt;/p&gt;
&lt;p&gt;We are then given a new example, $x_{test}$, and we want to know whether this new example is abnormal/anomalous.&lt;/p&gt;
&lt;p&gt;We define a “model” p(x) that tells us the probability the example is not anomalous. We also use a threshold $ϵ$ (epsilon) as a dividing line so we can say which examples are anomalous and which are not.&lt;/p&gt;
&lt;p&gt;A very common application of anomaly detection is detecting fraud:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$x^{(i)}$= features of user i’s activities&lt;/li&gt;
&lt;li&gt;Model p(x) from the data.&lt;/li&gt;
&lt;li&gt;Identify unusual users by checking which have $p(x)&amp;lt;ϵ$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If our anomaly detector is flagging &lt;strong&gt;too many&lt;/strong&gt; anomalous examples, then we need to &lt;strong&gt;decrease&lt;/strong&gt; our threshold $ϵ$&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-2-Gaussian-Distribution&quot;&gt;&lt;a href=&quot;#1-2-Gaussian-Distribution&quot; class=&quot;headerlink&quot; title=&quot;1.2 Gaussian Distribution&quot;&gt;&lt;/a&gt;1.2 Gaussian Distribution&lt;/h4&gt;&lt;p&gt;The Gaussian Distribution is a familiar bell-shaped curve that can be described by a function ($μ$, $σ^2$)&lt;/p&gt;
&lt;p&gt;Let $x∈ℝ$. If the probability distribution of x is Gaussian with mean $μ$, variance $σ^2$, then:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;x \sim \mathcal{N}(\mu, \sigma^2)&lt;/script&gt;&lt;p&gt;The little $\sim$ or ‘tilde’ can be read as “distributed as.”&lt;/p&gt;
&lt;p&gt;The Gaussian Distribution is parameterized by a mean and a variance.&lt;/p&gt;
&lt;p&gt;Mu, or $μ$, describes the &lt;strong&gt;center&lt;/strong&gt; of the curve, called the mean. The &lt;strong&gt;width&lt;/strong&gt; of the curve is described by sigma, or $σ$, called the standard deviation.&lt;/p&gt;
&lt;p&gt;The full function is as follows:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\large p(x;\mu,\sigma^2) = \dfrac{1}{\sigma\sqrt{(2\pi)}}e^{-\dfrac{1}{2}(\dfrac{x - \mu}{\sigma})^2}&lt;/script&gt;&lt;p&gt;We can estimate the parameter $μ$ from a given dataset by simply taking the average of all the examples:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mu = \dfrac{1}{m}\displaystyle \sum_{i=1}^m x^{(i)}&lt;/script&gt;&lt;p&gt;We can estimate the other parameter, $σ^2$, with our familiar squared error formula:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sigma^2 = \dfrac{1}{m}\displaystyle \sum_{i=1}^m(x^{(i)} - \mu)^2&lt;/script&gt;&lt;h4 id=&quot;1-3-PCA-Algorithm&quot;&gt;&lt;a href=&quot;#1-3-PCA-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;1.3 PCA Algorithm&quot;&gt;&lt;/a&gt;1.3 PCA Algorithm&lt;/h4&gt;&lt;p&gt;Given a training set of examples, $\lbrace x^{(1)},\dots,x^{(m)}\rbrace$ where each example is a vector, $x \in \mathbb{R}^n$.&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(x) = p(x_1;\mu_1,\sigma_1^2)p(x_2;\mu_2,\sigma^2_2)\cdots p(x_n;\mu_n,\sigma^2_n)&lt;/script&gt;&lt;p&gt;In statistics, this is called an “independence assumption” on the values of the features inside training example $x$.&lt;/p&gt;
&lt;p&gt;More compactly, the above expression can be written as follows:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(x)= \displaystyle \prod^n_{j=1} p(x_j;\mu_j,\sigma_j^2)&lt;/script&gt;&lt;p&gt;&lt;strong&gt;The algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Choose features $x_i$ that you think might be indicative of anomalous examples.&lt;/p&gt;
&lt;p&gt;Fit parameters $\mu_1,\dots,\mu_n,\sigma_1^2,\dots,\sigma_n^2$&lt;/p&gt;
&lt;p&gt;Calculate $\mu&lt;em&gt;j = \dfrac{1}{m}\displaystyle \sum&lt;/em&gt;{i=1}^m x_j^{(i)}$&lt;/p&gt;
&lt;p&gt;Calculate $\sigma^2&lt;em&gt;j = \dfrac{1}{m}\displaystyle \sum&lt;/em&gt;{i=1}^m(x_j^{(i)} - \mu_j)^2$&lt;/p&gt;
&lt;p&gt;Given a new example $x$, compute $p(x)$:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(x) = \displaystyle \prod^n_{j=1} p(x_j;\mu_j,\sigma_j^2) = \prod\limits^n_{j=1} \dfrac{1}{\sqrt{2\pi}\sigma_j}exp(-\dfrac{(x_j - \mu_j)^2}{2\sigma^2_j})&lt;/script&gt;&lt;p&gt;Anomaly if $p(x)&amp;lt;ϵ$&lt;/p&gt;
&lt;p&gt;A vectorized version of the calculation for $μ$ is $\mu = \dfrac{1}{m}\displaystyle \sum_{i=1}^m x^{(i)}$. You can vectorize $σ^2$ similarly.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Building-an-Anomaly-Detection-System&quot;&gt;&lt;a href=&quot;#2-Building-an-Anomaly-Detection-System&quot; class=&quot;headerlink&quot; title=&quot;2. Building an Anomaly Detection System&quot;&gt;&lt;/a&gt;2. Building an Anomaly Detection System&lt;/h3&gt;&lt;h4 id=&quot;2-1-Developing-and-Evaluating-an-Anomaly-Detection-System&quot;&gt;&lt;a href=&quot;#2-1-Developing-and-Evaluating-an-Anomaly-Detection-System&quot; class=&quot;headerlink&quot; title=&quot;2.1 Developing and Evaluating an Anomaly Detection System&quot;&gt;&lt;/a&gt;2.1 Developing and Evaluating an Anomaly Detection System&lt;/h4&gt;&lt;p&gt;To evaluate our learning algorithm, we take some labeled data, categorized into anomalous and non-anomalous examples ( y = 0 if normal, y = 1 if anomalous).&lt;/p&gt;
&lt;p&gt;Among that data, take a large proportion of &lt;strong&gt;good&lt;/strong&gt;, non-anomalous data for the training set on which to train p(x).&lt;/p&gt;
&lt;p&gt;Then, take a smaller proportion of mixed anomalous and non-anomalous examples (you will usually have many more non-anomalous examples) for your cross-validation and test sets.&lt;/p&gt;
&lt;p&gt;For example, we may have a set where 0.2% of the data is anomalous. &lt;/p&gt;
&lt;p&gt;(1) Take 60% of those examples, all of which are good (y=0) for the training set.&lt;br&gt;(2) Take 20% of the examples for the cross-validation set (with 0.1% of the anomalous examples)&lt;br&gt;(3) And another 20% from the test set (with another 0.1% of the anomalous).&lt;/p&gt;
&lt;p&gt;In other words, we split the data 60/20/20 training/CV/test and then split the anomalous examples 50/50 between the CV and test sets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Algorithm evaluation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fit model p(x) on training set $\lbrace x^{(1)},\dots,x^{(m)} \rbrace$&lt;/p&gt;
&lt;p&gt;On a cross validation/test example x, predict:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If $p(x) &amp;lt; ϵ$ (&lt;strong&gt;anomaly&lt;/strong&gt;), then y=1&lt;/li&gt;
&lt;li&gt;If $p(x) ≥ ϵ$ (&lt;strong&gt;normal&lt;/strong&gt;), then y=0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Possible evaluation metrics (see “Machine Learning System Design” section):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;True positive, false positive, false negative, true negative.&lt;/li&gt;
&lt;li&gt;Precision/recall&lt;/li&gt;
&lt;li&gt;F1 score&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that we use the cross-validation set to choose parameter $ϵ$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Skewed Data:&lt;/strong&gt; Samples contain very few negative example, so use F1 score to evaluate may be better. (If you just predict everything as positive, if you get very high accuracy, but this is meaningless)&lt;/p&gt;
&lt;h4 id=&quot;2-2-Anomaly-Detection-vs-Supervised-Learning&quot;&gt;&lt;a href=&quot;#2-2-Anomaly-Detection-vs-Supervised-Learning&quot; class=&quot;headerlink&quot; title=&quot;2.2 Anomaly Detection vs. Supervised Learning&quot;&gt;&lt;/a&gt;2.2 Anomaly Detection vs. Supervised Learning&lt;/h4&gt;&lt;p&gt;Anomaly detection looks like supervised learning. When do we use anomaly detection and when do we use supervised learning?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(a) Use Anomaly Detection when:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Very small number of &lt;strong&gt;positive examples (y=1, Anomaly).&lt;/strong&gt; (0-20 is common) &lt;strong&gt;and&lt;/strong&gt; a large number of &lt;strong&gt;negative (y=0, Normal)&lt;/strong&gt; examples.&lt;/li&gt;
&lt;li&gt;Many different “types” of anomalies. Hard for any algorithm to learn from posi-ve examples what the anomalies look like; future anomalies may look nothing like any of the anomalous examples we’ve seen so far.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fraud detection (If we have enough positive examples, we can use supervised learning for this one)&lt;/li&gt;
&lt;li&gt;Manufacturing (e.g. aircraft engines)&lt;/li&gt;
&lt;li&gt;Monitoring machines in a data center&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(b) Use Supervised Learning when:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Large number of positive &lt;strong&gt;and&lt;/strong&gt; negative examples.&lt;/li&gt;
&lt;li&gt;Enough positive examples for algorithm to get a sense of what positive examples are like. The future positive examples are likely to be similar to ones in training set.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email spam classification (we could have enough smaples for each kind of spams)&lt;/li&gt;
&lt;li&gt;Weather prediction (sunny/ rainy/etc) &lt;/li&gt;
&lt;li&gt;Cancer classification  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-3-Choosing-What-Features-to-Use&quot;&gt;&lt;a href=&quot;#2-3-Choosing-What-Features-to-Use&quot; class=&quot;headerlink&quot; title=&quot;2.3 Choosing What Features to Use&quot;&gt;&lt;/a&gt;2.3 Choosing What Features to Use&lt;/h4&gt;&lt;p&gt;The features will greatly affect how well your anomaly detection algorithm works.&lt;/p&gt;
&lt;p&gt;We can check that our features are &lt;strong&gt;gaussian&lt;/strong&gt; by plotting a histogram of our data and checking for the bell-shaped curve.&lt;/p&gt;
&lt;p&gt;Some &lt;strong&gt;transforms&lt;/strong&gt; we can try on an example feature x that does not have the bell-shaped curve are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;log(x)&lt;/li&gt;
&lt;li&gt;log(x+1)&lt;/li&gt;
&lt;li&gt;log(x+c) for some constant&lt;/li&gt;
&lt;li&gt;x√&lt;/li&gt;
&lt;li&gt;x1/3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can play with each of these to try and achieve the gaussian shape in our data.&lt;/p&gt;
&lt;p&gt;There is an &lt;strong&gt;error analysis procedure&lt;/strong&gt; for anomaly detection that is very similar to the one in supervised learning.&lt;/p&gt;
&lt;p&gt;Our goal is for p(x) to be large for normal examples and small for anomalous examples.&lt;/p&gt;
&lt;p&gt;One common problem is when p(x) is similar for both types of examples. In this case, you need to examine the anomalous examples that are giving high probability in detail and try to figure out new features that will better distinguish the data.&lt;/p&gt;
&lt;p&gt;In general, choose features that might take on unusually large or small values in the event of an anomaly.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Anomaly-Detection&quot;&gt;&lt;a href=&quot;#Anomaly-Detection&quot; class=&quot;headerlink&quot; title=&quot;Anomaly Detection&quot;&gt;&lt;/a&gt;Anomaly Detection&lt;/h2&gt;&lt;p&gt;Materials 
    
    </summary>
    
      <category term="Machine Learning" scheme="http://louie.link/categories/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>(Week8) 01 Unsupervised Learning</title>
    <link href="http://louie.link/Machine-Learning/08_01_UnsupervisedLearning/"/>
    <id>http://louie.link/Machine-Learning/08_01_UnsupervisedLearning/</id>
    <published>2018-04-11T07:00:00.000Z</published>
    <updated>2018-04-16T22:14:33.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Unsupervised-Learning&quot;&gt;&lt;a href=&quot;#Unsupervised-Learning&quot; class=&quot;headerlink&quot; title=&quot;Unsupervised Learning&quot;&gt;&lt;/a&gt;Unsupervised Learning&lt;/h2&gt;&lt;p&gt;Materials are from &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/resources/kGWsY&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coursera Machine Learning by Andrew Ng&lt;/a&gt;. &lt;/p&gt;
&lt;h3 id=&quot;1-Unsupervised-Learning-Introduction&quot;&gt;&lt;a href=&quot;#1-Unsupervised-Learning-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1. Unsupervised Learning: Introduction&quot;&gt;&lt;/a&gt;1. Unsupervised Learning: Introduction&lt;/h3&gt;&lt;p&gt;Unsupervised learning is contrasted from supervised learning because it uses an &lt;strong&gt;unlabeled&lt;/strong&gt; training set rather than a labeled one. In other words, we don’t have the vector $y$ of expected results, we only have a dataset of features where we can find structure.&lt;/p&gt;
&lt;p&gt;Clustering is good for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Market segmentation&lt;/li&gt;
&lt;li&gt;Social network analysis&lt;/li&gt;
&lt;li&gt;Organizing computer clusters (e.g. data center)&lt;/li&gt;
&lt;li&gt;Astronomical data analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-K-Means-Algorithm&quot;&gt;&lt;a href=&quot;#2-K-Means-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;2. K-Means Algorithm&quot;&gt;&lt;/a&gt;2. K-Means Algorithm&lt;/h3&gt;&lt;p&gt;The K-Means Algorithm is the most popular and widely used algorithm for automatically grouping data into coherent subsets.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Randomly initialize K points in the dataset called the &lt;strong&gt;cluster centroids&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cluster assignment:&lt;/strong&gt; assign all examples into one of K groups based on which cluster centroid the example is closest to.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Move centroid:&lt;/strong&gt; compute the averages for all the points inside each of the K cluster centroid groups, then move the cluster centroid points to those averages.&lt;/li&gt;
&lt;li&gt;Re-run (2) and (3) until we have found our clusters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Our main variables are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K (number of clusters)&lt;/li&gt;
&lt;li&gt;Training set ${x^{(1)}, x^{(2)}, \dots,x^{(m)}}$&lt;/li&gt;
&lt;li&gt;Where $x^{(i)} \in \mathbb{R}^n$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that we &lt;strong&gt;will not use&lt;/strong&gt; the $x_0=1$ convention.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The algorithm:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Randomly initialize K cluster centroids mu(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), mu(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), ..., mu(K)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Repeat:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; to m: &lt;span class=&quot;comment&quot;&gt;% Cluster assignment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      c(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;):= index (from &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; to K) of cluster centroid closest to x(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; to K: &lt;span class=&quot;comment&quot;&gt;% Move centroid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mu(k):= average (mean) of points assigned to cluster k&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;strong&gt;first for-loop&lt;/strong&gt; is the &lt;strong&gt;‘Cluster Assignment’&lt;/strong&gt; step. We make a vector $c$ where $c^{(i)}$ represents the centroid assigned to example $x^{(i)}$.&lt;/p&gt;
&lt;p&gt;We can write the operation of the Cluster Assignment step more mathematically as follows:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;c^{(i)} = argmin_k\ ||x^{(i)} - \mu_k||^2&lt;/script&gt;&lt;p&gt;That is, each $c^{(i)}$ contains the &lt;strong&gt;index of the centroid&lt;/strong&gt; that has minimal distance to $x^{(i)}$.&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;idx&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;findClosestCentroids&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(X, centroids)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;% ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(X,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    min_dist = intmax(&lt;span class=&quot;string&quot;&gt;&#39;int64&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : K&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cur_dist = sum((X(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,:) - centroids(c,:)) .^ &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cur_dist &amp;lt; min_dist)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            min_dist = cur_dist;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            idx(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;) = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;By convention&lt;/strong&gt;, we square the right-hand-side, which &lt;strong&gt;makes the function we are trying to minimize more sharply increasing.&lt;/strong&gt; It is mostly just a convention. But a convention that helps reduce the computation load because the Euclidean distance requires a square root but it is canceled.&lt;/p&gt;
&lt;p&gt;Without the square:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;||x^{(i)} - \mu_k|| = ||\quad\sqrt{(x_1^i - \mu_{1(k)})^2 + (x_2^i - \mu_{2(k)})^2 + (x_3^i - \mu_{3(k)})^2 + ...}\quad||&lt;/script&gt;&lt;p&gt;With the square:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;||x^{(i)} - \mu_k||^2 = ||\quad(x_1^i - \mu_{1(k)})^2 + (x_2^i - \mu_{2(k)})^2 + (x_3^i - \mu_{3(k)})^2 + ...\quad||&lt;/script&gt;&lt;p&gt;…so the square convention serves two purposes, &lt;strong&gt;minimize more sharply and less computation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;second for-loop&lt;/strong&gt; is the &lt;strong&gt;‘Move Centroid’&lt;/strong&gt; step where we move each centroid to the average of its group.&lt;/p&gt;
&lt;p&gt;More formally, the equation for this loop is as follows:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mu_k = \dfrac{1}{n}[x^{(k_1)} + x^{(k_2)} + \dots + x^{(k_n)}] \in \mathbb{R}^n&lt;/script&gt;&lt;p&gt;Where each of $x^{(k_1)}, x^{(k_2)}, \dots, x^{(k_n)}$ are the training examples assigned to group $mμ_k$.&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;centroids&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;computeCentroids&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(X, idx, K)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;% ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : K&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subX = &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt;(idx == c); &lt;span class=&quot;comment&quot;&gt;%subset of X, find points which are grouped as cluster c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    centroids(c, :) = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; / &lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(subX, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * sum(X(subX, :));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If you have a cluster centroid with &lt;strong&gt;0 points&lt;/strong&gt; assigned to it, you can randomly &lt;strong&gt;re-initialize&lt;/strong&gt; that centroid to a new point. You can also simply &lt;strong&gt;eliminate&lt;/strong&gt; that cluster group.&lt;/p&gt;
&lt;p&gt;After a number of iterations the algorithm will &lt;strong&gt;converge&lt;/strong&gt;, where new iterations do not affect the clusters.&lt;/p&gt;
&lt;p&gt;Note on non-separated clusters: some datasets have no real inner separation or natural structure. K-means can still evenly segment your data into K subsets, so can still be useful in this case.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-Optimization-Objective&quot;&gt;&lt;a href=&quot;#3-Optimization-Objective&quot; class=&quot;headerlink&quot; title=&quot;3. Optimization Objective&quot;&gt;&lt;/a&gt;3. Optimization Objective&lt;/h3&gt;&lt;p&gt;Recall some of the parameters we used in our algorithm:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$c^{(i)}$ = index of cluster (1,2,…,K) to which example $x^{(i)}$ is currently assigned&lt;/li&gt;
&lt;li&gt;$μ_k$= cluster centroid k ($μ_k ∈ ℝ^n$)&lt;/li&gt;
&lt;li&gt;$μ_{c^{(i)}}$ = cluster centroid of cluster to which example $x^{(i)}$ has been assigned&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using these variables we can define our &lt;strong&gt;cost function&lt;/strong&gt;:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(c^{(i)},\dots,c^{(m)},\mu_1,\dots,\mu_K) = \dfrac{1}{m}\sum_{i=1}^m ||x^{(i)} - \mu_{c^{(i)}}||^2&lt;/script&gt;&lt;p&gt;Our &lt;strong&gt;optimization objective&lt;/strong&gt; is to minimize all our parameters using the above cost function:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;min_{c,\mu}\ J(c,\mu)&lt;/script&gt;&lt;p&gt;That is, we are finding all the values in sets $c$, representing all our clusters, and $μ$, representing all our centroids, that will minimize &lt;strong&gt;the average of the distances&lt;/strong&gt; of every training example to its corresponding cluster centroid.&lt;/p&gt;
&lt;p&gt;The above cost function is often called the &lt;strong&gt;distortion&lt;/strong&gt; of the training examples.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;cluster assignment step&lt;/strong&gt;, our goal is to:&lt;/p&gt;
&lt;p&gt;Minimize $J(…)$ with $c^{(1)},\dots,c^{(m)}$ (holding $\mu_1,\dots,\mu_K$ fixed)&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;move centroid&lt;/strong&gt; step, our goal is to:&lt;/p&gt;
&lt;p&gt;Minimize $J(…)$ with $\mu_1,\dots,\mu_K$&lt;/p&gt;
&lt;p&gt;With k-means, it is &lt;strong&gt;not possible for the cost function to sometimes increase&lt;/strong&gt;. It should always descend.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-Random-Initialization&quot;&gt;&lt;a href=&quot;#4-Random-Initialization&quot; class=&quot;headerlink&quot; title=&quot;4. Random Initialization&quot;&gt;&lt;/a&gt;4. Random Initialization&lt;/h3&gt;&lt;p&gt;There’s one particular recommended method for randomly initializing your cluster centroids.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have $K&amp;lt;m$. That is, make sure the number of your clusters is less than the number of your training examples.&lt;/li&gt;
&lt;li&gt;Randomly pick $K$ training examples. (Be sure the selected examples are &lt;strong&gt;unique&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;Set $\mu_1,\dots,\mu_K$ equal to these $K$ examples.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;K-means &lt;strong&gt;can get stuck in local optima&lt;/strong&gt;. To decrease the chance of this happening, you can run the algorithm on many different random initializations. In cases where $K&amp;lt;10$ it is strongly recommended to run a loop of random initializations.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for i = 1 to 100:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   randomly initialize k-means&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   run k-means to get &amp;apos;c&amp;apos; and &amp;apos;m&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   compute the cost function (distortion) J(c,m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick the clustering that gave us the lowest cost&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-Choosing-the-Number-of-Clusters&quot;&gt;&lt;a href=&quot;#5-Choosing-the-Number-of-Clusters&quot; class=&quot;headerlink&quot; title=&quot;5. Choosing the Number of Clusters&quot;&gt;&lt;/a&gt;5. Choosing the Number of Clusters&lt;/h3&gt;&lt;p&gt;Choosing $K$ can be quite arbitrary and ambiguous.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The elbow method&lt;/strong&gt;: plot the cost $J$ and the number of clusters $K$. The cost function should reduce as we increase the number of clusters, and then flatten out. Choose K at the point where the cost function starts to flatten out.&lt;/p&gt;
&lt;p&gt;However, fairly often, the curve is &lt;strong&gt;very gradual&lt;/strong&gt;, so there’s no clear elbow. (see following right graph)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://coursera-1251949857.file.myqcloud.com/MachineLearning/Images/08/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; $J$ will &lt;strong&gt;always&lt;/strong&gt; decrease as K is increased. The one exception is if k-means gets stuck at a bad local optimum.&lt;/p&gt;
&lt;p&gt;Another way to choose $K$ is to observe how well k-means performs on a &lt;strong&gt;downstream purpose&lt;/strong&gt;. In other words, you choose $K$ that proves to be most useful for some goal you’re trying to achieve from using these clusters.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-Bonus-Discussion-of-the-drawbacks-of-K-Means&quot;&gt;&lt;a href=&quot;#6-Bonus-Discussion-of-the-drawbacks-of-K-Means&quot; class=&quot;headerlink&quot; title=&quot;6. Bonus: Discussion of the drawbacks of K-Means&quot;&gt;&lt;/a&gt;6. Bonus: Discussion of the drawbacks of K-Means&lt;/h3&gt;&lt;p&gt;This links to a discussion that shows various situations in which K-means gives totally correct but unexpected results: &lt;a href=&quot;http://stats.stackexchange.com/questions/133656/how-to-understand-the-drawbacks-of-k-means&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stats.stackexchange.com/questions/133656/how-to-understand-the-drawbacks-of-k-means&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Unsupervised-Learning&quot;&gt;&lt;a href=&quot;#Unsupervised-Learning&quot; class=&quot;headerlink&quot; title=&quot;Unsupervised Learning&quot;&gt;&lt;/a&gt;Unsupervised Learning&lt;/
    
    </summary>
    
      <category term="Machine Learning" scheme="http://louie.link/categories/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>(Week8) 02 Dimensionality Reduction</title>
    <link href="http://louie.link/Machine-Learning/08_02_DimensionalityReduction/"/>
    <id>http://louie.link/Machine-Learning/08_02_DimensionalityReduction/</id>
    <published>2018-04-11T07:00:00.000Z</published>
    <updated>2018-04-16T22:14:38.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Dimensionality-Reduction&quot;&gt;&lt;a href=&quot;#Dimensionality-Reduction&quot; class=&quot;headerlink&quot; title=&quot;Dimensionality Reduction&quot;&gt;&lt;/a&gt;Dimensionality Reduction&lt;/h2&gt;&lt;p&gt;Materials are from &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/resources/kGWsY&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coursera Machine Learning by Andrew Ng&lt;/a&gt;. &lt;/p&gt;
&lt;h3 id=&quot;1-Motivation&quot;&gt;&lt;a href=&quot;#1-Motivation&quot; class=&quot;headerlink&quot; title=&quot;1. Motivation&quot;&gt;&lt;/a&gt;1. Motivation&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Motivation I: Data Compression&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We may want to reduce the dimension of our features if we have a lot of redundant data.&lt;/li&gt;
&lt;li&gt;To do this, we find two highly correlated features, plot them, and make a new line that seems to describe both features accurately. We place all the new features on this single line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doing dimensionality reduction will reduce the total data we have to store in computer memory and will speed up our learning algorithm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; in dimensionality reduction, we are reducing our features rather than our number of examples. Our variable $m$ will stay the same size; $n$, the number of features each example from $x^{(1)}$ to $x^{(m)}$ carries, will be reduced.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Motivation II: Visualization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is not easy to visualize data that is more than three dimensions. We can reduce the dimensions of our data to 3 or less in order to plot it.&lt;/p&gt;
&lt;p&gt;We need to find new features, $z1$, $z2$ (and perhaps $z3$) that can effectively &lt;strong&gt;summarize&lt;/strong&gt; all the other features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; hundreds of features related to a country’s economic system may all be combined into one feature that you call “Economic Activity.”&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Principal-Component-Analysis&quot;&gt;&lt;a href=&quot;#2-Principal-Component-Analysis&quot; class=&quot;headerlink&quot; title=&quot;2. Principal Component Analysis&quot;&gt;&lt;/a&gt;2. Principal Component Analysis&lt;/h3&gt;&lt;h4 id=&quot;2-1-PCA-Problem-Formulation&quot;&gt;&lt;a href=&quot;#2-1-PCA-Problem-Formulation&quot; class=&quot;headerlink&quot; title=&quot;2.1 PCA Problem Formulation&quot;&gt;&lt;/a&gt;2.1 PCA Problem Formulation&lt;/h4&gt;&lt;p&gt;The most popular dimensionality reduction algorithm is &lt;em&gt;Principal Component Analysis&lt;/em&gt; (PCA)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem formulation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given two features, $x_1$ and $x_2$, we want to find a single line that effectively describes both features at once. We then map our old features onto this new line to get a new single feature.&lt;/p&gt;
&lt;p&gt;The same can be done with three features, where we map them to a plane.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;goal of PCA&lt;/strong&gt; is to &lt;strong&gt;reduce&lt;/strong&gt; the average of all the distances of every feature to the projection line. This is the &lt;strong&gt;projection error&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Reduce from 2d to 1d: find a direction (a vector $u^{(1)} \in \mathbb{R}^n$) onto which to project the data so as to minimize the projection error.&lt;/p&gt;
&lt;p&gt;The more general case is as follows:&lt;/p&gt;
&lt;p&gt;Reduce from n-dimension to k-dimension: Find k vectors $u^{(1)}, u^{(2)}, \dots, u^{(k)}$ onto which to project the data so as to minimize the projection error.&lt;/p&gt;
&lt;p&gt;If we are converting from 3d to 2d, we will project our data onto two directions (a plane), so k will be 2.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PCA is not linear regression&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In linear regression, we are minimizing the &lt;strong&gt;squared error&lt;/strong&gt; from every point to our predictor line ($(\hat{y} - y)^2$). These are vertical distances.&lt;/li&gt;
&lt;li&gt;In PCA, we are minimizing the &lt;strong&gt;shortest distance&lt;/strong&gt;, or shortest &lt;em&gt;orthogonal&lt;/em&gt; distances, to our data points.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://coursera-1251949857.file.myqcloud.com/MachineLearning/Images/08/PCA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;More generally, in linear regression we are taking all our examples in $x$ and applying the parameters in $Θ$ to predict $y$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In PCA, we are taking a number of features $x_1, x_2, \dots, x_n$, and finding a closest common dataset among them. We aren’t trying to predict any result and we aren’t applying any theta weights to the features.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-2-Principal-Component-Analysis-Algorithm&quot;&gt;&lt;a href=&quot;#2-2-Principal-Component-Analysis-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;2.2 Principal Component Analysis Algorithm&quot;&gt;&lt;/a&gt;2.2 Principal Component Analysis Algorithm&lt;/h4&gt;&lt;p&gt;Before we can apply PCA, there is a data pre-processing step we must perform:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data preprocessing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given training set: $x^{(1)}, x^{(2)}, \dots, x^{(m)}$&lt;/li&gt;
&lt;li&gt;Preprocess (feature scaling / mean normalization): $\mu&lt;em&gt;j = \dfrac{1}{m}\sum^m&lt;/em&gt;{i=1}x_j^{(i)}$&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Replace each $x_j^{(i)}$ with $x_j^{(i)} - \mu_j$&lt;/li&gt;
&lt;li&gt;If different features on different scales (e.g., $x_1$ = size of house, $x_2$ = number of bedrooms), scale features to have comparable range of values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Above, we first subtract the mean of each feature from the original feature. Then we scale all the features $x_j^{(i)} = \dfrac{x_j^{(i)} - \mu_j}{s_j}$&lt;/p&gt;
&lt;p&gt;We can define specifically what it means to reduce from 2d to 1d data as follows:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Sigma = \dfrac{1}{m}\sum^m_{i=1}(x^{(i)})(x^{(i)})^T&lt;/script&gt;&lt;p&gt;The $z$ values are all real numbers and are the projections of our features onto $u^{(1)}$.&lt;/p&gt;
&lt;p&gt;So, PCA has two tasks: figure out $u^{(1)},\dots,u^{(k)}$ and also to find $z_1, z_2, \dots, z_m$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Compute “covariance matrix”&lt;/strong&gt;&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Sigma = \dfrac{1}{m}\sum^m_{i=1}(x^{(i)})(x^{(i)})^T&lt;/script&gt;&lt;p&gt;This can be vectorized in Matlab as:&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Sigma = (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/m) * X&#39; * X; &lt;span class=&quot;comment&quot;&gt;% This Sigma is covariance matrix&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We denote the &lt;strong&gt;covariance matrix&lt;/strong&gt; with a capital sigma (which happens to be the same symbol for summation, confusingly—-they represent entirely different things).&lt;/p&gt;
&lt;p&gt;Note that $x^{(i)}$ is an $n×1$ vector, $(x^{(i)})^T$ is an $1×n$ vector and $X$ is a $m×n$ matrix (row-wise stored examples). The product of those will be an $n×n$ matrix, which are the dimensions of $Σ$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Compute “eigenvectors” of covariance matrix Σ&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[U,S,V] = svd(Sigma);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;What we actually want out of svd() is the ‘U’ matrix of the Sigma covariance matrix: $U \in \mathbb{R}^{n \times n}$. U contains $u^{(1)},\dots,u^{(n)}$, which is exactly what we want.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Take the first k columns of the U matrix and compute z&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We’ll assign the first $k$ columns of $U$ to a variable called $U_{reduce}$. This will be an $n×k$ matrix. We compute z with:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;z^{(i)} = U_{reduce}^T \cdot x^{(i)}&lt;/script&gt;&lt;p&gt;$U&lt;em&gt;{reduce}^T$ will have dimensions $k×n$ while $x^{(i)}$ will have dimensions $n×1$. The product $U&lt;/em&gt;{reduce}^T \cdot x^{(i)}$ will have dimensions $k×1$.&lt;/p&gt;
&lt;p&gt;To summarize, the whole algorithm in octave is roughly:&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Sigma = (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/m) * X&#39; * X; &lt;span class=&quot;comment&quot;&gt;% compute the covariance matrix&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[U,S,V] = svd(Sigma);   &lt;span class=&quot;comment&quot;&gt;% compute our projected directions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ureduce = U(:,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:k);     &lt;span class=&quot;comment&quot;&gt;% take the first k directions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Z = X * Ureduce;        &lt;span class=&quot;comment&quot;&gt;% compute the projected data points&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-Applying-PCA&quot;&gt;&lt;a href=&quot;#3-Applying-PCA&quot; class=&quot;headerlink&quot; title=&quot;3. Applying PCA&quot;&gt;&lt;/a&gt;3. Applying PCA&lt;/h3&gt;&lt;h4 id=&quot;3-1-Reconstruction-from-Compressed-Representation&quot;&gt;&lt;a href=&quot;#3-1-Reconstruction-from-Compressed-Representation&quot; class=&quot;headerlink&quot; title=&quot;3.1 Reconstruction from Compressed Representation&quot;&gt;&lt;/a&gt;3.1 Reconstruction from Compressed Representation&lt;/h4&gt;&lt;p&gt;If we use PCA to compress our data, how can we uncompress our data, or go back to our original number of features?&lt;/p&gt;
&lt;p&gt;To go from 1-dimension back to 2d we do: $z \in \mathbb{R} \rightarrow x \in \mathbb{R}^2$.&lt;/p&gt;
&lt;p&gt;We can do this with the equation: $x&lt;em&gt;{approx}^{(1)} = U&lt;/em&gt;{reduce} \cdot z^{(1)}$.&lt;/p&gt;
&lt;p&gt;Note that we can only get approximations of our original data.&lt;/p&gt;
&lt;p&gt;Note: It turns out that the $U$ matrix has the special property that it is a Unitary Matrix. One of the special properties of a Unitary Matrix is:&lt;/p&gt;
&lt;p&gt;$U^{-1} = U^∗$ where the “*” means “conjugate transpose”.&lt;/p&gt;
&lt;p&gt;Since we are dealing with real numbers here, this is equivalent to:&lt;/p&gt;
&lt;p&gt;$U^{-1} = U^T$ So we could compute the inverse and use that, but it would be a waste of energy and compute cycles.&lt;/p&gt;
&lt;h4 id=&quot;3-2-Choosing-the-Number-of-Principal-Components&quot;&gt;&lt;a href=&quot;#3-2-Choosing-the-Number-of-Principal-Components&quot; class=&quot;headerlink&quot; title=&quot;3.2 Choosing the Number of Principal Components&quot;&gt;&lt;/a&gt;3.2 Choosing the Number of Principal Components&lt;/h4&gt;&lt;p&gt;How do we choose k, also called the &lt;em&gt;number of principal components&lt;/em&gt;? Recall that k is the dimension we are reducing to.&lt;/p&gt;
&lt;p&gt;One way to choose k is by using the following formula:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given the average squared projection error: $\dfrac{1}{m}\sum^m&lt;em&gt;{i=1}||x^{(i)} - x&lt;/em&gt;{approx}^{(i)}||^2$&lt;/li&gt;
&lt;li&gt;Also given the total variation in the data: $\dfrac{1}{m}\sum^m_{i=1}||x^{(i)}||^2$&lt;/li&gt;
&lt;li&gt;Choose k to be the smallest value such that: $\dfrac{\dfrac{1}{m}\sum^m&lt;em&gt;{i=1}||x^{(i)} - x&lt;/em&gt;{approx}^{(i)}||^2}{\dfrac{1}{m}\sum^m_{i=1}||x^{(i)}||^2} \leq 0.01$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, the squared projection error divided by the total variation should be less than one percent, so that &lt;strong&gt;99% of the variance is retained&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Algorithm for choosing k&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Try PCA with k=1,2,…&lt;/li&gt;
&lt;li&gt;Compute $U_{reduce}$, $z$, $x$&lt;/li&gt;
&lt;li&gt;Check the formula given above that 99% of the variance is retained. If not, go to step 1 and increase k.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This procedure would actually be horribly inefficient. In Matlab, we will call svd:&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[U,S,V] = svd(Sigma)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Which gives us a matrix S. We can actually check for 99% of retained variance using the $S$ matrix as follows:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\dfrac{\sum_{i=1}^kS_{ii}}{\sum_{i=1}^nS_{ii}} \geq 0.99&lt;/script&gt;&lt;h4 id=&quot;3-3-Advice-for-Applying-PCA&quot;&gt;&lt;a href=&quot;#3-3-Advice-for-Applying-PCA&quot; class=&quot;headerlink&quot; title=&quot;3.3 Advice for Applying PCA&quot;&gt;&lt;/a&gt;3.3 Advice for Applying PCA&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;The most common use of PCA is to speed up supervised learning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a training set with a large number of features (e.g. $x^{(1)},\dots,x^{(m)} \in \mathbb{R}^{10000}$ ) we can use PCA to reduce the number of features in each example of the training set (e.g. $z^{(1)},\dots,z^{(m)} \in \mathbb{R}^{1000}$).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note that we should define the PCA reduction from $x^{(i)}$ to $z^{(i)}$ only on the &lt;font color=&quot;red&quot;&gt;training set&lt;/font&gt; and not on the cross-validation or test sets.&lt;/strong&gt; You can apply the mapping $z^{(i)}$ to your cross-validation and test sets after it is defined on the training set.&lt;/p&gt;
&lt;p&gt;Applications&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compressions &lt;ul&gt;
&lt;li&gt;Reduce space of data&lt;/li&gt;
&lt;li&gt;Speed up algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualization of data (Choose k = 2 or k = 3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bad use of PCA&lt;/strong&gt;: trying to prevent overfitting. We might think that reducing the features with PCA would be an effective way to address overfitting. It might work, but is not recommended because &lt;strong&gt;it does not consider the values of our results y.&lt;/strong&gt; Using just regularization will be at least as effective.&lt;/p&gt;
&lt;p&gt;Don’t assume you need to do PCA. &lt;strong&gt;Try your full machine learning algorithm without PCA first.&lt;/strong&gt; Then use PCA if you find that you need it.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Dimensionality-Reduction&quot;&gt;&lt;a href=&quot;#Dimensionality-Reduction&quot; class=&quot;headerlink&quot; title=&quot;Dimensionality Reduction&quot;&gt;&lt;/a&gt;Dimensionality
    
    </summary>
    
      <category term="Machine Learning" scheme="http://louie.link/categories/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>(Week7) 03 SVMs in Practice</title>
    <link href="http://louie.link/Machine-Learning/07_03_SVMsinPractice/"/>
    <id>http://louie.link/Machine-Learning/07_03_SVMsinPractice/</id>
    <published>2018-04-10T07:00:00.000Z</published>
    <updated>2018-04-16T22:14:28.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;SVMs-in-Practice&quot;&gt;&lt;a href=&quot;#SVMs-in-Practice&quot; class=&quot;headerlink&quot; title=&quot;SVMs in Practice&quot;&gt;&lt;/a&gt;SVMs in Practice&lt;/h2&gt;&lt;p&gt;Materials are from &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/resources/Es9Qo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coursera Machine Learning by Andrew Ng&lt;/a&gt;. &lt;/p&gt;
&lt;h3 id=&quot;1-Using-An-SVM&quot;&gt;&lt;a href=&quot;#1-Using-An-SVM&quot; class=&quot;headerlink&quot; title=&quot;1. Using An SVM&quot;&gt;&lt;/a&gt;1. Using An SVM&lt;/h3&gt;&lt;p&gt;There are lots of good SVM libraries already written. A. Ng often uses ‘liblinear’ and ‘libsvm’. &lt;/p&gt;
&lt;p&gt;In practical application, the choices you do need to make are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choice of parameter $C$&lt;/li&gt;
&lt;li&gt;Choice of kernel (similarity function)&lt;/li&gt;
&lt;li&gt;No kernel (“linear” kernel) - gives standard linear classifier&lt;/li&gt;
&lt;li&gt;Gaussian Kernel (above) - need to choose $σ^2$&lt;/li&gt;
&lt;li&gt;Choose when $n$ is large and when $m$ is small (SVM without a kernel or LR)&lt;/li&gt;
&lt;li&gt;Choose when $n$ is small and $m$ is large (add features, then SVM without a kernel or LR)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Choose when $n$ is small and $m$ is intermediate (SVM with Gaussian kernel)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The library may ask you to provide the kernel function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Do perform &lt;strong&gt;feature scaling&lt;/strong&gt; before using the Gaussian Kernel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Not all similarity functions are valid kernels. They must satisfy &lt;strong&gt;“Mercer’s Theorem”&lt;/strong&gt; which guarantees that the SVM package’s optimizations run correctly and do not diverge.&lt;/p&gt;
&lt;p&gt;You want to train C and the parameters for the kernel function using the training and cross-validation datasets.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Multi-class-Classification&quot;&gt;&lt;a href=&quot;#2-Multi-class-Classification&quot; class=&quot;headerlink&quot; title=&quot;2. Multi-class Classification&quot;&gt;&lt;/a&gt;2. Multi-class Classification&lt;/h3&gt;&lt;p&gt;Many SVM libraries have multi-class classification built-in.&lt;/p&gt;
&lt;p&gt;You can use the &lt;strong&gt;one-vs-all&lt;/strong&gt; method just like we did for logistic regression, where $y \in {1,2,3,\dots,K}$ with $\Theta^{(1)}, \Theta^{(2)}, \dots,\Theta^{(K)}$. We pick class $i$ with the largest $(\Theta^{(i)})^Tx$.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-Logistic-Regression-vs-SVMs&quot;&gt;&lt;a href=&quot;#3-Logistic-Regression-vs-SVMs&quot; class=&quot;headerlink&quot; title=&quot;3. Logistic Regression vs. SVMs&quot;&gt;&lt;/a&gt;3. Logistic Regression vs. SVMs&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;If n is large (relative to m), then use logistic regression, or SVM without a kernel (the “linear kernel”)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If n is small and m is intermediate, then use SVM with a Gaussian Kernel&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If n is small and m is large, then manually create/add more features, then use logistic regression or SVM without a kernel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first case, we don’t have enough examples to need a complicated polynomial hypothesis.&lt;/p&gt;
&lt;p&gt;In the second example, we have enough examples that we may need a complex non-linear hypothesis. &lt;/p&gt;
&lt;p&gt;In the last case, we want to increase our features so that logistic regression becomes applicable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: a neural network is likely to work well for any of these situations, but may be slower to train.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://coursera-1251949857.file.myqcloud.com/MachineLearning/Images/07/LR_SVM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional references&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“An Idiot’s Guide to Support Vector Machines”: &lt;a href=&quot;http://web.mit.edu/6.034/wwwbob/svm-notes-long-08.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://web.mit.edu/6.034/wwwbob/svm-notes-long-08.pdf&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SVMs-in-Practice&quot;&gt;&lt;a href=&quot;#SVMs-in-Practice&quot; class=&quot;headerlink&quot; title=&quot;SVMs in Practice&quot;&gt;&lt;/a&gt;SVMs in Practice&lt;/h2&gt;&lt;p&gt;Materials are 
    
    </summary>
    
      <category term="Machine Learning" scheme="http://louie.link/categories/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>(Week7) 02 Kernels</title>
    <link href="http://louie.link/Machine-Learning/07_02_Kernels/"/>
    <id>http://louie.link/Machine-Learning/07_02_Kernels/</id>
    <published>2018-04-09T07:00:00.000Z</published>
    <updated>2018-04-16T22:14:21.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Kernels&quot;&gt;&lt;a href=&quot;#Kernels&quot; class=&quot;headerlink&quot; title=&quot;Kernels&quot;&gt;&lt;/a&gt;Kernels&lt;/h2&gt;&lt;p&gt;Materials are from &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/resources/Es9Qo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coursera Machine Learning by Andrew Ng&lt;/a&gt;. &lt;/p&gt;
&lt;h3 id=&quot;1-Kernels-I&quot;&gt;&lt;a href=&quot;#1-Kernels-I&quot; class=&quot;headerlink&quot; title=&quot;1. Kernels I&quot;&gt;&lt;/a&gt;1. Kernels I&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Kernels&lt;/strong&gt; allow us to make complex, non-linear classifiers using Support Vector Machines.&lt;/p&gt;
&lt;p&gt;Given $x$, compute new feature depending on proximity to &lt;strong&gt;landmarks&lt;/strong&gt; $l^{(1)},\ l^{(2)},\ l^{(3)}$. &lt;/p&gt;
&lt;p&gt;To do this, we find the &lt;strong&gt;“similarity”&lt;/strong&gt; of $x$ and some landmark $l^{(i)}$:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_i = sim(x, l^{(i)}) = \exp(-\dfrac{||x - l^{(i)}||^2}{2\sigma^2})&lt;/script&gt;&lt;p&gt;This “similarity” function is called a &lt;strong&gt;Gaussian Kernel&lt;/strong&gt;. It is a specific example of a kernel.&lt;/p&gt;
&lt;p&gt;The similarity function can also be written as follows:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f_i = similarity(x, l^{(i)}) = \exp(-\dfrac{\sum^n_{j=1}(x_j-l_j^{(i)})^2}{2\sigma^2})&lt;/script&gt;&lt;p&gt;There are a couple properties of the similarity function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If $x≈l^{(i)}$, then $f_i = \exp(-\dfrac{\approx 0^2}{2\sigma^2}) \approx 1$&lt;/li&gt;
&lt;li&gt;If x is far from $l^{(i)}$, then $f_i = \exp(-\dfrac{(large\ number)^2}{2\sigma^2}) \approx 0$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, if $x$ and the landmark are close, then the similarity will be close to 1, and if $x$ and the landmark are far away from each other, the similarity will be close to 0.&lt;/p&gt;
&lt;p&gt;Each landmark gives us the features in our hypothesis:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{align*}l^{(1)} \rightarrow f_1 \newline l^{(2)} \rightarrow f_2 \newline l^{(3)} \rightarrow f_3 \newline\dots \newline h_\Theta(x) = \Theta_1f_1 + \Theta_2f_2 + \Theta_3f_3 + \dots\end{align*}&lt;/script&gt;&lt;p&gt;$σ^2$ is a parameter of the Gaussian Kernel, and it can be modified to increase or decrease the &lt;strong&gt;drop-off&lt;/strong&gt; of our feature $f_i$. Combined with looking at the values inside $Θ$, we can choose these landmarks to get the general shape of the decision boundary.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-Kernels-II&quot;&gt;&lt;a href=&quot;#2-Kernels-II&quot; class=&quot;headerlink&quot; title=&quot;2. Kernels II&quot;&gt;&lt;/a&gt;2. Kernels II&lt;/h4&gt;&lt;p&gt;One way to get the landmarks is to put them in the &lt;strong&gt;exact same&lt;/strong&gt; locations as all the training examples. This gives us m landmarks, with one landmark per training example.&lt;/p&gt;
&lt;p&gt;Given example x:&lt;/p&gt;
&lt;p&gt;$f_1 = similarity(x,l^{(1)})$, $f_2 = similarity(x,l^{(2)})$, $f_3 = similarity(x,l^{(3)})$ and so on.&lt;/p&gt;
&lt;p&gt;This gives us a “feature vector,” $f&lt;em&gt;{(i)}$ of all our features for example $x&lt;/em&gt;{(i)}$. We may also set $f&lt;em&gt;0=1$ to correspond with $Θ_0$. Thus given training example $x&lt;/em&gt;{(i)}$:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;x^{(i)} \rightarrow \begin{bmatrix}f_1^{(i)} = similarity(x^{(i)}, l^{(1)}) \newline f_2^{(i)} = similarity(x^{(i)}, l^{(2)}) \newline\vdots \newline f_m^{(i)} = similarity(x^{(i)}, l^{(m)}) \newline\end{bmatrix}&lt;/script&gt;&lt;p&gt;Now to get the parameters $Θ$ we can use the SVM minimization algorithm but with $f^{(i)}$ substituted in for $x_{(i)}$:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\min_{\Theta} C \sum_{i=1}^m y^{(i)}\text{cost}_1(\Theta^Tf^{(i)}) + (1 - y^{(i)})\text{cost}_0(\theta^Tf^{(i)}) + \dfrac{1}{2}\sum_{j=1}^n \Theta^2_j&lt;/script&gt;&lt;p&gt;Using kernels to generate $f^{(i)}$ is not exclusive to SVMs and may also be applied to logistic regression. However, because of computational optimizations on SVMs, kernels combined with SVMs is much faster than with other algorithms, so kernels are almost always found combined only with SVMs.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-Choosing-SVM-Parameters&quot;&gt;&lt;a href=&quot;#3-Choosing-SVM-Parameters&quot; class=&quot;headerlink&quot; title=&quot;.3 Choosing SVM Parameters&quot;&gt;&lt;/a&gt;.3 Choosing SVM Parameters&lt;/h4&gt;&lt;p&gt;Choosing $C$ (recall that $C=\frac{1}{λ}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If $C$ is small, then we get  higher bias / lower variance (underfitting)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;If $C$ is large, then we get lower bias / higher variance (overfitting)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other parameter we must choose is $σ_2$ from the Gaussian Kernel function:&lt;/p&gt;
&lt;p&gt;With a large $σ_2$, the features fi vary more smoothly, causing higher bias and lower variance.&lt;/p&gt;
&lt;p&gt;With a small $σ_2$, the features fi vary less smoothly, causing lower bias and higher variance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://coursera-1251949857.file.myqcloud.com/MachineLearning/Images/07/C_Theta.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Kernels&quot;&gt;&lt;a href=&quot;#Kernels&quot; class=&quot;headerlink&quot; title=&quot;Kernels&quot;&gt;&lt;/a&gt;Kernels&lt;/h2&gt;&lt;p&gt;Materials are from &lt;a href=&quot;https://www.coursera.o
    
    </summary>
    
      <category term="Machine Learning" scheme="http://louie.link/categories/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>(Week7) 01 Large Margin Classification</title>
    <link href="http://louie.link/Machine-Learning/07_01_LargeMarginClassification/"/>
    <id>http://louie.link/Machine-Learning/07_01_LargeMarginClassification/</id>
    <published>2018-04-08T07:00:00.000Z</published>
    <updated>2018-04-16T22:14:15.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Large-Margin-Classification&quot;&gt;&lt;a href=&quot;#Large-Margin-Classification&quot; class=&quot;headerlink&quot; title=&quot;Large Margin Classification&quot;&gt;&lt;/a&gt;Large Margin Classification&lt;/h2&gt;&lt;p&gt;Materials are from &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/resources/Es9Qo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coursera Machine Learning by Andrew Ng&lt;/a&gt;. &lt;/p&gt;
&lt;h3 id=&quot;1-Optimization-Objective&quot;&gt;&lt;a href=&quot;#1-Optimization-Objective&quot; class=&quot;headerlink&quot; title=&quot;1. Optimization Objective&quot;&gt;&lt;/a&gt;1. Optimization Objective&lt;/h3&gt;&lt;p&gt;The &lt;strong&gt;Support Vector Machine&lt;/strong&gt; (SVM) is another type of &lt;strong&gt;&lt;em&gt;supervised&lt;/em&gt;&lt;/strong&gt; machine learning algorithm. It is sometimes cleaner and more powerful.&lt;/p&gt;
&lt;p&gt;Recall that in logistic regression, we use the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if y=1, then $h_θ(x)≈1$ and $Θ^Tx≫0$&lt;/li&gt;
&lt;li&gt;if y=0, then $h_θ(x)≈0$ and $Θ^Tx≪0$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recall the cost function for (unregularized) logistic regression:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{align*}J(\theta) &amp; = \frac{1}{m}\sum_{i=1}^m -y^{(i)} \log(h_\theta(x^{(i)})) - (1 - y^{(i)})\log(1 - h_\theta(x^{(i)}))\\ &amp; = \frac{1}{m}\sum_{i=1}^m -y^{(i)} \log\Big(\dfrac{1}{1 + e^{-\theta^Tx^{(i)}}}\Big) - (1 - y^{(i)})\log\Big(1 - \dfrac{1}{1 + e^{-\theta^Tx^{(i)}}}\Big)\end{align*}&lt;/script&gt;&lt;p&gt;To make a support vector machine, we will modify the first term of the cost function $-\log(h_{\theta}(x)) = -\log\Big(\dfrac{1}{1 + e^{-\theta^Tx}}\Big)$ so that when $θ^Tx$ (from now on, we shall refer to this as &lt;strong&gt;z&lt;/strong&gt;) is &lt;strong&gt;greater than&lt;/strong&gt; 1, it outputs 0. Furthermore, for values of z less than 1, we shall use a straight decreasing line instead of the sigmoid curve.(In the literature, this is called a hinge loss (&lt;a href=&quot;https://en.wikipedia.org/wiki/Hinge_loss)&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Hinge_loss)&lt;/a&gt; function.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://coursera-1251949857.file.myqcloud.com/MachineLearning/Images/07/1.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;Similarly, we modify the second term of the cost function $-\log(1 - h_{\theta(x)}) = -\log\Big(1 - \dfrac{1}{1 + e^{-\theta^Tx}}\Big)$ so that when z is &lt;strong&gt;less than&lt;/strong&gt; -1, it outputs 0. We also modify it so that for values of z greater than -1, we use a straight increasing line instead of the sigmoid curve.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://coursera-1251949857.file.myqcloud.com/MachineLearning/Images/07/2.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;We shall denote these as $cost_1(z)$ and $cost_0(z)$ (respectively, note that $cost_1(z)$ is the cost for classifying when y=1, and $cost_0(z)$ is the cost for classifying when y=0), and we may define them as follows (where k is an arbitrary constant defining the magnitude of the slope of the line):&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;z = \theta^Tx&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{cost}_0(z) = \max(0, k(1+z))&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{cost}_1(z) = \max(0, k(1-z))&lt;/script&gt;&lt;p&gt;Recall the full cost function from (regularized) logistic regression:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = \frac{1}{m} \sum_{i=1}^m y^{(i)}(-\log(h_\theta(x^{(i)}))) + (1 - y^{(i)})(-\log(1 - h_\theta(x^{(i)}))) + \dfrac{\lambda}{2m}\sum_{j=1}^n \Theta^2_j&lt;/script&gt;&lt;p&gt;Note that the negative sign has been distributed into the sum in the above equation.&lt;/p&gt;
&lt;p&gt;We may transform this into the cost function for support vector machines by substituting cost0(z) and cost1(z):&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = \frac{1}{m} \sum_{i=1}^m y^{(i)} \ \text{cost}_1(\theta^Tx^{(i)}) + (1 - y^{(i)}) \ \text{cost}_0(\theta^Tx^{(i)}) + \dfrac{\lambda}{2m}\sum_{j=1}^n \Theta^2_j&lt;/script&gt;&lt;p&gt;We can optimize this a bit by multiplying this by m (thus removing the m factor in the denominators). Note that this does not affect our optimization, since we’re simply multiplying our cost function by a positive constant (for example, minimizing $(u−5)^2+1$ gives us 5; multiplying it by 10 to make it $10(u−5)^2+10$ still gives us 5 when minimized).&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = \sum_{i=1}^m y^{(i)} \ \text{cost}_1(\theta^Tx^{(i)}) + (1 - y^{(i)}) \ \text{cost}_0(\theta^Tx^{(i)}) + \dfrac{\lambda}{2}\sum_{j=1}^n \Theta^2_j&lt;/script&gt;&lt;p&gt;Furthermore, convention dictates that we regularize using a factor C, instead of λ, like so:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = C\sum_{i=1}^m y^{(i)} \ \text{cost}_1(\theta^Tx^{(i)}) + (1 - y^{(i)}) \ \text{cost}_0(\theta^Tx^{(i)}) + \dfrac{1}{2}\sum_{j=1}^n \Theta^2_j&lt;/script&gt;&lt;p&gt;This is equivalent to multiplying the equation by $C=\frac{1}{λ}$, and thus results in the same values when optimized. Now, when we wish to: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regularize more (&lt;strong&gt;reduce overfitting&lt;/strong&gt;), we (increase $\lambda$, so $\theta$ is smaller, thus model is simpler) &lt;em&gt;decrease&lt;/em&gt; C;&lt;/li&gt;
&lt;li&gt;Regularize less (&lt;strong&gt;reduce underfitting&lt;/strong&gt;), we (decrease $\lambda$) &lt;em&gt;increase&lt;/em&gt; C.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://coursera-1251949857.file.myqcloud.com/MachineLearning/Images/07/C_Theta.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;Finally, note that the hypothesis of the Support Vector Machine is ***not*** interpreted as the probability of y being 1 or 0 (as it is for the hypothesis of logistic regression). Instead, it outputs either 1 or 0. (In technical terms, it is a discriminant function.)&lt;/font&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_\theta(x) =\begin{cases}    1 &amp; \text{if} \ \Theta^Tx \geq 0 \\    0 &amp; \text{otherwise}\end{cases}&lt;/script&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-Large-Margin-Intuition&quot;&gt;&lt;a href=&quot;#2-Large-Margin-Intuition&quot; class=&quot;headerlink&quot; title=&quot;2. Large Margin Intuition&quot;&gt;&lt;/a&gt;2. Large Margin Intuition&lt;/h4&gt;&lt;p&gt;A useful way to think about Support Vector Machines is to think of them as &lt;em&gt;Large Margin Classifiers&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If y=1, we want $Θ^Tx≥1$ (not just ≥0)&lt;/li&gt;
&lt;li&gt;If y=0, we want $Θ^Tx≤−1$ (not just &amp;lt;0)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now when we set our constant $C$ to a very &lt;strong&gt;large&lt;/strong&gt; value (e.g. 100,000), our optimizing function will constrain $Θ$ such that the equation A (the summation of the cost of each example) equals 0. We impose the following constraints on $Θ$:&lt;/p&gt;
&lt;p&gt;$Θ^Tx≥1$ if $y=1$ and $Θ^Tx≤−1$ if $y=0$.&lt;/p&gt;
&lt;p&gt;If $C$ is very large, we must choose $Θ$ parameters such that:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{i=1}^m y^{(i)}\text{cost}_1(\Theta^Tx) + (1 - y^{(i)})\text{cost}_0(\Theta^Tx) = 0&lt;/script&gt;&lt;p&gt;This reduces our cost function to:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{align*} J(\theta) = C \cdot 0 + \dfrac{1}{2}\sum_{j=1}^n \Theta^2_j \newline = \dfrac{1}{2}\sum_{j=1}^n \Theta^2_j\end{align*}&lt;/script&gt;&lt;p&gt;Recall the decision boundary from logistic regression (the line separating the positive and negative examples). In SVMs, the decision boundary has the special property that it is &lt;strong&gt;as far away as possible&lt;/strong&gt; from both the positive and the negative examples.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://coursera-1251949857.file.myqcloud.com/MachineLearning/Images/07/margin.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The distance of the decision boundary &lt;strong&gt;to the nearest example&lt;/strong&gt; is called the &lt;strong&gt;margin&lt;/strong&gt;. Since SVMs maximize this margin, it is often called a &lt;strong&gt;&lt;em&gt;Large Margin Classifier&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The SVM will separate the negative and positive examples by a &lt;strong&gt;large margin&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;=&amp;gt; This large margin is only achieved when &lt;strong&gt;C is very large&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Data is &lt;strong&gt;linearly separable&lt;/strong&gt; when a &lt;strong&gt;straight line&lt;/strong&gt; can separate the positive and negative examples.&lt;/p&gt;
&lt;p&gt;If we have &lt;strong&gt;outlier&lt;/strong&gt; examples that we don’t want to affect the decision boundary, then we can &lt;strong&gt;reduce&lt;/strong&gt; C.&lt;/p&gt;
&lt;p&gt;Increasing and decreasing C is similar to respectively decreasing and increasing λ, and can simplify our decision boundary.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-Mathematics-Behind-Large-Margin-Classification&quot;&gt;&lt;a href=&quot;#3-Mathematics-Behind-Large-Margin-Classification&quot; class=&quot;headerlink&quot; title=&quot;3. Mathematics Behind Large Margin Classification&quot;&gt;&lt;/a&gt;3. Mathematics Behind Large Margin Classification&lt;/h4&gt;&lt;h5 id=&quot;Vector-Inner-Product&quot;&gt;&lt;a href=&quot;#Vector-Inner-Product&quot; class=&quot;headerlink&quot; title=&quot;Vector Inner Product&quot;&gt;&lt;/a&gt;Vector Inner Product&lt;/h5&gt;&lt;p&gt;Say we have two vectors, $u$ and $v$:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{align*} u =  \begin{bmatrix} u_1 \newline u_2 \end{bmatrix} &amp; v = \begin{bmatrix} v_1 \newline v_2 \end{bmatrix}\end{align*}&lt;/script&gt;&lt;p&gt;The &lt;strong&gt;length of vector v&lt;/strong&gt; is denoted $||v||$, and it describes the line on a graph from origin $(0,0)$ to $(v1,v2)$.&lt;/p&gt;
&lt;p&gt;The length of vector $v$ can be calculated with $\sqrt{v_1^2 + v_2^2}$  by the Pythagorean theorem.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;projection&lt;/strong&gt; of vector $v$ onto vector $u$ is found by taking a right angle from $u$ to the end of $v$, creating a right triangle.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$p$ = length of projection of $v$ onto the vector $u$.&lt;/li&gt;
&lt;li&gt;$u^Tv= p \cdot ||u||$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that $u^Tv = ||u|| \cdot ||v|| \cos \theta$ where $θ$ is the angle between $u$ and $v$. Also, $p = ||v|| \cos \theta$. If you substitute $p$ for $||v|| \cos \theta$, you get $u^Tv= p \cdot ||u||$.&lt;/p&gt;
&lt;p&gt;So the product $u^Tv$ is equal to the length of the projection times the length of vector $u$.&lt;/p&gt;
&lt;p&gt;In our example, since u and v are vectors of the same length, $u^Tv = v^Tu$.&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;u^Tv = v^Tu = p \cdot ||u|| = u_1v_1 + u_2v_2&lt;/script&gt;&lt;p&gt;If the &lt;strong&gt;angle&lt;/strong&gt; between the lines for $v$ and $u$ is &lt;strong&gt;greater than 90 degrees&lt;/strong&gt;, then the projection p will be &lt;strong&gt;negative&lt;/strong&gt;.&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{align*}&amp;\min_\Theta \dfrac{1}{2}\sum_{j=1}^n \Theta_j^2 \newline&amp;= \dfrac{1}{2}(\Theta_1^2 + \Theta_2^2 + \dots + \Theta_n^2) \newline&amp;= \dfrac{1}{2}(\sqrt{\Theta_1^2 + \Theta_2^2 + \dots + \Theta_n^2})^2 \newline&amp;= \dfrac{1}{2}||\Theta ||^2 \newline\end{align*}&lt;/script&gt;&lt;p&gt;We can use the same rules to rewrite $Θ^Tx(i)$:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Theta^Tx^{(i)} = p^{(i)} \cdot ||\Theta || = \Theta_1x_1^{(i)} + \Theta_2x_2^{(i)} + \dots + \Theta_n x_n^{(i)}&lt;/script&gt;&lt;p&gt;So we now have a new &lt;strong&gt;optimization objective&lt;/strong&gt; by substituting $p^{(i)} \cdot ||\Theta ||$ in for $\Theta^Tx^{(i)}$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If y=1, we want $p^{(i)} \cdot ||\Theta || \geq 1$&lt;/li&gt;
&lt;li&gt;If y=0, we want $p^{(i)} \cdot ||\Theta || \leq -1$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason this causes a “large margin” is because: &lt;strong&gt;the vector for $Θ$ is perpendicular to the decision boundary.&lt;/strong&gt; In order for our optimization objective (above) to hold true, we need the absolute value of our projections $p^{(i)}$ to be as large as possible.&lt;/p&gt;
&lt;p&gt;If $Θ_0=0$, then all our decision boundaries will intersect (0,0). If $\Theta_0 \neq 0$, the support vector machine will still find a large margin for the decision boundary.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Large-Margin-Classification&quot;&gt;&lt;a href=&quot;#Large-Margin-Classification&quot; class=&quot;headerlink&quot; title=&quot;Large Margin Classification&quot;&gt;&lt;/a&gt;Large
    
    </summary>
    
      <category term="Machine Learning" scheme="http://louie.link/categories/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://louie.link/uncategorized/Solr%20Steps/"/>
    <id>http://louie.link/uncategorized/Solr Steps/</id>
    <published>2018-04-06T20:50:36.000Z</published>
    <updated>2018-04-16T17:53:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Search-Engine-Using-Solr&quot;&gt;&lt;a href=&quot;#Search-Engine-Using-Solr&quot; class=&quot;headerlink&quot; title=&quot;Search Engine Using Solr&quot;&gt;&lt;/a&gt;Search Engine Using Solr&lt;/h2&gt;&lt;p&gt;This project implements a simple search engine which searches news in NBC. Tools used in this project are listed below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Crawler:    Crawler4j&lt;/li&gt;
&lt;li&gt;Extract Links: Jsoup&lt;/li&gt;
&lt;li&gt;PageRank: nextworkX&lt;/li&gt;
&lt;li&gt;Indexing: Solr (7.3.0)&lt;/li&gt;
&lt;li&gt;Web Server: php, solr-php-client    &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;High Level Logic for Server:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;A user enters a query $q$ in the browser and it will be sent to web server;&lt;/li&gt;
&lt;li&gt;Web Server processes this query $q$ - formats it and sends it to Solr;&lt;/li&gt;
&lt;li&gt;Solr processes this query $q$ and returns the results in JSON format;&lt;/li&gt;
&lt;li&gt;Web Server re-formats the results and sends them back to user (browser).&lt;/li&gt;
&lt;li&gt;Browser displays the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-Crawling&quot;&gt;&lt;a href=&quot;#1-Crawling&quot; class=&quot;headerlink&quot; title=&quot;1. Crawling&quot;&gt;&lt;/a&gt;1. Crawling&lt;/h3&gt;&lt;p&gt;After crawling, we have html files (only crawled html) and a mapping csv file (each record is &lt;code&gt;fileName,url&lt;/code&gt;, such as &lt;code&gt;8673b50f3b1166e8e71f86d6c3dc135a.html,https://www.nbcnews.com/widget/video-embed/1103931459686&lt;/code&gt;). &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Extract-Links-and-Build-Graph&quot;&gt;&lt;a href=&quot;#2-Extract-Links-and-Build-Graph&quot; class=&quot;headerlink&quot; title=&quot;2. Extract Links and Build Graph&quot;&gt;&lt;/a&gt;2. Extract Links and Build Graph&lt;/h3&gt;&lt;p&gt;(1) Next step is to extract links from the downloaded pages in order to compute &lt;code&gt;pagerank&lt;/code&gt;. Jsoup is used here. &lt;/p&gt;
&lt;p&gt;(2) After extracting the links, a directed graph can be construct for later pagerank computation. Each vertex is a web page. If page A has a link to page B, then there is a directed edge from vertex A to vertex B. &lt;strong&gt;Edge List&lt;/strong&gt; is used here to represent a graph, this is one of the accepted format for nextworkX to compute pagerank. We can also use adjacency list.&lt;/p&gt;
&lt;p&gt;In this exercise, we only focus on the downloaded pages, so if a page A has a link to a page B that is not in the downloaded pages, we ignore page B. (This step is done by using the mapping file) Core code is:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt; urlFileMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;(); &lt;span class=&quot;comment&quot;&gt;// build &amp;lt;url, docID&amp;gt; map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt; fileUrlMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;(); &lt;span class=&quot;comment&quot;&gt;// &amp;lt;docID,, url&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Set&amp;lt;String&amp;gt; edges = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;(); &lt;span class=&quot;comment&quot;&gt;// each element is a string: &quot;source target&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1. build &amp;lt;url, docID&amp;gt; map (urlFileMap)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2. construct edge list (as a set, each element is &quot;sourcePage targetPage&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    File dir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(dirPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (File file : dir.listFiles()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String fileName = file.getName();			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String baseURL = fileUrlMap.get(fileName); &lt;span class=&quot;comment&quot;&gt;//full url here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(baseURL != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Document doc = Jsoup.parse(file, &lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;, baseURL); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Elements links = doc.select(&lt;span class=&quot;string&quot;&gt;&quot;a[href]&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// &quot;a&quot; with href&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//Note- provide absolute path for “edgeList.txt”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Element link : links) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//https://jsoup.org/cookbook/extracting-data/working-with-urls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                String url = link.attr(&lt;span class=&quot;string&quot;&gt;&quot;abs:href&quot;&lt;/span&gt;).trim(); &lt;span class=&quot;comment&quot;&gt;// get url of an outgoing link&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (urlFileMap.containsKey(url)) &lt;span class=&quot;comment&quot;&gt;// constraint to NBC news domain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    edges.add(base + fileName + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + base + urlFileMap.get(url));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. write edge list to file &quot;edgeList.txt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    writeToFile();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now we have &lt;code&gt;edgeList.txt&lt;/code&gt;, each line represents an edge&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;Note- provide **absolute path** for “edgeList.txt”&lt;/font&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/c02f0bc016c4b43aa64f737f2a1ee922.html /Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/c50cfeb689e7081ce22308ce774aad79.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/47ce74c5340fd1b3508c51a9a2010d36.html /Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/526e34baa0856a7074d1d43105adb2d1.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/0d92753a6abf5cb808888c971199b873.html /Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/ff129bd5d9fe133519b39358657f57c5.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/28f0e9d7fbfc88d577f31de8883ab142.html /Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/eb0a20c13e4bc86fda22e044913db937.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/bdfb5bfd4fc13b396d616958e5400b59.html /Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/5b9e1885afc0f4122b7ae52f5a7433d1.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/8428d5788f4b3083a54d9c9a2c6719e6.html /Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/ff129bd5d9fe133519b39358657f57c5.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-PageRank-networkX&quot;&gt;&lt;a href=&quot;#3-PageRank-networkX&quot; class=&quot;headerlink&quot; title=&quot;3. PageRank: networkX&quot;&gt;&lt;/a&gt;3. PageRank: networkX&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://networkx.github.io/documentation/networkx-1.10/reference/classes.digraph.html#networkx.DiGraph&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;networkX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just use it directly and save the result to file `external_pageRankFile.txt``.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;G = nx.read_edgelist(&lt;span class=&quot;string&quot;&gt;&quot;edgeList.txt&quot;&lt;/span&gt;, create_using = nx.DiGraph())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pr = nx.pagerank(G, alpha=&lt;span class=&quot;number&quot;&gt;0.85&lt;/span&gt;, personalization=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, max_iter=&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, tol=&lt;span class=&quot;number&quot;&gt;1e-06&lt;/span&gt;, nstart=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, weight=&lt;span class=&quot;string&quot;&gt;&#39;weight&#39;&lt;/span&gt;, dangling=&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In &lt;code&gt;external_pageRankFile.txt&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/e024f5262e4324dc42e1549f9705f605.html=3.06515045359e-05&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/f87acfb530a008feddaab05f54e387fd.html=1.96306446485e-05&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/d2507dc940e085fff41b5f43c728ec48.html=1.37585332474e-05&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/866db8e7ebfc9a95cb70d48454b293a4.html=1.37585332474e-05&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/abd3e3e2164bb595bcadb641dee73ac3.html=3.69594941493e-05&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/8c36c0b2b956f310b664f0fe78986368.html=1.37585332474e-05&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles/6e8d9ef2948afa495337dca89f6de3bb.html=1.37585332474e-05&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-Indexing-using-Solr&quot;&gt;&lt;a href=&quot;#4-Indexing-using-Solr&quot; class=&quot;headerlink&quot; title=&quot;4. Indexing using Solr&quot;&gt;&lt;/a&gt;4. Indexing using Solr&lt;/h3&gt;&lt;p&gt;Solr can index html files using the built-in post tool, which leverages &lt;a href=&quot;https://www.tutorialspoint.com/tika/tika_overview.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Apache Tika&lt;/strong&gt;&lt;/a&gt; and auto extracts content from html files. Tika is included with the Solr installation.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-1-Apache-Tika&quot;&gt;&lt;a href=&quot;#4-1-Apache-Tika&quot; class=&quot;headerlink&quot; title=&quot;4.1 Apache Tika&quot;&gt;&lt;/a&gt;4.1 Apache Tika&lt;/h4&gt;&lt;p&gt;Apache Tika is a library that is used for document type detection and content extraction from various file formats. &lt;/p&gt;
&lt;p&gt;Internally, Tika uses various existing document parsers and document type detection techniques to detect and extract data. For example, in case of HTML pages, Tika uses its HTMLParser to strip out all html tags and only stores the content from the html pages. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-2-Solr-Configuration&quot;&gt;&lt;a href=&quot;#4-2-Solr-Configuration&quot; class=&quot;headerlink&quot; title=&quot;4.2 Solr Configuration&quot;&gt;&lt;/a&gt;4.2 Solr Configuration&lt;/h4&gt;&lt;p&gt;We use standalone mode in this project, to start solr, use &lt;code&gt;bin/solr start&lt;/code&gt;, and we can visit the admin page at &lt;code&gt;http://localhost:8983/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h5 id=&quot;1-Create-a-new-core&quot;&gt;&lt;a href=&quot;#1-Create-a-new-core&quot; class=&quot;headerlink&quot; title=&quot;(1) Create a new core&quot;&gt;&lt;/a&gt;(1) Create a new core&lt;/h5&gt;&lt;p&gt;Create a new core name &lt;code&gt;myexample&lt;/code&gt;, we use &lt;code&gt;bin/solr create –c myexample&lt;/code&gt;. This creates a core under &lt;code&gt;solr-7.3.0/server/solr/myexample&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h5 id=&quot;2-Modify-managed-schema-for-indexing&quot;&gt;&lt;a href=&quot;#2-Modify-managed-schema-for-indexing&quot; class=&quot;headerlink&quot; title=&quot;(2) Modify managed-schema for indexing&quot;&gt;&lt;/a&gt;(2) Modify &lt;code&gt;managed-schema&lt;/code&gt; for indexing&lt;/h5&gt;&lt;p&gt;Solr inherently uses Tika for extracting content from the documents that will be indexed. Tika uses the TagSoup library to support virtually any kind of HTML found on the web. The output from the HtmlParser class is used as the streamed content for indexing into Solr. &lt;/p&gt;
&lt;p&gt;Before indexing html files, we have to edit the schema file to make sure that &lt;strong&gt;all the text content from the html pages extracted by Tika are mapped correctly.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;managed-schema&lt;/code&gt; file is under&lt;code&gt;solr-7.3.0/server/solr/myexample/conf&lt;/code&gt; folder. By default &lt;code&gt;&amp;lt;copyField source=&amp;quot;*&amp;quot; dest=&amp;quot;_text_&amp;quot;/&amp;gt;&lt;/code&gt; is disabled, we enable it.&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;indexed&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stored&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;required&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;multiValued&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- docValues are enabled by default for long type so we don&#39;t need to index the version field  --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_version_&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;plong&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;indexed&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stored&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_root_&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;indexed&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stored&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;docValues&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_text_&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text_general&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;indexed&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stored&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;multiValued&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- This can be enabled, in case the client does not know what fields may be searched. It isn&#39;t enabled by default because it&#39;s very expensive to index everything twice. --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;copyField&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;source&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;dest&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_text_&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Some explanation:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;“indexed”: if true, then the content in this field will be indexed.&lt;/li&gt;
&lt;li&gt;“stored”: if true, then the content of this field is stored in Solr and we can retrieve this from the query responses.&lt;/li&gt;
&lt;li&gt;“required”: if true, then this field is mandatory in a document for indexing.&lt;/li&gt;
&lt;li&gt;“multivalued”: if true, then this field can appear multiple times in a document . &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above example, an “id” field, “&lt;em&gt;version”&lt;/em&gt; and “&lt;em&gt;root”&lt;/em&gt; fields are auto generated while indexing. These may not necessarily be part of original documents.&lt;/p&gt;
&lt;h5 id=&quot;3-Index-html-pages&quot;&gt;&lt;a href=&quot;#3-Index-html-pages&quot; class=&quot;headerlink&quot; title=&quot;(3) Index html pages&quot;&gt;&lt;/a&gt;(3) Index html pages&lt;/h5&gt;&lt;p&gt;For indexing, we use&lt;code&gt;bin/post -c &amp;lt;core_name&amp;gt; -filetypes html &amp;lt;path_to_crawl_folder&amp;gt;/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-filetypes html&lt;/code&gt;  means we index html file only.  If we are going to index various document types, then use: &lt;code&gt;bin/post -c &amp;lt;core_name&amp;gt; &amp;lt;path_to_crawl_folder&amp;gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here my html files are located at &lt;code&gt;/Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles&lt;/code&gt; and my core is &lt;code&gt;myexample&lt;/code&gt;. So I use:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bin/post -c myexample -filetypes html /Users/hlyin/Documents/IR/HW4_Solr/NBC_News/HTMLFiles&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSTing file ffe4ec42193bf764564d5ba339bbd298.html (text/html) to [base]/extract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSTing file ffe7e9ffd3483bafc6d7e208c76c370f.html (text/html) to [base]/extract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSTing file ffe85c534d9402e82cb4a8efe91b8196.html (text/html) to [base]/extract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSTing file ffeb53fc0338e5f5a8475b92044c06a8.html (text/html) to [base]/extract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSTing file ffebd0ff85d0beeeb8dfbf778a695061.html (text/html) to [base]/extract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSTing file ffee4995055b2b85d3534749531a5eb0.html (text/html) to [base]/extract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSTing file fff2925f294aff6a17d2169bf5abca16.html (text/html) to [base]/extract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSTing file fff7859edecde64a1b6528cebded6f84.html (text/html) to [base]/extract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSTing file fff836fcf958e5ea6896302dea4967fe.html (text/html) to [base]/extract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSTing file fffabb06635ef9a84be0fe0a3811632d.html (text/html) to [base]/extract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15727 files indexed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMITting Solr index changes to http://localhost:8983/solr/myexample/update...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time spent: 0:04:50.096&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;After solr finishes indexing, we can go to &lt;code&gt;http://localhost:8983/solr/&lt;/code&gt; to try some queries. We can type query in &lt;code&gt;q&lt;/code&gt; , and right part is the return result in JSON. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/se_572/solr_admin.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;4-Modify-managed-schema-for-pagerank&quot;&gt;&lt;a href=&quot;#4-Modify-managed-schema-for-pagerank&quot; class=&quot;headerlink&quot; title=&quot;(4) Modify managed-schema for pagerank&quot;&gt;&lt;/a&gt;(4) Modify &lt;code&gt;managed-schema&lt;/code&gt; for pagerank&lt;/h5&gt;&lt;p&gt;In step 3, we have computed pagerank for downloaded pages and stored the results in&lt;code&gt;external_pageRankFile.txt&lt;/code&gt;. Now we are going to use this pagerank file for query.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Firstly, place this page rank result &lt;code&gt;external_pageRankFile.txt&lt;/code&gt; to &lt;code&gt;solr-7.x.x/server/solr/core_name/data&lt;/code&gt;. &lt;font color=&quot;red&quot;&gt;It should be put in the data folder.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;Secondly, add the field in the &lt;code&gt;managed-schema&lt;/code&gt; which refers to this score. We’ll add two record into this file:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;fieldType&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;external&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;keyField&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;defVal&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;solr.ExternalFileField&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;pageRankFile&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;external&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stored&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;indexed&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In the second record, its name is &lt;code&gt;pageRankFile&lt;/code&gt;, this is because our pagerank file is named as &lt;code&gt;external_pageRankFile.txt&lt;/code&gt;, we use the suffix after &lt;code&gt;external_&lt;/code&gt;. Be careful about the file name, &lt;code&gt;pageRankFile&lt;/code&gt;, it’s &lt;strong&gt;case-sensitive&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;defVal&lt;/code&gt; defines a default value that will be used if there is no entry in the external file for a particular document. (Here is when no page rank file)&lt;/p&gt;
&lt;h5 id=&quot;5-Modify-solrconfig-xml&quot;&gt;&lt;a href=&quot;#5-Modify-solrconfig-xml&quot; class=&quot;headerlink&quot; title=&quot;(5) Modify solrconfig.xml&quot;&gt;&lt;/a&gt;(5) Modify &lt;code&gt;solrconfig.xml&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;Once the field has been defined, we need to &lt;strong&gt;make sure that when the index is reloaded, it is able to access the rank file.&lt;/strong&gt; In order to do that, there are some modifications required in the &lt;code&gt;solrconfig.xml&lt;/code&gt; file. We will add two event listener for this task:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;listener event=&amp;quot;newSearcher&amp;quot; class=&amp;quot;org.apache.solr.schema.ExternalFileFieldReloader&amp;quot;/&amp;gt;
&amp;lt;listener event=&amp;quot;firstSearcher&amp;quot; class=&amp;quot;org.apache.solr.schema.ExternalFileFieldReloader&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now in solr UI -&amp;gt; core admin, reload.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-Web-Server&quot;&gt;&lt;a href=&quot;#5-Web-Server&quot; class=&quot;headerlink&quot; title=&quot;5. Web Server&quot;&gt;&lt;/a&gt;5. Web Server&lt;/h3&gt;&lt;p&gt;So far we’ve done most of this project, next we’re going to build a UI for users. Solr has many client APIs, refer &lt;a href=&quot;https://wiki.apache.org/solr/IntegratingSolr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here we will use &lt;a href=&quot;https://github.com/PTCInc/solr-php-client&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;solr-php-client&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;For pagination, my code is:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetch_docs_pagerank&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($solr, $query, $page_number, $rows_per_page)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $additionalParameters = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;sort&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;pageRankFile desc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $start = ($page_number - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * $rows_per_page; &lt;span class=&quot;comment&quot;&gt;//$start starts from 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $solr-&amp;gt;search($query, $start, $rows_per_page, $additionalParameters);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;One thing to notice is that using pagerank does not mean the search result could be better.&lt;/strong&gt;  High pagerank score does not guarantee high relevance.&lt;/p&gt;
&lt;p&gt;Everything else is just to get the query from front-end, sent it to solr, parse the response and send to user. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/se_572/homepage.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/se_572/result.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Search-Engine-Using-Solr&quot;&gt;&lt;a href=&quot;#Search-Engine-Using-Solr&quot; class=&quot;headerlink&quot; title=&quot;Search Engine Using Solr&quot;&gt;&lt;/a&gt;Search Engine 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>24 Verify Post-order Squence Of BST</title>
    <link href="http://louie.link/Algorithm-Practice/24_VerifyPostOrderSquenceOfBST/"/>
    <id>http://louie.link/Algorithm-Practice/24_VerifyPostOrderSquenceOfBST/</id>
    <published>2018-04-05T07:00:00.000Z</published>
    <updated>2018-04-16T01:13:11.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given an integer array, judge whether it is a kind of post-order traversal of a binary search tree. Each element in the array is unique.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Suppose arr = {4,8,6,12,16,14,10}, then 10 is the root, {12,16,14} are in the right subtree since they are greater than 10 and {4,8,6} are in the left subtree since they are smaller than 10. Then we check {12,16,14}, 14 is the root, 12 is in the left subtree and 16 is in the right subtree… so this is a recursion, repeat this process, we have a possible BST (we do not have in-order sequence so we cannot determine the BST):&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;     10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  6     14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; / \   /  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4   8 12  16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we want to know in what cases that a post-order sequence is invalid. &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;VerifySquenceOfBST&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] sequence)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sequence == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || sequence.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; helper(sequence, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sequence.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// [lo, hi]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] sequence, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lo, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hi)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (lo &amp;gt;= hi) &lt;span class=&quot;comment&quot;&gt;//since we used &#39;leftRoot + 1, hi - 1&#39;, lo could &amp;gt; hi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; root = sequence[hi];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; leftRoot = hi - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//left to root&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// first, find left-subtree&#39;s root, traverse backwards&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (leftRoot &amp;gt;= lo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sequence[leftRoot] &amp;lt; root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        leftRoot--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// we found the left-subtree&#39;s root, all the elements in left-subtree should be smaller than root value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// keep traversing backward, if there exists an element &amp;gt; root, then invalid left subtree&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = leftRoot; i &amp;gt;= lo; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sequence[i] &amp;gt; root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//hi - 1 is rightRoot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; helper(sequence, lo, leftRoot) &amp;amp;&amp;amp; helper(sequence, leftRoot + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, hi - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;stro
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>21 Min Stack</title>
    <link href="http://louie.link/Algorithm-Practice/21_MinStack/"/>
    <id>http://louie.link/Algorithm-Practice/21_MinStack/</id>
    <published>2018-04-05T07:00:00.000Z</published>
    <updated>2018-04-16T01:13:05.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LC 155&lt;/p&gt;
&lt;p&gt;The idea is to push old min twice, so we could find what is the min after poping current min element directly.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MinStack&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; min = Integer.MAX_VALUE, top = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Stack&amp;lt;Integer&amp;gt; stack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** initialize your data structure here. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MinStack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Stack&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x &amp;lt;= min)&amp;#123; &lt;span class=&quot;comment&quot;&gt;//push old min twice, to make pop() easier, not it&#39;s &amp;lt;= here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stack.push(min);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            min = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stack.push(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(stack.pop() == min)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            min = stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; stack.peek();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getMin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; min;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>22 Is Stack Pop Order</title>
    <link href="http://louie.link/Algorithm-Practice/22_IsPopOrder/"/>
    <id>http://louie.link/Algorithm-Practice/22_IsPopOrder/</id>
    <published>2018-04-05T07:00:00.000Z</published>
    <updated>2018-04-16T01:13:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4, 5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given two integer sequence, the first one represents the push order of a stack, judge whether the second sequence can be a kind of pop order of this stack.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can push each element in push[] to a stack, and each time we push an element, check whether it is equal to the current element we are visiting in pop[], if yes, pop this element (peek()), notice after popping it, the next peek element in the stack may equal to the enxt element in pop[], so this should be checked in a while loop. &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IsPopOrder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] pushA, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] popA)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pushA.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || popA.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Stack&amp;lt;Integer&amp;gt; stack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Stack&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cur = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// pointer at popA array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; pushA.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stack.push(pushA[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!stack.isEmpty() &amp;amp;&amp;amp; popA[cur] == stack.peek()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cur++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; stack.isEmpty(); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4, 5,3,2,1是该压
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>23 Print Binary Tree</title>
    <link href="http://louie.link/Algorithm-Practice/23_PrintBinaryTree/"/>
    <id>http://louie.link/Algorithm-Practice/23_PrintBinaryTree/</id>
    <published>2018-04-05T07:00:00.000Z</published>
    <updated>2018-04-16T01:13:09.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从上往下打印出二叉树的每个节点，同层节点从左至右打印。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Print a binary tree in level order.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is just a BFS.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;PrintFromTopToBottom&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ArrayList&amp;lt;Integer&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Queue&amp;lt;TreeNode&amp;gt; queue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queue.offer(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!queue.isEmpty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = queue.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            TreeNode node = queue.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.add(node.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.left != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                queue.offer(node.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.right != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                queue.offer(node.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从上往下打印出二叉树的每个节点，同层节点从左至右打印。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prin
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>18 Substructure of a Tree</title>
    <link href="http://louie.link/Algorithm-Practice/18__HasSubtree/"/>
    <id>http://louie.link/Algorithm-Practice/18__HasSubtree/</id>
    <published>2018-04-04T07:00:00.000Z</published>
    <updated>2018-04-16T01:12:56.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given two trees, A and B, judge whether B is a sub-structure of A.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Suppose A and B are following, then B is a sub-structure of A.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A				 B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6				 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; /    \		    /   \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2      8           7     9 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /  \   /  \   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 3    5 7    9 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       / \ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      1   2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We first try to compare A’s root (6) with B’s root (8), our aim is to find a node is A that has the same value with B’s root. 6 != 8, so we keep trying to compare A’s left and right subtree with B’s root. try 2, 2 != 8, then try 8, 8 = 8, here we can search down from A’s 8 and B’s root (8), compare their nodes one by one. &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HasSubtree&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root1, TreeNode root2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root1 == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || root2 == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; flag = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// find a node in A to compare with B&#39;s root&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root1.val == root2.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flag = containsTree(root1, root2); &lt;span class=&quot;comment&quot;&gt;//cannot return! If false, keep searching A&#39;s subtrees&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!flag) &lt;span class=&quot;comment&quot;&gt;// If cannot find when starting from root1, try root1&#39;s left and right subtrees&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flag = HasSubtree(root1.left, root2) || HasSubtree(root1.right, root2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsTree&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root1, TreeNode root2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root2 == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// have processed B, then B is a subtree of A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root1 == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// have processed A, but B still has nodes left, so B is not a subtree of A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root1.val != root2.val) &lt;span class=&quot;comment&quot;&gt;// both A and B have nodes left, but val not equal, so not subtree&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; containsTree(root1.left, root2.left) &amp;amp;&amp;amp; containsTree(root1.right, root2.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/s
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>20 Spiral Matrix</title>
    <link href="http://louie.link/Algorithm-Practice/20_SpiralMatrix/"/>
    <id>http://louie.link/Algorithm-Practice/20_SpiralMatrix/</id>
    <published>2018-04-04T07:00:00.000Z</published>
    <updated>2018-04-16T01:13:02.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下矩阵： &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1   2  3  4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5   6  7  8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9  10 11 12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13 14 15 16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;则依次打印出数字:  1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a matrix, return all elements of the matrix in spiral order.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LC-54&lt;/p&gt;
&lt;p&gt;Use 4 variables to control the position, just be careful that when go right from left and from bottom to top, we need to judge whether &lt;code&gt;rowBegin &amp;lt;= rowEnd&lt;/code&gt; and &lt;code&gt;colBegin &amp;lt;= colEnd&lt;/code&gt; to avoid print one more time.&lt;/p&gt;
&lt;p&gt;For example, if our matrix is &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;, just a single row, then after we traverse from left to right and pirnt {1,2,3,4,5}, we should not traverse from right to left and print {5,4,3,2,1} thus have {1,2,3,4,5,5,4,3,2,1}.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;printMatrix&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [][] matrix)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ArrayList&amp;lt;Integer&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(matrix == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || matrix.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rowBegin = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, colBegin = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, rowEnd = matrix.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, colEnd = matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(rowBegin &amp;lt;= rowEnd &amp;amp;&amp;amp; colBegin &amp;lt;= colEnd)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//from left to right&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = colBegin; j &amp;lt;= colEnd; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.add(matrix[rowBegin][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rowBegin += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//from top to bottom&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = rowBegin; i &amp;lt;= rowEnd; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.add(matrix[i][colEnd]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        colEnd -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//from right to left&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(rowBegin &amp;lt;= rowEnd)&amp;#123; &lt;span class=&quot;comment&quot;&gt;//for example, [1,2,3,4,5], cannot goes left again&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = colEnd; j &amp;gt;= colBegin; j--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                res.add(matrix[rowEnd][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rowEnd -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//from bottom to top&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(colBegin &amp;lt;= colEnd)&amp;#123; &lt;span class=&quot;comment&quot;&gt;//for example, [[1],[2],[3],[4],[5]], cannot goes up again!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = rowEnd; i &amp;gt;= rowBegin; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                res.add(matrix[i][colBegin]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        colBegin += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下矩阵： &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>19_Symmetric Tree</title>
    <link href="http://louie.link/Algorithm-Practice/19_SymmetricTree/"/>
    <id>http://louie.link/Algorithm-Practice/19_SymmetricTree/</id>
    <published>2018-04-04T07:00:00.000Z</published>
    <updated>2018-04-16T01:12:59.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定二叉树，将其变换成原二叉树的镜像（对称）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a binary tree, transform it as a mirror of itself.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;     1                 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /   \             /   \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2     7           7     2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; / \   / \         / \   / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3   4 5   6       6   5 4   3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mirror&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root = helper(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; TreeNode &lt;span class=&quot;title&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode tmp = helper(root.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root.left = helper(root.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root.right = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定二叉树，将其变换成原二叉树的镜像（对称）&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a b
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>06 Reconstruct a Binary Tree</title>
    <link href="http://louie.link/Algorithm-Practice/06_ReconstructBinaryTree/"/>
    <id>http://louie.link/Algorithm-Practice/06_ReconstructBinaryTree/</id>
    <published>2018-04-03T07:00:00.000Z</published>
    <updated>2018-04-16T01:12:34.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given the pre-order traversal and in-order traversal of a binary tree, build this tree. You may assume there will be no duplicate in either pre-order or in-order list. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can use pre-order list to determine the root and in-order list to determine this root’s left and right subtrees. &lt;/p&gt;
&lt;p&gt;Suppose pre-order list is {5,4,2,7,6,8}, and in-order list is {2,4,5,6,7,8}. Now consider the 1st element in preorder list, we can know that 5 is the root, and {2,4} are in its left subtree while {6,7,8} are in its right subtree. &lt;/p&gt;
&lt;p&gt;For 5’s left subtree, just consider the element next to 5 in the preorder list, which is 4. So 4 is the root of 5’s left subtree, check inorder list, we can infer {2} is in its left subtree and 4 has no right child. &lt;/p&gt;
&lt;p&gt;For 5’s right subtree, we need to do somework - determine the size of the left subtree to get the correct index or the root of the right subtree. $|{2,4}| = 2$, so the root should be at index 0 + 2 + 1 = 3, which is 7, where 0 is the index of 5, 2 is the size of the left subtree. &lt;/p&gt;
&lt;p&gt;Repeat this process, we will build the tree.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4       7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /       /  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 2       6    8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Following is the actual code:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] preorder = &amp;#123;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&amp;#125;, inorder = &amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode root = buildTree(preorder, inorder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//make fetch inorder index faster&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; HashMap&amp;lt;Integer, Integer&amp;gt; inorderMap = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;(); &lt;span class=&quot;comment&quot;&gt;//&amp;lt;data, index&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; TreeNode &lt;span class=&quot;title&quot;&gt;buildTree&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] preorder, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] inorder)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; inorder.length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inorderMap.put(inorder[i], i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; helper(preorder, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, inorder, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, inorder.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; TreeNode &lt;span class=&quot;title&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] preorder, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] inorder, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; e2)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s1 &amp;gt;= preorder.length || s2 &amp;gt; e2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = preorder[s1]; &lt;span class=&quot;comment&quot;&gt;//root value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode root = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TreeNode(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index = inorderMap.get(value); &lt;span class=&quot;comment&quot;&gt;//find its index in inorder array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root.left = helper(preorder, s1 + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, inorder, s2, index - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root.right = helper(preorder, s1 + (index-s2) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, inorder, index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, e2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>10 Number Of One</title>
    <link href="http://louie.link/Algorithm-Practice/10_NumberOfOne/"/>
    <id>http://louie.link/Algorithm-Practice/10_NumberOfOne/</id>
    <published>2018-04-03T07:00:00.000Z</published>
    <updated>2018-04-16T01:12:44.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a number, output the number of 1s in its binary representation. Negative number should be represented as its complemental code.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NumberOf1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(n != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;amp; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;(n-1) &amp;amp; n&lt;/code&gt; actually means removing the last &lt;code&gt;1&lt;/code&gt; in n each time.&lt;/strong&gt; Concretely:&lt;/p&gt;
&lt;p&gt;(1) If &lt;code&gt;n&lt;/code&gt; is an odd number, its binary representation is &lt;code&gt;xx...x1&lt;/code&gt;, &lt;code&gt;n-1&lt;/code&gt; is &lt;code&gt;xx...x0&lt;/code&gt;, so the result of &lt;code&gt;n&amp;amp;(n-1)&lt;/code&gt; is &lt;code&gt;xx...x0&lt;/code&gt;, we removed the last &lt;code&gt;1&lt;/code&gt; in n.&lt;/p&gt;
&lt;p&gt;(2) If &lt;code&gt;n&lt;/code&gt; is an even number, its binary representation is &lt;code&gt;xx...x10...0&lt;/code&gt;, &lt;code&gt;n-1&lt;/code&gt; is &lt;code&gt;xx...x01...0&lt;/code&gt;, so the result of &lt;code&gt;n&amp;amp;(n-1)&lt;/code&gt; is &lt;code&gt;xx...x00...0&lt;/code&gt;, we also removed the last &lt;code&gt;1&lt;/code&gt; in n.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>08 Find Minimum in Rotated Sorted Array</title>
    <link href="http://louie.link/Algorithm-Practice/08_FindMinimuminRotatedSortedArray/"/>
    <id>http://louie.link/Algorithm-Practice/08_FindMinimuminRotatedSortedArray/</id>
    <published>2018-04-03T07:00:00.000Z</published>
    <updated>2018-04-16T01:12:40.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LC-153&lt;/p&gt;
&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).&lt;/p&gt;
&lt;p&gt;Find the minimum element.&lt;/p&gt;
&lt;p&gt;You may assume no duplicate exists in the array.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Consider the element in the middle position, call it mid, then there are three cases.&lt;/p&gt;
&lt;p&gt;(1) &lt;code&gt;nums[mid] &amp;lt; nums[mid - 1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;[6,7,8,1,2,3,4]&lt;/code&gt;, nums[mid] = 1, 1 &amp;lt; 8. In this case, we find the minimum number, which is 1. &lt;/p&gt;
&lt;p&gt;For a sorted array, nums[mid - 1] should be smaller than nums[mid], now the array is rotated, we can treat it as two subarray and each of is sorted, &lt;code&gt;[part1, part2]&lt;/code&gt; (&lt;code&gt;[6,7,8]&lt;/code&gt;, &lt;code&gt;[1,2,3,4]&lt;/code&gt;). Unless the original array is not rotated, all elements in part1 must be greater than all element is part2, and the right-most element in part1 is the biggest one in it, the left-most element in part2 is the smallest one in it and thus the minimum in the whole original array. &lt;/p&gt;
&lt;p&gt;So if &lt;code&gt;nums[mid-1] &amp;gt; nums[mid]&lt;/code&gt;, then nums[mid-1] must be the right-most element in part1 and nums[mid] must be the left-most element in part2. Thus nums[mid] is the minimum number.&lt;/p&gt;
&lt;p&gt;(2) &lt;code&gt;nums[mid] &amp;gt; nums[mid - 1]&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;nums[lo] &amp;lt;= nums[mid] &amp;amp;&amp;amp; nums[mid] &amp;gt; nums[hi]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;[4,5,6,7,8,1,2,3]&lt;/code&gt;. Size of part1 is larger than that of part2, since unless the original array is not rotated, all elements in part1 must be greater than all element is part2, the minimum number should be in part2, thus &lt;code&gt;lo = mid + 1&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;(3) (&lt;code&gt;nums[mid] &amp;gt; nums[mid - 1]&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;nums[lo] &amp;gt; nums[mid] || nums[mid] &amp;lt;= nums[hi]&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;[7,8,1,2,3,4,5,6]&lt;/code&gt; or &lt;code&gt;[1,2,3,4,5,6,7,8]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In this case, the minimum number should be in part2 (but $|part1| &amp;lt; |part2|$, we still update &lt;code&gt;hi = mid-1&lt;/code&gt;) or the original array is not rotated, either way, &lt;code&gt;hi = mid - 1&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minNumberInRotateArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lo = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, hi = nums.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// index&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (lo &amp;lt;= hi) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = lo + (hi - lo) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//if nums[mid] &amp;lt; nums[mid - 1], then nums[mid] must be the minimum number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mid &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[mid] &amp;lt; nums[mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;comment&quot;&gt;//[6,7,8,1,2,3,4], 1 &amp;lt; 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums[mid];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//else, we have two possible situation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nums[lo] &amp;lt;= nums[mid] &amp;amp;&amp;amp; nums[mid] &amp;gt; nums[hi]) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//left part longer, [4,5,6,7,8,1,2,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lo = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;//right part longer, [7,8,1,2,3,4,5,6], [1,2,3,4,5,6,7,8]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            hi = mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums[lo];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>17 Merge Two Sorted List</title>
    <link href="http://louie.link/Algorithm-Practice/17_MergeTwoSortedList/"/>
    <id>http://louie.link/Algorithm-Practice/17_MergeTwoSortedList/</id>
    <published>2018-04-03T07:00:00.000Z</published>
    <updated>2018-04-16T01:12:54.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入两个单调递增的链表，输出两个链表合成后的链表，合成后的链表仍满足单调不减规则。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just note that after merging, list1 or list2 may still have some nodes left.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ListNode &lt;span class=&quot;title&quot;&gt;Merge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode list1,ListNode list2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ListNode dummy = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ListNode(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ListNode cur = dummy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(list1 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; list2 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(list1.val &amp;lt; list2.val)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cur.next = list1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            list1 = list1.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cur.next = list2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            list2 = list2.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cur = cur.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(list1 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cur.next = list1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(list2 != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cur.next = list2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dummy.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入两个单调递增的链表，输出两个链表合成后的链表，合成后的链表仍满足单调不减规则。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/stron
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>15 Find the kth Last Element in LinkedList</title>
    <link href="http://louie.link/Algorithm-Practice/15_Find_the_kth_Last_Element_in_List/"/>
    <id>http://louie.link/Algorithm-Practice/15_Find_the_kth_Last_Element_in_List/</id>
    <published>2018-04-03T07:00:00.000Z</published>
    <updated>2018-04-16T01:12:51.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入一个链表，输出该链表中倒数第k个结点。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a linked list, find the kth last node in it.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can use two pointers - slow and fast. Let fast pointer move (k-1) steps fisrt, then let both pointer move simultaneously, then when fast reaches the tail of the list, slow is pointing the kth last node.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ListNode &lt;span class=&quot;title&quot;&gt;FindKthToTail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode head,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(head == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ListNode slow = head, fast = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//1. let fast move (k-1) steps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(cnt &amp;lt; k)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fast == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fast = fast.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cnt &amp;lt; k) &lt;span class=&quot;comment&quot;&gt;//k is bigger than the size of the list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//2. now, slow and fast move simultaneously&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(fast != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        slow = slow.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fast = fast.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; slow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入一个链表，输出该链表中倒数第k个结点。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a li
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
  <entry>
    <title>07 Implement a Queue with two Stacks</title>
    <link href="http://louie.link/Algorithm-Practice/07_ImplementQueueWithTwoStacks/"/>
    <id>http://louie.link/Algorithm-Practice/07_ImplementQueueWithTwoStacks/</id>
    <published>2018-04-03T07:00:00.000Z</published>
    <updated>2018-04-16T01:12:36.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Implement a Queue with two Stacks, elements are integers.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Queues are FIFO, and Stacks are FILO. &lt;/p&gt;
&lt;p&gt;For &lt;code&gt;push()&lt;/code&gt;, just push the new element onto stack1.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;pop()&lt;/code&gt;, if stack2 is not empty, pop one element of stack2; if it is empty, pop all elements of stack1 and push them onto stack2, finally, pop one element of stack2. &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FakeQueue&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Stack&amp;lt;Integer&amp;gt; stack1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Stack&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Stack&amp;lt;Integer&amp;gt; stack2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Stack&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FakeQueue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; node)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stack1.push(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!stack2.isEmpty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res = stack2.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!stack1.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                stack2.push(stack1.pop());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res = stack2.pop(); &lt;span class=&quot;comment&quot;&gt;//may want to check if it is still empty (stack1 is empty)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/stro
    
    </summary>
    
      <category term="Algorithm Practice" scheme="http://louie.link/categories/Algorithm-Practice/"/>
    
    
  </entry>
  
</feed>
