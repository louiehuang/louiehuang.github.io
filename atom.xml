<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louie&#39;s Blog</title>
  <subtitle>黄刘胤的博客 Louie&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://louie.link/"/>
  <updated>2018-03-05T10:49:41.000Z</updated>
  <id>http://louie.link/</id>
  
  <author>
    <name>黄刘胤,Louie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Form a palindrome II (Deletion)</title>
    <link href="http://louie.link/Dynamic-Programming/(4)FormPalindromeII(Deletion)/"/>
    <id>http://louie.link/Dynamic-Programming/(4)FormPalindromeII(Deletion)/</id>
    <published>2018-03-01T08:00:00.000Z</published>
    <updated>2018-03-05T10:49:41.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Form-a-palindrome-II&quot;&gt;&lt;a href=&quot;#Form-a-palindrome-II&quot; class=&quot;headerlink&quot; title=&quot;Form a palindrome II&quot;&gt;&lt;/a&gt;Form a palindrome II&lt;/h2&gt;&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Given a string of S as input. Your task is to write a program to remove or delete minimum number of characters from the string so that the resultant string is palindrome.&lt;/p&gt;
&lt;p&gt;Note: The order of characters in the string should be maintained.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;input: aebcbda&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Remove characters &amp;apos;e&amp;apos; and &amp;apos;d&amp;apos; =&amp;gt; &amp;apos;abcba&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h3&gt;&lt;p&gt;This problem can be solved using LCS. Since we are going to form a palindrome, we can first the the longest common sequence of the input string and its reverse string. Then this LCS must be in the final palindrome, we just need to change other characters in input string by deletion (or insertion) to make the rest characters paired up. &lt;/p&gt;
&lt;p&gt;For example, we have &lt;code&gt;str = &amp;quot;abcdb&amp;quot;&lt;/code&gt;, its reverse string is &lt;code&gt;&amp;quot;bdcba&amp;quot;&lt;/code&gt;, their LCS is &lt;code&gt;bcb&lt;/code&gt;, this must be in the final palindrome. The rest characters in &lt;code&gt;str&lt;/code&gt; are &lt;code&gt;a,d&lt;/code&gt;, we just need to delete them, then we can form a palindrome &lt;code&gt;bcb&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;formPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String lcs = LCS(str, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder(str).reverse().toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str.length() - lcs.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This problem can also be solved by finding the length of the &lt;code&gt;Longest Palindromic Subsequence&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Form-a-palindrome-II&quot;&gt;&lt;a href=&quot;#Form-a-palindrome-II&quot; class=&quot;headerlink&quot; title=&quot;Form a palindrome II&quot;&gt;&lt;/a&gt;Form a palindrome II&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="Dynamic Programming" scheme="http://louie.link/categories/Dynamic-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Form a palindrome I (Insertion)</title>
    <link href="http://louie.link/Dynamic-Programming/(5)FormPalindromeI(Insertion)/"/>
    <id>http://louie.link/Dynamic-Programming/(5)FormPalindromeI(Insertion)/</id>
    <published>2018-03-01T08:00:00.000Z</published>
    <updated>2018-03-05T10:42:24.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Form-a-palindrome-I&quot;&gt;&lt;a href=&quot;#Form-a-palindrome-I&quot; class=&quot;headerlink&quot; title=&quot;Form a palindrome I&quot;&gt;&lt;/a&gt;Form a palindrome I&lt;/h2&gt;&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Given a string, find the minimum number of characters to be inserted to convert it to palindrome. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ab: Number of insertions required is 1. bab or aba&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aa: Number of insertions required is 0. aa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abcd: Number of insertions required is 3. dcbabcd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution1&quot;&gt;&lt;a href=&quot;#Solution1&quot; class=&quot;headerlink&quot; title=&quot;Solution1&quot;&gt;&lt;/a&gt;Solution1&lt;/h3&gt;&lt;p&gt;Let &lt;code&gt;dp[i][j]&lt;/code&gt; denote the minimum number of characters to be inserted for str[i, … j]. &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;str[i] == str[j]&lt;/code&gt;, then &lt;code&gt;dp[i][j] = dp[i+1][j-1]&lt;/code&gt;. For example, &lt;code&gt;abcdda&lt;/code&gt;, we just need to find the solution to &lt;code&gt;bcdd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;str[i] != str[j]&lt;/code&gt;, then we need to consider &lt;code&gt;str[i,...j-1]&lt;/code&gt; and &lt;code&gt;str[i+1, ...j]&lt;/code&gt;, find the smaller one, and plus 1 for insertion. For example, &lt;code&gt;abcde&lt;/code&gt;, &lt;code&gt;a != e&lt;/code&gt;, then we need to compute &lt;code&gt;abcd&lt;/code&gt; and &lt;code&gt;bcde&lt;/code&gt;, find a smaller one, we choose &lt;code&gt;abcd&lt;/code&gt;, suppose this subprolem’s solution is 3 (&lt;code&gt;dcbabcd&lt;/code&gt;) then insert &lt;code&gt;e&lt;/code&gt; (+1) to the front to make it palindrome =&amp;gt; &lt;code&gt;edcbabcde&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we have: &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left\{\begin{aligned}dp[i][j] &amp;= dp[i+1][j-1], if \; str[i] = str[j] \\ dp[i][j] &amp;= min\{dp[i][j-1], dp[i+1][j]\}, if \; str[i] \ne str[j]\end{aligned}\right.&lt;/script&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;formPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] arr, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[n][n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//fill the table diagonally&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dist = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; dist &amp;lt; n; dist ++)&amp;#123; &lt;span class=&quot;comment&quot;&gt;//distance between i and j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n - dist; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i + dist;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arr[i] == arr[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = dp[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = Math.min(dp[i][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], dp[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j]) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution2&quot;&gt;&lt;a href=&quot;#Solution2&quot; class=&quot;headerlink&quot; title=&quot;Solution2&quot;&gt;&lt;/a&gt;Solution2&lt;/h3&gt;&lt;p&gt;This problem can also be solved using LCS. Since we are going to form a palindrome, we can first the the longest common sequence of the input string and its reverse string. Then this LCS must be in the final palindrome, we just need to change other characters in input string by insertion (or deletion) to make the rest characters paired up. &lt;/p&gt;
&lt;p&gt;For example, we have &lt;code&gt;str = &amp;quot;abcdb&amp;quot;&lt;/code&gt;, its reverse string is &lt;code&gt;&amp;quot;bdcba&amp;quot;&lt;/code&gt;, their LCS is &lt;code&gt;bcb&lt;/code&gt;, this must be in the final palindrome. The rest characters in &lt;code&gt;str&lt;/code&gt; are &lt;code&gt;a,d&lt;/code&gt;, we just need to add another &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;, then we can form a palindrome &lt;code&gt;abdcdba&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;formPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String lcs = LCS(str, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder(str).reverse().toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str.length() - lcs.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Form-a-palindrome-I&quot;&gt;&lt;a href=&quot;#Form-a-palindrome-I&quot; class=&quot;headerlink&quot; title=&quot;Form a palindrome I&quot;&gt;&lt;/a&gt;Form a palindrome I&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
      <category term="Dynamic Programming" scheme="http://louie.link/categories/Dynamic-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Ones and Zeroes</title>
    <link href="http://louie.link/Dynamic-Programming/(2)OnesAndZeroes/"/>
    <id>http://louie.link/Dynamic-Programming/(2)OnesAndZeroes/</id>
    <published>2018-03-01T08:00:00.000Z</published>
    <updated>2018-03-05T08:23:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Ones-and-Zeroes&quot;&gt;&lt;a href=&quot;#Ones-and-Zeroes&quot; class=&quot;headerlink&quot; title=&quot;Ones and Zeroes&quot;&gt;&lt;/a&gt;Ones and Zeroes&lt;/h2&gt;&lt;h3 id=&quot;1-Description&quot;&gt;&lt;a href=&quot;#1-Description&quot; class=&quot;headerlink&quot; title=&quot;1. Description&quot;&gt;&lt;/a&gt;1. Description&lt;/h3&gt;&lt;p&gt;Suppose you are a dominator of &lt;strong&gt;m&lt;/strong&gt; &lt;code&gt;0s&lt;/code&gt; and &lt;strong&gt;n&lt;/strong&gt; &lt;code&gt;1s&lt;/code&gt; respectively. On the other hand, there is an array with strings consisting of only &lt;code&gt;0s&lt;/code&gt; and &lt;code&gt;1s&lt;/code&gt;. Now your task is to find the &lt;strong&gt;maximum&lt;/strong&gt; number of strings that you can form with given &lt;strong&gt;m&lt;/strong&gt; &lt;code&gt;0s&lt;/code&gt; and &lt;strong&gt;n&lt;/strong&gt; &lt;code&gt;1s&lt;/code&gt;. Each &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; can be used at most &lt;strong&gt;once&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: Array = &amp;#123;&amp;quot;10&amp;quot;, &amp;quot;0001&amp;quot;, &amp;quot;111001&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;0&amp;quot;&amp;#125;, m = 5, n = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-Solution&quot;&gt;&lt;a href=&quot;#2-Solution&quot; class=&quot;headerlink&quot; title=&quot;2. Solution&quot;&gt;&lt;/a&gt;2. Solution&lt;/h3&gt;&lt;p&gt;This problem is similar to 0-1 knapsack problem. &lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;dp[k, i, j]&lt;/code&gt; to represent using first k strings that have i &lt;code&gt;0&lt;/code&gt;s and j &lt;code&gt;1&lt;/code&gt;s. For the &lt;code&gt;k&lt;/code&gt;th string, let &lt;code&gt;zeros&lt;/code&gt; denote the number of &lt;code&gt;0&lt;/code&gt;s in string k, and &lt;code&gt;ones&lt;/code&gt; denote the number of &lt;code&gt;1&lt;/code&gt;s in string k. There are two possible actions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If we pick the &lt;code&gt;k&lt;/code&gt;th string, we will have &lt;code&gt;zeros&lt;/code&gt; more &lt;code&gt;0&lt;/code&gt;s and &lt;code&gt;ones&lt;/code&gt; more &lt;code&gt;1&lt;/code&gt;s, which means we still need &lt;code&gt;i-zeros&lt;/code&gt; &lt;code&gt;0&lt;/code&gt;s and &lt;code&gt;j-ones&lt;/code&gt; &lt;code&gt;1&lt;/code&gt;s, so $dp[k, i, j] = dp[k, i - zeros, j - ones] + 1$&lt;/li&gt;
&lt;li&gt;If we do not pick the &lt;code&gt;k&lt;/code&gt;th string, then $dp[k, i, j] = dp[k-1, i, j]$&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;dp[k, i, j]&lt;/code&gt; is a three-dimensional array. We can reduce it to a two-dimensional array - in the &lt;code&gt;k&lt;/code&gt;th round, &lt;strong&gt;overwrite&lt;/strong&gt; the result of the &lt;code&gt;k-1&lt;/code&gt;th round. In this way, we use &lt;code&gt;dp[i][j]&lt;/code&gt; the represent the maximum number of strings that can form with i &lt;code&gt;0&lt;/code&gt;s and j &lt;code&gt;1&lt;/code&gt;s in the &lt;code&gt;k&lt;/code&gt;th round (using first k strings). &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If we pick the &lt;code&gt;k&lt;/code&gt;th string, then $dp[i, j] = dp[i - zeros, j - ones] + 1$ &lt;/li&gt;
&lt;li&gt;If we do not pick the &lt;code&gt;k&lt;/code&gt;th string, then $dp[i, j] = dp[i, j]$ (remain unchanged, dp[i,j] on the right side is the result in (k-1) round)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;State Transition Equation:&lt;/strong&gt;&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp[i, j] = max\{dp[i, j], dp[i - zeros, j - ones] + 1\}&lt;/script&gt;&lt;p&gt;We need to be careful about the implementation of this way. &lt;strong&gt;Both &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; should start from the largest number to decrease&lt;/strong&gt; so that we can guarantee that &lt;code&gt;dp[i - zeros, j - ones]&lt;/code&gt; we have is the result in the (k-1)th round rather than the result we have just calculated in the kth round. &lt;/p&gt;
&lt;p&gt;This is obvious, suppose we are updating &lt;code&gt;dp[i][j]&lt;/code&gt;, we need to check &lt;code&gt;dp[i - zeros, j - ones]&lt;/code&gt;, it’s left to &lt;code&gt;dp[i][j]&lt;/code&gt;, if we start i and j from small to big, we are using &lt;code&gt;dp[i - zeros, j - ones]&lt;/code&gt; updated in kth round. &lt;/p&gt;
&lt;p&gt;For example, in the kth round, i = 5, j = 6, zeros = 2, ones = 3, to compute &lt;code&gt;dp[5][6]&lt;/code&gt;, we need &lt;code&gt;dp[5-2][6-3] = dp[3][3]&lt;/code&gt;, we need its value to be the one computed in the (k-1)th round rather than in the current kth round. If we start i and j from small to big, then in the kth round, we will compute &lt;code&gt;dp[3][3]&lt;/code&gt; before computing &lt;code&gt;dp[5][6]&lt;/code&gt; which means &lt;code&gt;dp[3][3]&lt;/code&gt; is the result in the kth round, this is not what we want. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;i &amp;gt;= zeros&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;j &amp;gt;= ones&lt;/code&gt; are to make sure &lt;code&gt;dp[][]&lt;/code&gt; will not have negative index. Just &lt;strong&gt;be aware of how i and j are updated.&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMaxForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] strs, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[m+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; strs.length; k++)&amp;#123; &lt;span class=&quot;comment&quot;&gt;//check all string one by one&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; zeros = numberOfZeros(strs[k]); &lt;span class=&quot;comment&quot;&gt;//number of zeros this string has&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ones = strs[k].length() - zeros; &lt;span class=&quot;comment&quot;&gt;////number of ones this string has&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = m; i &amp;gt;= zeros; i--) &lt;span class=&quot;comment&quot;&gt;//make sure dp[i][j] is the (k-1)&#39;s round result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = n; j &amp;gt;= ones; j--) &lt;span class=&quot;comment&quot;&gt;//make sure...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = Math.max(dp[i][j], dp[i - zeros][j - ones] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[m][n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numberOfZeros&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; zeros = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; ch : str.toCharArray())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ch == &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            zeros++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; zeros;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ones-and-Zeroes&quot;&gt;&lt;a href=&quot;#Ones-and-Zeroes&quot; class=&quot;headerlink&quot; title=&quot;Ones and Zeroes&quot;&gt;&lt;/a&gt;Ones and Zeroes&lt;/h2&gt;&lt;h3 id=&quot;1-Description
    
    </summary>
    
      <category term="Dynamic Programming" scheme="http://louie.link/categories/Dynamic-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Longest Common Subsequence</title>
    <link href="http://louie.link/Dynamic-Programming/(3)LongestCommonSubsequence/"/>
    <id>http://louie.link/Dynamic-Programming/(3)LongestCommonSubsequence/</id>
    <published>2018-03-01T08:00:00.000Z</published>
    <updated>2018-03-05T10:14:01.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Longest-Common-Subsequence&quot;&gt;&lt;a href=&quot;#Longest-Common-Subsequence&quot; class=&quot;headerlink&quot; title=&quot;Longest Common Subsequence&quot;&gt;&lt;/a&gt;Longest Common Subsequence&lt;/h2&gt;&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.&lt;br&gt;LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB” of length 4.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;br&gt;First line of the input contains number of test cases &lt;strong&gt;T&lt;/strong&gt;, the &lt;strong&gt;T&lt;/strong&gt; test cases follow.&lt;br&gt;Each test case consist of 2 space separated integers &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; denoting the size of string &lt;strong&gt;str1&lt;/strong&gt; and &lt;strong&gt;str2&lt;/strong&gt; respectively. The next two lines contains the 2 string &lt;strong&gt;str1&lt;/strong&gt; and &lt;strong&gt;str2&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;For each test case print the length of longest  common subsequence of the two strings .&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ABCDGH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AEDFHR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ABC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution-find-length&quot;&gt;&lt;a href=&quot;#Solution-find-length&quot; class=&quot;headerlink&quot; title=&quot;Solution (find length)&quot;&gt;&lt;/a&gt;Solution (find length)&lt;/h3&gt;&lt;p&gt;We have two strings, assume the length of the first string is &lt;code&gt;m&lt;/code&gt;, and the length of the second string is &lt;code&gt;n&lt;/code&gt;. We have two variables, it natural to think use both of them. Let’s try so. Use &lt;code&gt;dp[i][j]&lt;/code&gt; to denote the length of the longest subsequence of &lt;code&gt;str1.substring(0,i)&lt;/code&gt; and &lt;code&gt;str2.substring(0,j)&lt;/code&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;str1[i-1] == str2[j-1]&lt;/code&gt;(last characters of two strings), then &lt;code&gt;dp[i][j] = dp[i-1][j-1] + 1&lt;/code&gt;. For example, two substrings are &lt;code&gt;ABCDGH&lt;/code&gt; and &lt;code&gt;AEDFH&lt;/code&gt;, we just need to find the longest subsequence of &lt;code&gt;ABCDG&lt;/code&gt; and &lt;code&gt;AEDF&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;str1[i-1] != str2[j-1]&lt;/code&gt;, then &lt;code&gt;dp[i][j] = max{dp[i-1][j], dp[i][j-1]}&lt;/code&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LCS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] arrA, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] arrB, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[m + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= m; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt;= n; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arrA[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == arrB[j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = Math.max(dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j], dp[i][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[m][n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13102045/scanner-is-skipping-nextline-after-using-next-or-nextfoo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reference&lt;/a&gt; To read input, if using both &lt;code&gt;nextInt()&lt;/code&gt;  and &lt;code&gt;nextLine&lt;/code&gt;(), be careful that &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#nextInt%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Scanner.nextInt&lt;/code&gt;&lt;/a&gt; method does not consume the &lt;em&gt;last newline&lt;/em&gt; character of input, and thus that &lt;em&gt;newline&lt;/em&gt; is consumed in the next call to &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#nextLine%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Scanner.nextLine&lt;/code&gt;&lt;/a&gt;. So we need to code like this:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Scanner scan = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t = scan.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(t-- &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = scan.nextInt(); &lt;span class=&quot;comment&quot;&gt;//length of String a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = scan.nextInt(); &lt;span class=&quot;comment&quot;&gt;//length of String b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        scan.nextLine();  &lt;span class=&quot;comment&quot;&gt;// Consume newline left-over&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String a = scan.nextLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String b = scan.nextLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(LCS(a.toCharArray(), m, b.toCharArray(), n));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If we do not put &lt;code&gt;scan.nextLine();&lt;/code&gt; before using &lt;code&gt;nextLine();&lt;/code&gt;, then String a will be empty string =&amp;gt; &lt;code&gt;a = &amp;quot;&amp;quot;&lt;/code&gt;, &lt;code&gt;b = ABCDGH&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Or we can use &lt;code&gt;next()&lt;/code&gt; to read string a and b.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Scanner scan = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t = scan.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(t-- &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = scan.nextInt(); &lt;span class=&quot;comment&quot;&gt;//length of String a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = scan.nextInt(); &lt;span class=&quot;comment&quot;&gt;//length of String b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String a = scan.next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String b = scan.next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(LCS(a.toCharArray(), m, b.toCharArray(), n));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Extension-find-subsequence&quot;&gt;&lt;a href=&quot;#Extension-find-subsequence&quot; class=&quot;headerlink&quot; title=&quot;Extension (find subsequence)&quot;&gt;&lt;/a&gt;Extension (find subsequence)&lt;/h3&gt;&lt;p&gt;The solution above could give us the length of the longest subsequence. But how do we find the actual subsequence? &lt;/p&gt;
&lt;p&gt;Let’s see the table that above solution will produce for input &lt;code&gt;str1 = &amp;quot;AGGTAB&amp;quot;, str2 = &amp;quot;GXTXAYB&amp;quot;&lt;/code&gt;. And the longest common sequence is &lt;code&gt;GTAB&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;		G	X	T	X	A	Y	B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	0	0	0	0	0	0	0	0	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A	0	0	0	0	0	1	1	1	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;G	0	1	1	1	1	1	1	1	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;G	0	1	1	1	1	1	1	1	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;T	0	1	1	2	2	2	2	2	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A	0	1	1	2	2	3	3	3	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B	0	1	1	2	2	3	3	4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We can start from the bottom-right corner &lt;code&gt;dp[m][n]&lt;/code&gt;.  For&lt;code&gt;dp[6][7]&lt;/code&gt;, &lt;code&gt;str1[5] == str2[6] == &amp;#39;B&amp;#39;&lt;/code&gt;, so we know that &lt;code&gt;B&lt;/code&gt; is in the common subsequence and we need to check &lt;code&gt;dp[m-1][n-1]&lt;/code&gt;(diagonally) next time. For &lt;code&gt;dp[5][6]&lt;/code&gt;, &lt;code&gt;str1[5] == &amp;#39;A&amp;#39; != &amp;#39;Y&amp;#39; == str2[6]&lt;/code&gt;, we will check left cell and top cell, since &lt;code&gt;dp[5][5] = 3 &amp;gt; 2 = dp[4][6]&lt;/code&gt;, we know the result of &lt;code&gt;dp[5][6] = 3&lt;/code&gt; came from &lt;code&gt;dp[5][5]&lt;/code&gt;, so we go left. Then produce &lt;code&gt;A&lt;/code&gt;, go diagonally; do not output, go left, produce &lt;code&gt;T&lt;/code&gt;, go diagonally; do not output, go top or left; produce &lt;code&gt;G&lt;/code&gt;, stop.&lt;/p&gt;
&lt;p&gt;In this manner, we will have &lt;code&gt;BATG&lt;/code&gt;, reverse it will be our final answer &lt;code&gt;GTAB&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;findLCS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] arrA, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[] arrB, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[m + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= m; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt;= n; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arrA[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == arrB[j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = Math.max(dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j], dp[i][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StringBuilder lcs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = m, j = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; j &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(arrA[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == arrB[j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lcs.append(arrA[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i--; j--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j] &amp;gt; dp[i][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                i--; &lt;span class=&quot;comment&quot;&gt;//go top&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j] &amp;lt; dp[i][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                j--; &lt;span class=&quot;comment&quot;&gt;//go left&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                i--; j--; &lt;span class=&quot;comment&quot;&gt;//go diagonal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lcs.reverse().toString(); &lt;span class=&quot;comment&quot;&gt;//reverse() since we started from the bottom-right corner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Longest-Common-Subsequence&quot;&gt;&lt;a href=&quot;#Longest-Common-Subsequence&quot; class=&quot;headerlink&quot; title=&quot;Longest Common Subsequence&quot;&gt;&lt;/a&gt;Longest 
    
    </summary>
    
      <category term="Dynamic Programming" scheme="http://louie.link/categories/Dynamic-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Coin Change</title>
    <link href="http://louie.link/Dynamic-Programming/(1)CoinChange/"/>
    <id>http://louie.link/Dynamic-Programming/(1)CoinChange/</id>
    <published>2018-02-28T08:00:00.000Z</published>
    <updated>2018-03-05T10:14:37.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Coin-Change&quot;&gt;&lt;a href=&quot;#Coin-Change&quot; class=&quot;headerlink&quot; title=&quot;Coin Change&quot;&gt;&lt;/a&gt;Coin Change&lt;/h2&gt;&lt;h3 id=&quot;1-Minimum-number-of-coins&quot;&gt;&lt;a href=&quot;#1-Minimum-number-of-coins&quot; class=&quot;headerlink&quot; title=&quot;1. Minimum number of coins&quot;&gt;&lt;/a&gt;1. Minimum number of coins&lt;/h3&gt;&lt;p&gt;Compute the minimum number of coins needed to make change for a given amount $m$. Assume that we have an infinite supply of each coin. All denominations $d_k$ are sorted in ascending order: $1 = coin_1 &amp;lt; coin_2 &amp;lt; … &amp;lt; coin_n$. (&lt;strong&gt;$coin_1= 1$ here is simply to make sure that there will always exist a solution, will discuss the case that no solution exists later on&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;For this problem, Greedy Algorithm cannot always find the optimal solution. For example, we have m = 100, D = {1,5,50,80}, greedy that selects largest coin will produce {80,5,5,5,5}, 5 coins, while we just need 2, {50,50}.&lt;/p&gt;
&lt;h4 id=&quot;1-1-Solution1-using-dp&quot;&gt;&lt;a href=&quot;#1-1-Solution1-using-dp&quot; class=&quot;headerlink&quot; title=&quot;1.1 Solution1 using $dp[][]$&quot;&gt;&lt;/a&gt;1.1 Solution1 using $dp[][]$&lt;/h4&gt;&lt;p&gt;Consider using DP. To count minimum number of coins, we can divide all set solutions in two sets.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 1) Solutions that do not contain kth coin $coin[k]$.&lt;/p&gt;
&lt;p&gt; 2) Solutions that contain at least one $coin[k]$.  Since we can use infinite same coin, we need to know  the minimum number of coins to make up amount $x - coin_k$ by using first &lt;code&gt;k&lt;/code&gt;coins (including it), which is $dp[k, x-coin_k]$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let $dp[k,x]$ be the least number of coins needed to represent amount $x$ ($0 \le x \le m$) using the first $k$ ($0 \le k \lt n$, k=0 is coin[0], the first kind of coin) kinds of coins. Then it can be written as the smaller one of the above two situations:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp[k,x] = min\{dp[k-1, x], dp[k, x-coin_k] + 1\}&lt;/script&gt;&lt;p&gt;Therefore, the problem has optimal substructure property as the problem can be solved using solutions to subproblems.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If m = 0, then the number should be 0, $dp[k, 0] = 0$&lt;/li&gt;
&lt;li&gt;If just use $coin[0] = 1$, then the number is our target amount, $dp[0,x] = x$.&lt;/li&gt;
&lt;li&gt;If the amount needed now is less the the current coin k, i.e. $x &amp;lt; d_k$, $dp[k, x] = dp[k-1, x]$&lt;/li&gt;
&lt;li&gt;$dp[k,x] = min{dp[k, x-coin_k] + 1, dp[k-1, x]}$&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;target = 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coins = &amp;#123;1,3,4,7&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Our $dp[][]$ will be like following table. We filled this table row by row, from left to right. First we fill row$0$, we only use coin[0], thus the number of coins needed for 3 is 3, for 4 is 4, for 6 is 6. Then we fill row1, now we can use coin[0] and coin[1], which are 1 and 3. Then row2…&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;		0	1	2	3	4	5	6	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0(1)	0	1	2	3	4	5	6	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1(3)	0	1	2	1	2	3	2	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2(4)	0	1	2	1	1	2	2	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3(7)	0	1	2	1	1	2	2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Code is like this:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minCoins&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] coins, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[coins.length][target + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1. dp[k][0] = 0, default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2. dp[0][x] = x, using coins[0] = 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt;= target; j++) &lt;span class=&quot;comment&quot;&gt;//3. initialize (only if coins[0] = 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][j] = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 4. Recurrence Relation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; coins.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt;= target; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (j &amp;lt; coins[i]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = dp[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; 			 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = Math.min(dp[i][j - coins[i]] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, dp[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[coins.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][target]; &lt;span class=&quot;comment&quot;&gt;// bottom right corner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-Solution2-optimize-memory-using-dp&quot;&gt;&lt;a href=&quot;#2-Solution2-optimize-memory-using-dp&quot; class=&quot;headerlink&quot; title=&quot;2. Solution2, optimize memory using $dp[]$&quot;&gt;&lt;/a&gt;2. Solution2, optimize memory using $dp[]$&lt;/h4&gt;&lt;p&gt;In the above solution, we used a two-dimensional array to store our intermediate results. We considered two variables, k and x, use the first k kinds of coinds to represent amount x, thus have dp[k, x]. &lt;strong&gt;But $k$ is not really necessary.&lt;/strong&gt; =&amp;gt; $dp[x]$ is enough.&lt;/p&gt;
&lt;p&gt;There are two ways to think of it.&lt;/p&gt;
&lt;p&gt;(1) The first way. Still follows the thought of using the first k kinds of coins to represent amount x (pick coins one by one). But instead record every results for each k, we &lt;strong&gt;overwrite&lt;/strong&gt; the results of $(k-1)$. This is correct because in kth round, we have the optimal solution to using $(k-1)$ kinds of coins like in solution 1, we can just consider whether use kth kind of coin or not. Let dp[x] denote the minimun number of coins needed to represent x. &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp[x] = min\{dp[x], dp[x - coin[k]] + 1\}&lt;/script&gt;&lt;p&gt;Here, $dp[x]$ in the $min{}$ is actually the result in $(k-1)$ round.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//iteration, similar to solution1, each iteration only use first k kinds of coins&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minCoin2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] coins, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dp[] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[target + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//1. dp[0] = 0, base case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; value &amp;lt;= target; value++) &lt;span class=&quot;comment&quot;&gt;//2. initialize (we know coins[0] = 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dp[value] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. Minimum number of coins needed for all values from 1 to target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; coins.length; k++) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//if coins[0]=1, we could start j from 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = coins[k]; value &amp;lt;= target; value++) &lt;span class=&quot;comment&quot;&gt;//inside each iteration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	dp[value] = Math.min(dp[value], dp[value - coins[k]] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[target];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(2) The second way. We just consider how we can represent $dp[x]$ with its subproblems. For $dp[x]$, we either chose a particular coin - coins[k] or not. So what is the k? We do not know, so &lt;strong&gt;try every possible choices.&lt;/strong&gt; valid k should satisfy $coins[k] \le x$. So fix the value x, and then check all possible choices, and pick the one with minimum number. Still we have:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp[x] = min\{dp[x], dp[x - coin[k]] + 1\}&lt;/script&gt;&lt;p&gt;For example, we have&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;target = 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coins = &amp;#123;2,3,5,8&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So, how do we represent &lt;code&gt;dp[7]&lt;/code&gt;? It must be&lt;code&gt;min{dp[7-2], dp[7-3], dp[7-5]} + 1 = min{dp[5],dp[4],dp[2]} + 1&lt;/code&gt; (no dp[7-8], it’s not valid, 2,3,5 are the three possible choices).&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//try all possible choices to represent dp[value]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minCoin2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] coins, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dp[] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[target + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//1. dp[0] = 0, base case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; value &amp;lt;= target; value++) &lt;span class=&quot;comment&quot;&gt;//2. initialize (we know coins[0] = 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dp[value] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. Minimum number of coins needed for all values from 1 to target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; value &amp;lt;= target; value++) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//fix value, then check all possible choices&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; coins.length; j++) &lt;span class=&quot;comment&quot;&gt;//check all coins &amp;lt;= value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (coins[j] &amp;lt;= value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[value] = Math.min(dp[value], dp[value - coins[j]] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[target];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-If-solution-to-this-problem-does-not-exist&quot;&gt;&lt;a href=&quot;#3-If-solution-to-this-problem-does-not-exist&quot; class=&quot;headerlink&quot; title=&quot;3. If solution to this problem does not exist&quot;&gt;&lt;/a&gt;3. If solution to this problem does not exist&lt;/h4&gt;&lt;p&gt;Previous analysis assumes that $coin[0] = 1$, thus there must be a solution to any positive amount m. Now we consider the case that a solution does not exist. For example, &lt;code&gt;m = 7&lt;/code&gt;, &lt;code&gt;coins = {3,5}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To solve this problem, we just need to modify solution 2 slightly. Instead of initializing &lt;code&gt;dp[value] = value&lt;/code&gt;, we initialize &lt;code&gt;dp[value] = Integer.MAX_VALUE&lt;/code&gt; (since we are trying to find minimum). Then in the updating step, if &lt;code&gt;dp[value - coins[j]] == Integer.MAX_VALUE&lt;/code&gt; , we do not update &lt;code&gt;dp[value]&lt;/code&gt;. The first time that &lt;code&gt;dp[value - coins[j]] != Integer.MAX_VALUE&lt;/code&gt; is that &lt;code&gt;value = coins[j]&lt;/code&gt; (dp[0] = 0). &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minCoin3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] coins, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dp[] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[target + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//1. dp[0] = 0, base case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; value &amp;lt;= target; value++) &lt;span class=&quot;comment&quot;&gt;//2. initialize (we know coins[0] = 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dp[value] = Integer.MAX_VALUE; &lt;span class=&quot;comment&quot;&gt;////means no solution&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. Compute minimum coins required for all values from 1 to target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; value &amp;lt;= target; value++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; coins.length; j++) &lt;span class=&quot;comment&quot;&gt;//check all coins &amp;lt;= value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (coins[j] &amp;lt;= value &amp;amp;&amp;amp; dp[value - coins[j]] != Integer.MAX_VALUE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[value] = Math.min(dp[value], dp[value - coins[j]] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[target]; &lt;span class=&quot;comment&quot;&gt;//if no solution, return Integer.MAX_VALUE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Example1 (has solution)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;target = 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coins = &amp;#123;2,3,5&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                  0  1  2  3  4  5  6  7 (amount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fisrt:      dp = [0, ∞, ∞, ∞, ∞, ∞, ∞, ∞]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=1,    no coin &amp;lt;= 1, nothing changes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=2,    dp = [0, ∞, 1, ∞, ∞, ∞, ∞, ∞], dp[2-2] = 0, so dp[2] = 0+1=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=3,    dp = [0, ∞, 1, 1, ∞, ∞, ∞, ∞], dp[3-2] = ∞, dp[3-3] = 0, so dp[3] = 0+1=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=4,    dp = [0, ∞, 1, 1, 2, ∞, ∞, ∞], dp[4-2] = 1, dp[4-3] = ∞, so dp[4] = 1+1=2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=5,    dp = [0, ∞, 1, 1, 2, 2, ∞, ∞], ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=6,    dp = [0, ∞, 1, 1, 2, 2, 2, ∞], ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=7,    dp = [0, ∞, 1, 1, 2, 2, 2, 2], ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Example2 (no solution)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;target = 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coins = &amp;#123;3,5&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                  0  1  2  3  4  5  6  7 (amount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fisrt:      dp = [0, ∞, ∞, ∞, ∞, ∞, ∞, ∞]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=1,    no coin &amp;lt;= 1, nothing changes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=2,    no coin &amp;lt;= 2, nothing changes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=3,    dp = [0, ∞, ∞, 1, ∞, ∞, ∞, ∞], dp[3-3] = 0, so dp[3] = 0+1=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=4,    dp = [0, ∞, ∞, 1, ∞, ∞, ∞, ∞], dp[4-3]= ∞, nothing changes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=5,    dp = [0, ∞, ∞, 1, ∞, 1, ∞, ∞], dp[5-3] = ∞, dp[5-5] = 0, so dp[5] = 0+1=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=6,    dp = [0, ∞, ∞, 1, ∞, 1, ∞, ∞], ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value=7,    dp = [0, ∞, ∞, 1, ∞, 1, ∞, ∞], ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-Total-number-of-ways-to-make-the-change&quot;&gt;&lt;a href=&quot;#2-Total-number-of-ways-to-make-the-change&quot; class=&quot;headerlink&quot; title=&quot;2. Total number of ways to make the change&quot;&gt;&lt;/a&gt;2. Total number of ways to make the change&lt;/h3&gt;&lt;p&gt;We want to make change for $m$ cents, and we have infinite supply of $coins = {coins_1, coins_2, .. , coins_n}$ . How many ways can we make the change? &lt;strong&gt;The order of coins doesn’t matter.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example, for m = 4 and coins = {1,2,3}, there are 5 solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. For m = 10 and coins = {2, 5, 3, 6}, there are 5 solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}. &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp[k][x] = dp[k-1][x] + dp[k][x-coin_k]&lt;/script&gt;&lt;p&gt;This two dimensional array $dp[][]$ can be reduced to $dp[]$:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp[x] = dp[x] + dp[x - coin[k]]&lt;/script&gt;&lt;p&gt;Here, $dp[x]$ in the  right side is actually the result in $(k-1)$ round. &lt;strong&gt;dp[0] = 1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We should be use solution 2.2 here, since that will yield duplicates, for example, m = 3, coins = {1,2,3}, for dp[3], it will consider dp[2] + dp[1] + dp[0], but there are duplicate. If we pick 1, then we look into dp[2] =&amp;gt; 2: {1,1},{2} =&amp;gt; add this 1 =&amp;gt; {1,1,1},{2,1}; if we pick 2, we look into dp[1] =&amp;gt; 1: {1} =&amp;gt; add this 2 =&amp;gt; {1,2}. But {1,2} and {2,1} should be considered as same. This is because we do not have an order for examine the coins and we try every possible coins for each value x.&lt;/p&gt;
&lt;p&gt;We can check coins one by one, like in solution 2.1. &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;totalCoins&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] coins, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[target + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//if target = 0, then 1 way&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; coins.length; k++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; value &amp;lt;= target; value++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (coins[k] &amp;lt;= value) &lt;span class=&quot;comment&quot;&gt;//make sure valid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[value] += dp[value - coins[k]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[target];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This can be wrriten as:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;totalCoins&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] coins, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[target + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//if target = 0, then 1 way&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; coins.length; k++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = coins[k]; value &amp;lt;= target; value++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dp[value] += dp[value - coins[k]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[target];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Coin-Change&quot;&gt;&lt;a href=&quot;#Coin-Change&quot; class=&quot;headerlink&quot; title=&quot;Coin Change&quot;&gt;&lt;/a&gt;Coin Change&lt;/h2&gt;&lt;h3 id=&quot;1-Minimum-number-of-coins&quot;&gt;&lt;a
    
    </summary>
    
      <category term="Dynamic Programming" scheme="http://louie.link/categories/Dynamic-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Dynamic Programming Basics</title>
    <link href="http://louie.link/Dynamic-Programming/(0)DynamicProgrammingBasics/"/>
    <id>http://louie.link/Dynamic-Programming/(0)DynamicProgrammingBasics/</id>
    <published>2018-02-28T08:00:00.000Z</published>
    <updated>2018-03-05T08:20:10.000Z</updated>
    
    <content type="html">&lt;p&gt;I’ve been asked a DP problem today during the interview. It was not hard but I failed to think it clearly. I feel really really bad, so I think I need to review and sum up what I’ve learnt about DP. I’ll go over the problems I’ve met in the past few years and then find some new ones to practice. &lt;/p&gt;
&lt;h2 id=&quot;Dynamic-Programming-Concepts&quot;&gt;&lt;a href=&quot;#Dynamic-Programming-Concepts&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Programming Concepts&quot;&gt;&lt;/a&gt;Dynamic Programming Concepts&lt;/h2&gt;&lt;p&gt;“The basic idea of Dynamic Programming is drawn from the intuition behind divide and conquer and is essentially the opposite of the greedy strategy: one &lt;strong&gt;implicitly&lt;/strong&gt; explores the space of &lt;strong&gt;all&lt;/strong&gt; possible solutions, by carefully decomposing things into a series of subproblems, and then building up correct solutions to larger and larger subproblems.”[1]&lt;/p&gt;
&lt;p&gt;Optimal Substructure and Overlapping Subproblems are the two keys attributes for Dynamic Programming.&lt;/p&gt;
&lt;h3 id=&quot;1-Optimal-Substructure&quot;&gt;&lt;a href=&quot;#1-Optimal-Substructure&quot; class=&quot;headerlink&quot; title=&quot;1. Optimal Substructure&quot;&gt;&lt;/a&gt;1. Optimal Substructure&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Optimal substructure means that the optimal solution to the given problem can be obtained by the combination of optimal solutions to its subproblems.&lt;/strong&gt; Optimal substructures are usually described &lt;strong&gt;recursively&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, the Shortest Path problem has optimal substructure property while the Longest Path problem (NP hard) does not.&lt;/p&gt;
&lt;p&gt;In the following example, the &lt;strong&gt;longest&lt;/strong&gt; path from A to D is &lt;code&gt;A-&amp;gt;B-&amp;gt;D&lt;/code&gt;, but this path is not a combination of longest path from A to B and from B to D since the longest path from A to B is &lt;code&gt;A-&amp;gt;C-&amp;gt;D-&amp;gt;B&lt;/code&gt; instead of &lt;code&gt;A-&amp;gt;B&lt;/code&gt; and the longest path from B to D is &lt;code&gt;B-&amp;gt;A-&amp;gt;C-&amp;gt;D&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A ———— B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  	   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C ———— D&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-Overlapping-Subproblems&quot;&gt;&lt;a href=&quot;#2-Overlapping-Subproblems&quot; class=&quot;headerlink&quot; title=&quot;2. Overlapping Subproblems&quot;&gt;&lt;/a&gt;2. Overlapping Subproblems&lt;/h3&gt;&lt;p&gt;For Optimal Substructure, we know that the problem’s solution can be obtained by the combination of optimal solutions to its subproblems. Overlapping Subproblems means that these subproblems must &lt;strong&gt;overlap&lt;/strong&gt;, which means that solutions to some subproblems are needed again and again. &lt;/p&gt;
&lt;p&gt;If there are no common overlapping subproblems, then Dynamic Programming is not useful. (Think about Merge Sort / Binary Search, we use DC instead of DP.)&lt;/p&gt;
&lt;h3 id=&quot;3-Memoization-and-Tabulation&quot;&gt;&lt;a href=&quot;#3-Memoization-and-Tabulation&quot; class=&quot;headerlink&quot; title=&quot;3. Memoization and Tabulation&quot;&gt;&lt;/a&gt;3. Memoization and Tabulation&lt;/h3&gt;&lt;p&gt;Since in dynamic programming, there exist Overlapping Subproblems, we could store the intermediate results of these subproblems in a table to avoid recomputing them.&lt;/p&gt;
&lt;p&gt;There are two ways to do this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Memoization&lt;/strong&gt;: filling up a table &lt;strong&gt;recursively&lt;/strong&gt; in top-down manner.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tabulation&lt;/strong&gt;: filling up a table &lt;strong&gt;iteratively&lt;/strong&gt; in bottom-up manner.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;4-An-simple-example-Fibonacci-Numbers&quot;&gt;&lt;a href=&quot;#4-An-simple-example-Fibonacci-Numbers&quot; class=&quot;headerlink&quot; title=&quot;4. An simple example: Fibonacci Numbers&quot;&gt;&lt;/a&gt;4. An simple example: Fibonacci Numbers&lt;/h3&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left\{\begin{aligned}F_n &amp;= F_{n-1} + F_{n-2} \\F_0 &amp;= F_1 = 1\end{aligned}\right.&lt;/script&gt;&lt;p&gt;If using Divide &amp;amp; Conquer:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;lt;=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;	    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fib(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + fib(n-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This implementation is quite straightforward, but we have recomputed many same subproblems many times. The solution to the recurrence is exponential - we double the work on each recursive call.&lt;/p&gt;
&lt;p&gt;Draw a recursion tree for fib(5), we can see that f(3) is calculated 2 times, f(2) is calculated 3 times…&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                          fib(5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     /             \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               fib(4)                fib(3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             /      \                /     \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fib(3)      fib(2)         fib(2)    fib(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /     \        /    \       /    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fib(2)   fib(1)  fib(1) fib(0) fib(1) fib(0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fib(1) fib(0)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So apparently we could store those intermediate results. &lt;/p&gt;
&lt;h4 id=&quot;4-1-Memoization-Top-Down&quot;&gt;&lt;a href=&quot;#4-1-Memoization-Top-Down&quot; class=&quot;headerlink&quot; title=&quot;4.1 Memoization (Top Down)&quot;&gt;&lt;/a&gt;4.1 Memoization (Top Down)&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = dp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dp[n] != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[n]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;            dp[n] = fib(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + fib(n-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[n]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This implementation really looks like the recursive version, we just use a table to store the computed results. Whenever we need solution to a subproblem, we first lookup the table. If it’s already there, just return it, if not, we calculate it and store it to the table. &lt;/p&gt;
&lt;p&gt;Why Memoization is top down? Because we are looking for solutions from the root of the &lt;strong&gt;recursion tree&lt;/strong&gt; to its bottom. To compute fib(5), we first look into fib(4) and fib(3), to compute fib(4), we first look into fib(3) and fib(2)… &lt;strong&gt;Top Down is for recursion tree&lt;/strong&gt;, like a tree grows from a single root down to its leaves; for the table we still fill dp[2] first, then dp[3], dp[4]…&lt;/p&gt;
&lt;h4 id=&quot;4-2-Tabulation-Bottom-Up&quot;&gt;&lt;a href=&quot;#4-2-Tabulation-Bottom-Up&quot; class=&quot;headerlink&quot; title=&quot;4.2 Tabulation (Bottom Up)&quot;&gt;&lt;/a&gt;4.2 Tabulation (Bottom Up)&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = dp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i] = dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + dp[i-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Tabulation is a iterative version. &lt;/p&gt;
&lt;p&gt;Why Tabulation is bottom up? To compute fib(n), we always first compute fib(0), then fib(1), then fib(2), then fib(3) and so on. So we are building the solutions of subproblems bottom-up, like a tree grows from leaves to root (sounds like the tree is growing unnaturally)…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] Jon Kleinberg and Eva Tardos. Algorithm Design. Addison Wesley, Reading (2006)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve been asked a DP problem today during the interview. It was not hard but I failed to think it clearly. I feel really really bad, so I
    
    </summary>
    
      <category term="Dynamic Programming" scheme="http://louie.link/categories/Dynamic-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>(08) Lexicon and Text Normalization</title>
    <link href="http://louie.link/Information-Retrieval/(08)LexiconandTextNormalization/"/>
    <id>http://louie.link/Information-Retrieval/(08)LexiconandTextNormalization/</id>
    <published>2018-01-31T08:00:00.000Z</published>
    <updated>2018-02-24T10:17:58.000Z</updated>
    
    <content type="html">&lt;p&gt;Lectrue in 01/31/2018&lt;/p&gt;
&lt;h3 id=&quot;1-Zipf’s-Law-Power-Law&quot;&gt;&lt;a href=&quot;#1-Zipf’s-Law-Power-Law&quot; class=&quot;headerlink&quot; title=&quot;1. Zipf’s Law (Power Law)&quot;&gt;&lt;/a&gt;1. Zipf’s Law (Power Law)&lt;/h3&gt;&lt;p&gt;Power Law is:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;Power \; Law : y = kx^{c}&lt;/script&gt;&lt;p&gt;where k and c are constants.&lt;/p&gt;
&lt;p&gt;Zipf’s law is a power law with c = –1&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;Zipf’s \; Law : y = kx^{-1} = \frac{k}{x}&lt;/script&gt;&lt;p&gt;Zipf’s law states that given some corpus of natural language utterances, &lt;strong&gt;the frequency of any word is inversely proportional to its rank in the frequency table.&lt;/strong&gt; [1]&lt;/p&gt;
&lt;h3 id=&quot;2-Heap’s-Law&quot;&gt;&lt;a href=&quot;#2-Heap’s-Law&quot; class=&quot;headerlink&quot; title=&quot;2. Heap’s Law&quot;&gt;&lt;/a&gt;2. Heap’s Law&lt;/h3&gt;&lt;p&gt;If $V$ is the size of the vocabulary and $n$ is the number of words:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;V = Kn^{\beta}&lt;/script&gt;&lt;p&gt;where K is a constant and $\beta \in (0,1) $&lt;/p&gt;
&lt;p&gt;Heap’s law describes the number of distinct words (V) in a set of documents as a function of the document length (n) [2]&lt;/p&gt;
&lt;h3 id=&quot;3-Stemming-and-Lemmatization&quot;&gt;&lt;a href=&quot;#3-Stemming-and-Lemmatization&quot; class=&quot;headerlink&quot; title=&quot;3. Stemming and Lemmatization&quot;&gt;&lt;/a&gt;3. Stemming and Lemmatization&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://nlp.stanford.edu/IR-book/html/htmledition/stemming-and-lemmatization-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;see&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The goal of both stemming and lemmatization is to reduce inflectional forms and sometimes derivationally related forms of a word to a common base form. For instance:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;am, are, is $\Rightarrow$ be &lt;/li&gt;
&lt;li&gt;car, cars, car’s, cars’ $\Rightarrow$ car&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, the two words differ in their flavor. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stemming&lt;/strong&gt; usually refers to a crude heuristic process that chops off the ends of words in the hope of achieving this goal correctly most of the time, and often includes the removal of derivational affixes. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemmatization&lt;/strong&gt; usually refers to doing things properly with the use of a vocabulary and morphological analysis of words, normally aiming to remove inflectional endings only and to return the base or dictionary form of a word, which is known as the lemma . &lt;/p&gt;
&lt;p&gt;If confronted with the token &lt;code&gt;saw&lt;/code&gt;, stemming might return just &lt;code&gt;s&lt;/code&gt;, whereas lemmatization would attempt to return either &lt;code&gt;see&lt;/code&gt; or &lt;code&gt;saw&lt;/code&gt; depending on whether the use of the token was as a verb or a noun. &lt;/p&gt;
&lt;p&gt;The two may also differ in that stemming most commonly collapses derivationally related words, whereas lemmatization commonly only collapses the different inflectional forms of a lemma. [3]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Porter’s algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-Soundex-Algorithm&quot;&gt;&lt;a href=&quot;#4-Soundex-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;4. Soundex Algorithm&quot;&gt;&lt;/a&gt;4. Soundex Algorithm&lt;/h3&gt;&lt;p&gt;This is an interesting algorithm.&lt;/p&gt;
&lt;p&gt;Soundex Algorithm is a phonetic algorithm for indexing names by their sound when pronounced in English. &lt;/p&gt;
&lt;p&gt;The Soundex code for a name consists of a letter followed by three numerical digits: the letter is the first letter of the name, and the digits encode the remaining consonants. Consonants at a similar place of articulation share the same digit so, for example, the labial consonants B, F, P, and V are each encoded as the number 1. [4]&lt;/p&gt;
&lt;p&gt;The correct value can be found as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;Retain the first letter of the name and drop all other occurrences of {a, e, i, o, u, y, h, w}.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;Replace consonants with digits as follows (after the first letter):&lt;ul&gt;
&lt;li&gt;b, f, p, v → 1&lt;/li&gt;
&lt;li&gt;c, g, j, k, q, s, x, z → 2&lt;/li&gt;
&lt;li&gt;d, t → 3&lt;/li&gt;
&lt;li&gt;l → 4&lt;/li&gt;
&lt;li&gt;m, n → 5&lt;/li&gt;
&lt;li&gt;r → 6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;If two or more letters with the same number are adjacent in the original name (before step 1), only retain the first letter; also two letters with the same number separated by ‘h’ or ‘w’ are coded as a single number, whereas such letters separated by a vowel are coded twice. This rule also applies to the first letter.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;If you have too few letters in your word that you can’t assign three numbers, append with 0s until there are three numbers. If you have more than 3 letters, just retain the first 3 numbers.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For exampl,e “disapont” has code “D215”, we could use other words that also have code “D215” to do spelling correction. (“disband”, “disbands”, “dispensary”, “despondent” and so on)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] Zipf’s law, Retreived from &lt;a href=&quot;https://en.wikipedia.org/wiki/Zipf%27s_law&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Zipf%27s_law&lt;/a&gt;&lt;br&gt;[2] Heap’s Law, Retreived from &lt;a href=&quot;https://en.wikipedia.org/wiki/Heaps%27_law&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Heaps%27_law&lt;/a&gt;&lt;br&gt;[3] Stemming and lemmatization, Retreived from &lt;a href=&quot;https://nlp.stanford.edu/IR-book/html/htmledition/stemming-and-lemmatization-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nlp.stanford.edu/IR-book/html/htmledition/stemming-and-lemmatization-1.html&lt;/a&gt;&lt;br&gt;[4] Soundex, Retreived from &lt;a href=&quot;https://en.wikipedia.org/wiki/Soundex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Soundex&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Lectrue in 01/31/2018&lt;/p&gt;
&lt;h3 id=&quot;1-Zipf’s-Law-Power-Law&quot;&gt;&lt;a href=&quot;#1-Zipf’s-Law-Power-Law&quot; class=&quot;headerlink&quot; title=&quot;1. Zipf’s Law (Powe
    
    </summary>
    
      <category term="Information Retrieval" scheme="http://louie.link/categories/Information-Retrieval/"/>
    
    
  </entry>
  
  <entry>
    <title>(07) Introduction to Information Retrieval</title>
    <link href="http://louie.link/Information-Retrieval/(07)Information%20Retrieval/"/>
    <id>http://louie.link/Information-Retrieval/(07)Information Retrieval/</id>
    <published>2018-01-29T08:00:00.000Z</published>
    <updated>2018-02-24T09:50:04.000Z</updated>
    
    <content type="html">&lt;p&gt;Lectrue in 01/29/2018&lt;/p&gt;
&lt;h3 id=&quot;1-Information-Retrieval-Models&quot;&gt;&lt;a href=&quot;#1-Information-Retrieval-Models&quot; class=&quot;headerlink&quot; title=&quot;1. Information Retrieval Models&quot;&gt;&lt;/a&gt;1. Information Retrieval Models&lt;/h3&gt;&lt;p&gt;A retrieval model should define document and query representation and retreival function. There are three major models:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Boolean models&lt;/li&gt;
&lt;li&gt;Vector Space models&lt;/li&gt;
&lt;li&gt;Probabilistic models&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-1-Basic-Pre-Processing-Steps&quot;&gt;&lt;a href=&quot;#1-1-Basic-Pre-Processing-Steps&quot; class=&quot;headerlink&quot; title=&quot;1.1 Basic Pre-Processing Steps&quot;&gt;&lt;/a&gt;1.1 Basic Pre-Processing Steps&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Extract content that we need&lt;/li&gt;
&lt;li&gt;Word segmentation (break into tokens)&lt;/li&gt;
&lt;li&gt;Stemming&lt;/li&gt;
&lt;li&gt;Stop words removal&lt;/li&gt;
&lt;li&gt;Detect common phrases &lt;/li&gt;
&lt;li&gt;Buid inverted index (word to doc)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-Boolean-Model&quot;&gt;&lt;a href=&quot;#2-Boolean-Model&quot; class=&quot;headerlink&quot; title=&quot;2. Boolean Model&quot;&gt;&lt;/a&gt;2. Boolean Model&lt;/h3&gt;&lt;p&gt;Boolean model is efficient for queries and easy to understand. But it also have some disadvantages: &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Difficult to express complex user requests&lt;/li&gt;
&lt;li&gt;Difficult to rank search result (since all the results satisfy the query)&lt;/li&gt;
&lt;li&gt;Difficult to perform relevance feedback (It’s not easy to know how to modify a query that brings irrlevant results to one that brings relevant results)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-Vector-Space-Model&quot;&gt;&lt;a href=&quot;#3-Vector-Space-Model&quot; class=&quot;headerlink&quot; title=&quot;3. Vector Space Model&quot;&gt;&lt;/a&gt;3. Vector Space Model&lt;/h3&gt;&lt;p&gt;Suppose we’ve found t distict terms in all the documents we have, we form a dictionary using these t terms. Then each document and query can be represented by a t-dimensional vertor. &lt;/p&gt;
&lt;h4 id=&quot;3-1-Term-Document-Matrix&quot;&gt;&lt;a href=&quot;#3-1-Term-Document-Matrix&quot; class=&quot;headerlink&quot; title=&quot;3.1 Term-Document Matrix&quot;&gt;&lt;/a&gt;3.1 Term-Document Matrix&lt;/h4&gt;&lt;p&gt;n documents and t temrs form a (n, t) Matrix&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;$D_1$&lt;/th&gt;
&lt;th&gt;$D_2$&lt;/th&gt;
&lt;th&gt;$D_3$&lt;/th&gt;
&lt;th&gt;…&lt;/th&gt;
&lt;th&gt;$D_n$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$T_1$&lt;/td&gt;
&lt;td&gt;$w_{11}$&lt;/td&gt;
&lt;td&gt;$w_{12}$&lt;/td&gt;
&lt;td&gt;$w_{13}$&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;$w_{1n}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$T_2$&lt;/td&gt;
&lt;td&gt;$w_{21}$&lt;/td&gt;
&lt;td&gt;$w_{22}$&lt;/td&gt;
&lt;td&gt;$w_{23}$&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;$w_{2n}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$T_t$&lt;/td&gt;
&lt;td&gt;$w_{t1}$&lt;/td&gt;
&lt;td&gt;$w_{t2}$&lt;/td&gt;
&lt;td&gt;$w_{t3}$&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;$w_{tn}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&quot;3-2-Term-Weights-Term-Frequency&quot;&gt;&lt;a href=&quot;#3-2-Term-Weights-Term-Frequency&quot; class=&quot;headerlink&quot; title=&quot;3.2 Term Weights: Term Frequency&quot;&gt;&lt;/a&gt;3.2 Term Weights: Term Frequency&lt;/h4&gt;&lt;p&gt;Assumption here is that the more frequent a term in a document, the more important it is.$f_{t,d}$ is the frequency of term t in document d.&lt;/p&gt;
&lt;p&gt;We may normalize $tf$ across the entire documents (to prevent a bias towards longer documents):&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;tf_{t,d} = \frac{f_{t,d}}{max{\{f_{t^{\prime}, d \; : \; t^{\prime} \in d}\}}}&lt;/script&gt;&lt;h4 id=&quot;3-2-Term-Weights-Inverse-Document-Frequency&quot;&gt;&lt;a href=&quot;#3-2-Term-Weights-Inverse-Document-Frequency&quot; class=&quot;headerlink&quot; title=&quot;3.2 Term Weights: Inverse Document Frequency&quot;&gt;&lt;/a&gt;3.2 Term Weights: Inverse Document Frequency&lt;/h4&gt;&lt;p&gt;The idea of $idf$ is that if a term appeara in many different documents, then it may be less indicative of overall topic.&lt;/p&gt;
&lt;p&gt;$df_{t}$ is the &lt;code&gt;document frequency of term t&lt;/code&gt;, which is also &lt;code&gt;the number of documents containing term t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;$idf_{t}$ is &lt;code&gt;inverse document frequency of term t&lt;/code&gt;.&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;idf_{t} = log_{2}{\frac{N}{df_{t}}}&lt;/script&gt;&lt;p&gt;where $N$ is the total number of documents.&lt;/p&gt;
&lt;h4 id=&quot;3-3-TF-IDF-Weighting&quot;&gt;&lt;a href=&quot;#3-3-TF-IDF-Weighting&quot; class=&quot;headerlink&quot; title=&quot;3.3 TF-IDF Weighting&quot;&gt;&lt;/a&gt;3.3 TF-IDF Weighting&lt;/h4&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;tf \cdot idf_{t,d} = tf_{t,d} \times idf_{t}&lt;/script&gt;&lt;p&gt;So, for a query q, we score the it against a document d by: &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;Score(q, d) = \sum{tf \cdot idf_{t,d}}&lt;/script&gt;&lt;p&gt;where $t \in q \cap d$.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tf%E2%80%93idf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Examples&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-4-Ranking&quot;&gt;&lt;a href=&quot;#3-4-Ranking&quot; class=&quot;headerlink&quot; title=&quot;3.4 Ranking&quot;&gt;&lt;/a&gt;3.4 Ranking&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Represent each document as a weighted $tf \cdot idf$ vector&lt;/li&gt;
&lt;li&gt;Represent the query also as a weighted $tf \cdot idf$ vector&lt;/li&gt;
&lt;li&gt;Compute the cosine similarity for the query vector and each document vector&lt;/li&gt;
&lt;li&gt;Return the top K results with highest score&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;To make the selecting top K process more efficient, we could use &lt;strong&gt;Heap&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Using $O(N)$ to heapify&lt;/li&gt;
&lt;li&gt;Using $O(KlogN)$ to select K results&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;But in this way, we still need to compute cosines from query to each of n documents. =&amp;gt; Time consuming.&lt;/p&gt;
&lt;p&gt;So we could do some extra &lt;font color=&quot;red&quot;&gt;&lt;strong&gt;Pre-Processing&lt;/strong&gt;&lt;/font&gt; work. That is, &lt;strong&gt;for each term t, we pre-compute its k nearest docs.&lt;/strong&gt; This is actullay treating each term as a single term query.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this way, to search a query with t terms, we first union these t terms k nearest neighbors, form a set &lt;code&gt;S&lt;/code&gt;. Then we can only compute cosines from the query to docs in S.&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Lectrue in 01/29/2018&lt;/p&gt;
&lt;h3 id=&quot;1-Information-Retrieval-Models&quot;&gt;&lt;a href=&quot;#1-Information-Retrieval-Models&quot; class=&quot;headerlink&quot; title=&quot;1. 
    
    </summary>
    
      <category term="Information Retrieval" scheme="http://louie.link/categories/Information-Retrieval/"/>
    
    
  </entry>
  
  <entry>
    <title>(06) Deduplication</title>
    <link href="http://louie.link/Information-Retrieval/(06)Deduplication/"/>
    <id>http://louie.link/Information-Retrieval/(06)Deduplication/</id>
    <published>2018-01-28T08:00:00.000Z</published>
    <updated>2018-02-25T07:22:33.000Z</updated>
    
    <content type="html">&lt;p&gt;Lectrue in 01/28/2018&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;In IR, deduplication means recognizing identical and nearly identical web pages and indexing only a single version.&lt;/p&gt;
&lt;p&gt;For duplicates, a kind of example is that different URLs point to the same page. Say, a html page is placed on different servers thus have different URLs (may be different in protocal / host name / path name / page name).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mirroring&lt;/strong&gt; is the largest cause of duplication.&lt;/p&gt;
&lt;h2 id=&quot;1-Detect-Exact-Duplicate-Pages&quot;&gt;&lt;a href=&quot;#1-Detect-Exact-Duplicate-Pages&quot; class=&quot;headerlink&quot; title=&quot;1. Detect Exact Duplicate Pages&quot;&gt;&lt;/a&gt;1. Detect Exact Duplicate Pages&lt;/h2&gt;&lt;h3 id=&quot;1-1-Reason-to-detect-exact-duplicate-pages&quot;&gt;&lt;a href=&quot;#1-1-Reason-to-detect-exact-duplicate-pages&quot; class=&quot;headerlink&quot; title=&quot;1.1 Reason to detect exact duplicate pages&quot;&gt;&lt;/a&gt;1.1 Reason to detect exact duplicate pages&lt;/h3&gt;&lt;p&gt;We need to detect duplicate pages for following reasons:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Better Crawling: fetch pages from faster or freshest server &amp;amp; avoid giving users many duplicate search results.&lt;/li&gt;
&lt;li&gt;Redundancy: This is used when a URL fails, try another one that returns the same page.&lt;/li&gt;
&lt;li&gt;Prevent wasting crawling time&lt;/li&gt;
&lt;li&gt;More Accurate Connectivity Analysis: For in-links, combining them from the multiple mirror sites to get an accurate PageRank; For out-links, avoid double counting them. &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-2-Solution-Cryptographic-Hasing&quot;&gt;&lt;a href=&quot;#1-2-Solution-Cryptographic-Hasing&quot; class=&quot;headerlink&quot; title=&quot;1.2 Solution (Cryptographic Hasing)&quot;&gt;&lt;/a&gt;1.2 Solution (Cryptographic Hasing)&lt;/h3&gt;&lt;p&gt;So how to detect Exact Duplicate Pages?&lt;/p&gt;
&lt;p&gt;We could compute fingerprints using &lt;strong&gt;cryptographic hashing&lt;/strong&gt; like SHA-2 or MD5. &lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;hash function&lt;/strong&gt; is any function that can be used to map data of arbitrary size to data of fixed size.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;cryptographic hash function&lt;/strong&gt; is a special class of &lt;strong&gt;hash function&lt;/strong&gt; that has certain properties which make it suitable for use in cryptography. It is a mathematical algorithm that &lt;strong&gt;maps data of arbitrary size to a bit string of a fixed size (a hash) and is designed to be a one-way function&lt;/strong&gt;, that is, a function which is infeasible to invert.  [1]&lt;/p&gt;
&lt;p&gt;The ideal cryptographic hash function has &lt;strong&gt;five&lt;/strong&gt; main properties:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;It is quick to compute the hash value for any given message;&lt;/li&gt;
&lt;li&gt;It is infeasible to generate a message from its hash value except by trying all possible messages;&lt;/li&gt;
&lt;li&gt;A small change to a message should change the hash value so extensively that the new hash value appears uncorrelated with the old hash value;&lt;/li&gt;
&lt;li&gt;It is infeasible to find two different messages with the same hash value. &lt;/li&gt;
&lt;li&gt;It is deterministic so the same message always results in the same hash;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, to identify &lt;strong&gt;Identical Pages&lt;/strong&gt;, we could compute the cryptographic hash (SHA-2, MD5) of each web page and maintain in &lt;strong&gt;sorted order&lt;/strong&gt;. In this way, it takes $O(log{n})$ to check whether a page is duplicate (Binary Search).&lt;/p&gt;
&lt;h2 id=&quot;2-Detect-Near-Duplicate-Pages&quot;&gt;&lt;a href=&quot;#2-Detect-Near-Duplicate-Pages&quot; class=&quot;headerlink&quot; title=&quot;2. Detect Near Duplicate Pages&quot;&gt;&lt;/a&gt;2. Detect Near Duplicate Pages&lt;/h2&gt;&lt;h3 id=&quot;2-1-Reason-to-detect-near-duplicate-pages&quot;&gt;&lt;a href=&quot;#2-1-Reason-to-detect-near-duplicate-pages&quot; class=&quot;headerlink&quot; title=&quot;2.1 Reason to detect near duplicate pages&quot;&gt;&lt;/a&gt;2.1 Reason to detect near duplicate pages&lt;/h3&gt;&lt;p&gt;Detecting Near Duplicate Pages takes much more effort. At first, we still try to firgure why near duplicate page detection is needed. &lt;/p&gt;
&lt;p&gt;Some reason for doing this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Clustering. Users may want similar items. “More like this”;&lt;/li&gt;
&lt;li&gt;Detect Plagiarism;&lt;/li&gt;
&lt;li&gt;Detect Spams;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-2-Solutions-1-Compute-Fingerprints&quot;&gt;&lt;a href=&quot;#2-2-Solutions-1-Compute-Fingerprints&quot; class=&quot;headerlink&quot; title=&quot;2.2 Solutions 1 - Compute Fingerprints&quot;&gt;&lt;/a&gt;2.2 Solutions 1 - Compute Fingerprints&lt;/h3&gt;&lt;p&gt;One way to detecte Near Duplicate Page is to calculate fingerprints and then test for similarity. &lt;/p&gt;
&lt;p&gt;Documents being treated as n-dimensional vectors are transformed into $f$-bit fingerprints by &lt;code&gt;Simhash&lt;/code&gt; or &lt;code&gt;Hamming Distan&lt;/code&gt;. Then compare these fingerprints with a difference in at most k bits.&lt;/p&gt;
&lt;h3 id=&quot;2-3-Solutions-2-Compute-Shingles&quot;&gt;&lt;a href=&quot;#2-3-Solutions-2-Compute-Shingles&quot; class=&quot;headerlink&quot; title=&quot;2.3 Solutions 2 - Compute Shingles&quot;&gt;&lt;/a&gt;2.3 Solutions 2 - Compute Shingles&lt;/h3&gt;&lt;h4 id=&quot;2-3-1-Distance-Measurements&quot;&gt;&lt;a href=&quot;#2-3-1-Distance-Measurements&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 Distance Measurements&quot;&gt;&lt;/a&gt;2.3.1 Distance Measurements&lt;/h4&gt;&lt;p&gt;Before diving into &lt;strong&gt;shingles&lt;/strong&gt;, let’s first review different &lt;code&gt;Distance Measurements&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;1-Euclidean-Distance&quot;&gt;&lt;a href=&quot;#1-Euclidean-Distance&quot; class=&quot;headerlink&quot; title=&quot;(1) Euclidean Distance&quot;&gt;&lt;/a&gt;(1) Euclidean Distance&lt;/h5&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;d(p,q) = d(q,p) = \sqrt{(q_1-p_1)^2 + (q_2-p_2)^2 + \cdots + (q_n-p_n)^2} = \sqrt{\sum_{i=1}^n (q_i-p_i)^2}&lt;/script&gt;&lt;h5 id=&quot;2-Jaccard-Distance-Our-Importance-Here&quot;&gt;&lt;a href=&quot;#2-Jaccard-Distance-Our-Importance-Here&quot; class=&quot;headerlink&quot; title=&quot;(2) Jaccard Distance (Our Importance Here)&quot;&gt;&lt;/a&gt;(2) Jaccard Distance (Our Importance Here)&lt;/h5&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;Jaccard \: Similarity: JS(A,B) = \frac{|A \cap B|}{|A \cup B|} = \frac{|A \cap B|}{|A| + |B| - |A \cap B|}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;Jaccard \: Distance: JD(A,B) = 1 - J(A,B) = \frac{|A \cup B| - |A \cap B|}{|A \cup B|}&lt;/script&gt;&lt;p&gt;For example, Consider A = {0, 1, 2, 3, 6} and B = {0, 1, 3, 5, 7, 9}&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;JS(A,B) = \frac{|A \cap B|}{|A \cup B|} = \frac{\{0,1,3\}}{\{0,1,2,3,5,6,7,9\}} = \frac{3}{8}&lt;/script&gt;&lt;h5 id=&quot;3-Cosine-Distance&quot;&gt;&lt;a href=&quot;#3-Cosine-Distance&quot; class=&quot;headerlink&quot; title=&quot;(3) Cosine Distance&quot;&gt;&lt;/a&gt;(3) Cosine Distance&lt;/h5&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;Cosine \: Similarity=\cos(\theta )=\frac{\vec{A} \cdot \vec{B}}{\|\vec{A} \|\|\vec{B}\|} = \frac{\sum\limits_{i=1}^{n}{A_{i}B_{i}}}{\sqrt{\sum\limits_{i=1}^{n}{A_{i}^{2}}}\sqrt{\sum\limits_{i=1}^{n}{B_{i}^{2}}}}&lt;/script&gt;&lt;h5 id=&quot;4-Edit-Distance&quot;&gt;&lt;a href=&quot;#4-Edit-Distance&quot; class=&quot;headerlink&quot; title=&quot;(4) Edit Distance&quot;&gt;&lt;/a&gt;(4) Edit Distance&lt;/h5&gt;&lt;p&gt;The Edit Distance is a way of quantifying how dissimilar two strings (e.g., words) are to one another by &lt;strong&gt;counting the minimum number of operations required to transform one string into the other.&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;5-Hamming-Distance&quot;&gt;&lt;a href=&quot;#5-Hamming-Distance&quot; class=&quot;headerlink&quot; title=&quot;(5) Hamming Distance&quot;&gt;&lt;/a&gt;(5) Hamming Distance&lt;/h5&gt;&lt;p&gt;The Hamming Distance between two strings of equal length is the number of positions at which the corresponding symbols are different.&lt;/p&gt;
&lt;h4 id=&quot;2-3-2-Shingling&quot;&gt;&lt;a href=&quot;#2-3-2-Shingling&quot; class=&quot;headerlink&quot; title=&quot;2.3.2 Shingling&quot;&gt;&lt;/a&gt;2.3.2 Shingling&lt;/h4&gt;&lt;p&gt;We are going to use &lt;strong&gt;Jaccard Similarity&lt;/strong&gt; to determine when two web pages are near duplicates. The elements we are comparing are shingles. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shingle&lt;/strong&gt; is a contiguous subsequence of words in a document. &lt;/p&gt;
&lt;p&gt;Use S(d, k) to represent the set of shingles of a document d of length k. Then for a document containing text: “a rose is a rose is a rose”, S(d, 4) = {“a rose is a”, “rose is a rose”, “is a rose is”, “a rose is a”, “rose is a rose”}.&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;Resemblance(A, B) = JS(A, B) = \frac{|S(A, k) \cap S(B, k)|}{|S(A, k) \cup S(B, k)|}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;Containment(A, B)  = \frac{|S(A, k) \cap S(B, k)|}{|S(A, k)|}&lt;/script&gt;&lt;p&gt;So to test whether two pages are near identical, we could:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Compute the k-shingles of the two pages, get two sets A and B&lt;/li&gt;
&lt;li&gt;Compute the Jaccard Similarity of the k-shingles, i.e. JS(A, B)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;If JS(A, B) &amp;gt;= 0.9 (or other threshold we set), regard the two pages as near identical.&lt;/p&gt;
&lt;p&gt;To speed up the calculation process for JS, we may &lt;font color=&quot;red&quot;&gt;&lt;strong&gt;map computed shingles into numbers (fingerprints)&lt;/strong&gt;&lt;/font&gt;,  for example, “is a rose is” =&amp;gt; 921. Then compute &lt;code&gt;JS(fingerprint(A), fingerprint(B))&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;2-3-3-Probabilistic-Approach-for-faster-calculation&quot;&gt;&lt;a href=&quot;#2-3-3-Probabilistic-Approach-for-faster-calculation&quot; class=&quot;headerlink&quot; title=&quot;2.3.3 Probabilistic Approach for faster calculation&quot;&gt;&lt;/a&gt;2.3.3 Probabilistic Approach for faster calculation&lt;/h4&gt;&lt;p&gt;However, comparing fingerprints of all documents still takes too much time since we need to compute Jaccard coefficients pairwise.. So we instead adopt a probabilistic approach to avoid this.&lt;/p&gt;
&lt;p&gt;Following two paragraphs are selected from &lt;strong&gt;&lt;em&gt;Introduction to information retrieval&lt;/em&gt;&lt;/strong&gt;, section 19.6 &lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;“First, we map every shingle into a hash value over a large space, say 64 bits.&lt;br&gt;For $j = 1,2$, let $H(d&lt;em&gt;{j})$ be the corresponding set of 64-bit hash values derived from $S(d&lt;/em&gt;{j}, k)$. We now invoke the following trick to detect document pairs whose sets $H()$ have large Jaccard overlaps. [2]&lt;/p&gt;
&lt;p&gt;Let $\pi$ be a &lt;strong&gt;random permutation&lt;/strong&gt; from the 64-bit integers to the 64-bit integers. Denote by $\Pi(d&lt;em&gt;{j})$ the set of permuted hash values in $H(d&lt;/em&gt;{j})$; thus for each $h \in H(d&lt;em&gt;{j})$, there is a corresponding value $\pi(h) \in \Pi(d&lt;/em&gt;{j})$ (Obviously. This is just a permutation, not removing elements). Let $x&lt;em&gt;{j}^{\pi}$ be the smallest integer in $\Pi(d&lt;/em&gt;{j})$. Then [2]”&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;JS(S(d_{1},k), S(d_{2},k)) = P(x_{1}^{\pi} = x_{2}^{\pi})&lt;/script&gt;&lt;hr&gt;

&lt;p&gt;Intuitively, we apply the same random chosed permutation to both document i and j. So if doc i and j are similar =&amp;gt; Their shingle sets are similar =&amp;gt; After permutation, their smallest intergers have a high chance to be equal. If the two docs are not similar, then after permutation, their smallest intergers have a low chance to be equal.&lt;/p&gt;
&lt;p&gt;We cannot ignore the permutation but just compare their smallest intergers, it could be the smallest intergers are equal but everything else is not.&lt;/p&gt;
&lt;p&gt;We do the above for 200 different permutations to avoid coincidence. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] Cryptographic hash function Retrieved from &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_hash_function&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Cryptographic_hash_function&lt;/a&gt;&lt;br&gt;[2] Manning, Christopher D., Prabhakar Raghavan, and Hinrich Schutze.&lt;br&gt;Introduction to information retrieval. Vol. 1. 2008: Cambridge University&lt;br&gt;Press. &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Lectrue in 01/28/2018&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;In IR, deduplication means recognizing identical and nearly identical web pages and indexing on
    
    </summary>
    
      <category term="Information Retrieval" scheme="http://louie.link/categories/Information-Retrieval/"/>
    
    
  </entry>
  
  <entry>
    <title>(05) Crawlers and Crawling</title>
    <link href="http://louie.link/Information-Retrieval/(05)Crawlers%20and%20Crawling/"/>
    <id>http://louie.link/Information-Retrieval/(05)Crawlers and Crawling/</id>
    <published>2018-01-22T08:00:00.000Z</published>
    <updated>2018-02-24T05:22:23.000Z</updated>
    
    <content type="html">&lt;p&gt;Lectrue in 01/22/2018&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-Web-Crawler&quot;&gt;&lt;a href=&quot;#1-Web-Crawler&quot; class=&quot;headerlink&quot; title=&quot;1. Web Crawler&quot;&gt;&lt;/a&gt;1. Web Crawler&lt;/h3&gt;&lt;p&gt;A Web Crawler (spider), is an Internet bot that &lt;strong&gt;systematically browses&lt;/strong&gt; the World Wide Web, typically for the purpose of Web indexing (web spidering).&lt;/p&gt;
&lt;p&gt;There are something related to web crawling that we need to care about:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Crawling Quality: find the “best” pages&lt;/li&gt;
&lt;li&gt;Crawling Efficiency: avoid dups and near-dups&lt;/li&gt;
&lt;li&gt;Crawling Etiquette (Politeness): not visiting websites too many times in a short time (this may afftect websites’ performance)&lt;/li&gt;
&lt;li&gt;Crawling Coverage: what percent of web to cover?&lt;/li&gt;
&lt;li&gt;Crawling Freshness: pages may change…&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-Basic-Crawling-Process&quot;&gt;&lt;a href=&quot;#2-Basic-Crawling-Process&quot; class=&quot;headerlink&quot; title=&quot;2. Basic Crawling Process&quot;&gt;&lt;/a&gt;2. Basic Crawling Process&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;Start with a “seed” URL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;Fetch and parse a page&lt;ul&gt;
&lt;li&gt;a) Download the page and store it into a database&lt;/li&gt;
&lt;li&gt;b) Parse that page, extract its outgoing URLs&lt;/li&gt;
&lt;li&gt;c) Put the extracted URLs to a &lt;strong&gt;queue&lt;/strong&gt; (So crawling strategy could be BFS, DFS, Best First, …)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;Fetch each URL in the queue and repeat step (2)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For &lt;strong&gt;step 2b&lt;/strong&gt;, notice that &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Links are not just aside in &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag, they could also apear in &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and so on. &lt;/li&gt;
&lt;li&gt;Some &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; do not contain a link, such as &lt;code&gt;&amp;lt;a name=&amp;quot;example&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Some &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; may lead to infinite loop&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;For &lt;strong&gt;step 2c&lt;/strong&gt;, we could use BFS, DFS or some &lt;strong&gt;Heuristic Method&lt;/strong&gt; to re-ordering URLs on the queue: &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Move forward URLs with larger &lt;strong&gt;In-degree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Move forward URLs with larger &lt;strong&gt;PageRank&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-Some-chanllenges-for-crawling&quot;&gt;&lt;a href=&quot;#3-Some-chanllenges-for-crawling&quot; class=&quot;headerlink&quot; title=&quot;3. Some chanllenges for crawling:&quot;&gt;&lt;/a&gt;3. Some chanllenges for crawling:&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Malicious pages (spam, &lt;strong&gt;crawler trap&lt;/strong&gt; such as infinite loop or visiting a page over and over again due to &lt;code&gt;SessionID&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Latency and bandwidth&lt;/li&gt;
&lt;li&gt;Duplicate pages (This is mainly because of site mirrors)&lt;/li&gt;
&lt;li&gt;Be polite&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;3-1-About-Spams&quot;&gt;&lt;a href=&quot;#3-1-About-Spams&quot; class=&quot;headerlink&quot; title=&quot;3.1 About Spams&quot;&gt;&lt;/a&gt;3.1 About Spams&lt;/h4&gt;&lt;p&gt;Three generations of spam are listed (They are all outdated): [1]&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Pages that contain many repeated words to rank higher by word frequency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloaking.&lt;/strong&gt; Two Different pages/content with same URL. One for the search engine/bot and the other for human.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doorway Page.&lt;/strong&gt; Doorway page is a keyword stuffed page which after a few minutes redirects to another page. Clicking on a single URL will open multiple links either simultaneously or sometimes later. Mostly you might experience these techniques live when going through any movie downloads (in a pirated way). Best example for this is: torrentz.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;3-2-About-Crawler-Trap-SessionID-2&quot;&gt;&lt;a href=&quot;#3-2-About-Crawler-Trap-SessionID-2&quot; class=&quot;headerlink&quot; title=&quot;3.2 About Crawler Trap - SessionID [2]&quot;&gt;&lt;/a&gt;3.2 About Crawler Trap - SessionID [2]&lt;/h4&gt;&lt;p&gt;A &lt;strong&gt;spider trap&lt;/strong&gt; is when a spider re-spiders the same page over and over again, you can compare it to a maze (labyrinth).&lt;/p&gt;
&lt;p&gt;The most known spider trap is &lt;strong&gt;Session ID’s&lt;/strong&gt;, a Session ID is often used to keep track&lt;br&gt;of the visitors, and some sites puts a unique ID in the URL: An example is &lt;code&gt;www.webmasterworld.com/page.php?id=264684413484654&lt;/code&gt;&lt;br&gt;Each user gets a unique ID and it’s often requested from each page.&lt;br&gt;The problem here is &lt;strong&gt;when Googlebot comes to the page, it spiders the page and&lt;br&gt;then leaves, it comes back to another page and it finds a link to the same page but since it has been given a different session id now, the link shows up as another URL.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;This is one of the reasons why Googlebot is very very carefully when it spiders pages which uses the querystring “ID=”. &lt;/p&gt;
&lt;p&gt;See more: &lt;a href=&quot;https://www.webmasterworld.com/forum3/9213.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Googlebot: Deepbot and Freshbot FAQ and Information&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-Robots-txt&quot;&gt;&lt;a href=&quot;#4-Robots-txt&quot; class=&quot;headerlink&quot; title=&quot;4. Robots.txt&quot;&gt;&lt;/a&gt;4. Robots.txt&lt;/h3&gt;&lt;p&gt;Web site owners can use the /robots.txt file to give instructions about their site to web robots; this is called The &lt;strong&gt;Robots Exclusion Protocol&lt;/strong&gt;. [3]&lt;/p&gt;
&lt;p&gt;Be aware that this is a protocol and &lt;strong&gt;can be ignored by crawler.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To use robots.txt, place it in the root directory. An exampe is: &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# robots.txt for http://www.example.com/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;User-agent: *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Disallow: /cyberworld/map/ # This is an infinite virtual URL space&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Disallow: /tmp/ # these will soon disappear&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Disallow: /foo.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;See more about robots.txt &lt;a href=&quot;http://www.robotstxt.org/robotstxt.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;



&lt;p&gt;Web is a graph, not a tree, so we have to detect &lt;strong&gt;pages&lt;/strong&gt; and &lt;strong&gt;URLs&lt;/strong&gt; we’ve already visited to &lt;strong&gt;avoid duplication.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-Avoid-duplicate-URLs&quot;&gt;&lt;a href=&quot;#5-Avoid-duplicate-URLs&quot; class=&quot;headerlink&quot; title=&quot;5 Avoid duplicate URLs&quot;&gt;&lt;/a&gt;5 Avoid duplicate URLs&lt;/h3&gt;&lt;p&gt;To avoid duplicate URLs, we:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Normalize URLs;&lt;/li&gt;
&lt;li&gt;Determine whetehr a URL has already been seen.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;5-1-Normalizing-URLs&quot;&gt;&lt;a href=&quot;#5-1-Normalizing-URLs&quot; class=&quot;headerlink&quot; title=&quot;5.1 Normalizing URLs&quot;&gt;&lt;/a&gt;5.1 Normalizing URLs&lt;/h4&gt;&lt;p&gt;Normalizing is important. For example, &lt;code&gt;http://www.google.com&lt;/code&gt;, &lt;code&gt;https://www.google.com&lt;/code&gt;, &lt;code&gt;google.com&lt;/code&gt; all point to the same page, but they have different hashcode. &lt;/p&gt;
&lt;p&gt;Some ways to normalize URLs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Converting the scheme and host to lower case. &lt;code&gt;HTTP://www.Example.com/&lt;/code&gt; → &lt;code&gt;http://www.example.com/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Capitalizing letters in escape sequences. &lt;code&gt;http://www.example.com/a%c2%b1b&lt;/code&gt; → &lt;code&gt;http://www.example.com/a%C2%B1b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Decoding percent-encoded octets of unreserved characters. &lt;code&gt;http://www.example.com/%7Eusername/&lt;/code&gt; → &lt;code&gt;http://www.example.com/~username/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Removing the default port. &lt;code&gt;http://www.example.com:80/bar.html&lt;/code&gt; → &lt;code&gt;http://www.example.com/bar.html&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;See more: &lt;a href=&quot;https://en.wikipedia.org/wiki/URL_normalization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;URL normalization&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-2-Determine-whetehr-a-URL-has-already-been-seen&quot;&gt;&lt;a href=&quot;#5-2-Determine-whetehr-a-URL-has-already-been-seen&quot; class=&quot;headerlink&quot; title=&quot;5.2 Determine whetehr a URL has already been seen&quot;&gt;&lt;/a&gt;5.2 Determine whetehr a URL has already been seen&lt;/h4&gt;&lt;p&gt;Two ways to determining whetehr a URL has already been seen:&lt;/p&gt;
&lt;h5 id=&quot;1-Hash-on-host-and-Trie-on-path&quot;&gt;&lt;a href=&quot;#1-Hash-on-host-and-Trie-on-path&quot; class=&quot;headerlink&quot; title=&quot;(1) Hash(on host) and Trie(on path)&quot;&gt;&lt;/a&gt;(1) Hash(on host) and Trie(on path)&lt;/h5&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Hash&lt;/strong&gt; on host/domain name&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;trie&lt;/strong&gt; to store and check paths. Nodes will be like “/cs”, “/viterbi”. Put a symbol “$” at the end of each word to make them different from almost identical elements.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;For n URLs and at most k branches each layer, time complexity of determining whetehr a URL has been seen is $O(log_k{n})$ (Tree height).&lt;/p&gt;
&lt;p&gt;If we have a huge amount of URLs, we need to use distributed systems, like consistent hashing to map similar URL to same machine. See more from &lt;a href=&quot;https://loveforprogramming.quora.com/Distributed-Systems-Part-1-A-peek-into-consistent-hashing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Distributed Systems Part-1: A peek into consistent hashing!&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;2-Use-Delta-between-the-current-and-previous-URLs-in-sorted-URLs&quot;&gt;&lt;a href=&quot;#2-Use-Delta-between-the-current-and-previous-URLs-in-sorted-URLs&quot; class=&quot;headerlink&quot; title=&quot;(2) Use $\Delta$ between the current and previous URLs in sorted URLs&quot;&gt;&lt;/a&gt;(2) Use $\Delta$ between the current and previous URLs in sorted URLs&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sort URLs lexicographically&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;Store them as a &lt;strong&gt;delta-encoded&lt;/strong&gt; text file. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this way, entries are stored as the difference $\Delta$ between the current and previous URL. Advanges of this method are that we could use binary search and required storage is reduced. But notice that restoring actual URL takes more time since we need to apply all $\Delta$s to the initial URL.&lt;/p&gt;
&lt;h3 id=&quot;6-Avoid-duplicate-Pages&quot;&gt;&lt;a href=&quot;#6-Avoid-duplicate-Pages&quot; class=&quot;headerlink&quot; title=&quot;6. Avoid duplicate Pages&quot;&gt;&lt;/a&gt;6. Avoid duplicate Pages&lt;/h3&gt;&lt;p&gt;This will be disscussed in next artical (Deduplication)&lt;/p&gt;
&lt;h3 id=&quot;7-Multi-Threaded-Crawling-amp-Distributed-Model&quot;&gt;&lt;a href=&quot;#7-Multi-Threaded-Crawling-amp-Distributed-Model&quot; class=&quot;headerlink&quot; title=&quot;7. Multi-Threaded Crawling &amp;amp; Distributed Model&quot;&gt;&lt;/a&gt;7. Multi-Threaded Crawling &amp;amp; Distributed Model&lt;/h3&gt;&lt;p&gt;Three strategies of Coordination of Distributed Crawling&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Independent&lt;/li&gt;
&lt;li&gt;Dynamic Assignment: A central coordinator dynamically divides the web and assigns partitions. &lt;/li&gt;
&lt;li&gt;Static Assignment: Web is partitioned and assigned without a central coordinator before the crawl starts&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Links from one partition to another in Static Assignment can be handled:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Firewall mode: Processes do not follow any inter-partition link, but this actually works not bad -&amp;gt; good coverage with low cost&lt;/li&gt;
&lt;li&gt;Cross-over mode&lt;/li&gt;
&lt;li&gt;Exchange mode&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;8-Freshness&quot;&gt;&lt;a href=&quot;#8-Freshness&quot; class=&quot;headerlink&quot; title=&quot;8. Freshness&quot;&gt;&lt;/a&gt;8. Freshness&lt;/h3&gt;&lt;p&gt;Web pages could be created, updated and deleted, so we need to periodically check crawled pages to see if there is any change. To do so, check &lt;code&gt;Last-Modified&lt;/code&gt; response in HTTP header. &lt;/p&gt;
&lt;p&gt;Be aware that when a page changes either at a low frequency or high frequency, we should not visit it too often. Fot the latter case, if a page changes very frequently, even if visit with short time interval, we still cannot guarantee it’s fresh. In fact, a way to improve freshness is to penalize the elements that change too often. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Front Queue and Back Queue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] What is the exact difference between cloaking and doorway pages? Retrieved from &lt;a href=&quot;https://www.quora.com/What-is-the-exact-difference-between-cloaking-and-doorway-pages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.quora.com/What-is-the-exact-difference-between-cloaking-and-doorway-pages&lt;/a&gt;&lt;br&gt;[2] Googlebot: Deepbot and Freshbot FAQ and Information. Retrieved from &lt;a href=&quot;https://www.webmasterworld.com/forum3/9213.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.webmasterworld.com/forum3/9213.htm&lt;/a&gt;&lt;br&gt;[3] About /robots.txt. Retrieved from &lt;a href=&quot;http://www.robotstxt.org/robotstxt.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.robotstxt.org/robotstxt.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Lectrue in 01/22/2018&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;1-Web-Crawler&quot;&gt;&lt;a href=&quot;#1-Web-Crawler&quot; class=&quot;headerlink&quot; title=&quot;1. Web Crawler&quot;&gt;&lt;/a&gt;1. W
    
    </summary>
    
      <category term="Information Retrieval" scheme="http://louie.link/categories/Information-Retrieval/"/>
    
    
  </entry>
  
  <entry>
    <title>(04) Search Engine Evaluation</title>
    <link href="http://louie.link/Information-Retrieval/(04)SearchEngineEvaluation/"/>
    <id>http://louie.link/Information-Retrieval/(04)SearchEngineEvaluation/</id>
    <published>2018-01-17T08:00:00.000Z</published>
    <updated>2018-02-24T05:41:44.000Z</updated>
    
    <content type="html">&lt;p&gt;Lectrue in 01/17/2018&lt;/p&gt;
&lt;h2 id=&quot;1-Precision-and-Recall&quot;&gt;&lt;a href=&quot;#1-Precision-and-Recall&quot; class=&quot;headerlink&quot; title=&quot;1. Precision and Recall&quot;&gt;&lt;/a&gt;1. Precision and Recall&lt;/h2&gt;&lt;p&gt;Machine Learning on Coursera [Week6 -&amp;gt; error-metrics-for-skewed-classes]:&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;PC \ AC&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;True Positive&lt;/td&gt;
&lt;td&gt;False Positive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;False Negataive&lt;/td&gt;
&lt;td&gt;True Negataive&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;PC is Predicted Class, AC is Actual Class.&lt;/strong&gt;&lt;br&gt;So, True Positive means for a data record whose class is 1 (positive), we predict is as 1. If we predict such data as 0, then this is False Positive.&lt;/p&gt;
&lt;p&gt;In Information Retrieval, this form can be defined as:&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Relevant&lt;/th&gt;
&lt;th&gt;Non-relevant&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Retrieved&lt;/td&gt;
&lt;td&gt;True Positive (TP)&lt;/td&gt;
&lt;td&gt;False Positive (FP)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Not Retrieved&lt;/td&gt;
&lt;td&gt;False Negataive (FN)&lt;/td&gt;
&lt;td&gt;True Negataive (TN)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;For example, if a retrieved page is relevant, then this is True Positive; if a retrieved page is not relevant, then this is False Positive. Retrieving this page means we predict it as positive, but this prediction may be true or may be false.&lt;/p&gt;
&lt;p&gt;After defining these, we could define precesion and recall:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;Precision = \frac{relevant \: items \: retrieved}{all \: \textbf{retrieved} \: items} = \frac{TP}{TP + FP}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;Recall = \frac{relevant \: items \: retrieved}{all \: \textbf{relevant}  \: items} = \frac{TP}{TP + FN}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;Accuracy  = \frac{all \: relevant \: items}{all \: items} = \frac{TP + TN}{TP + FN + FP + TN}&lt;/script&gt;&lt;p&gt;For web applications, &lt;strong&gt;Precision is more important than Recall&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We could also use &lt;strong&gt;Set Notation&lt;/strong&gt; to represent precesion and recall:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;A is set of relevant documents&lt;/li&gt;
&lt;li&gt;B is set of retrieved documents&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Relevant&lt;/th&gt;
&lt;th&gt;Non-relevant&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Retrieved&lt;/td&gt;
&lt;td&gt;$A \cap B$&lt;/td&gt;
&lt;td&gt;$\bar{A} \cap B$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Not Retrieved&lt;/td&gt;
&lt;td&gt;$A \cap \bar{B}$&lt;/td&gt;
&lt;td&gt;$\bar{A} \cap \bar{B}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;Precision = \frac{relevant \: items \: retrieved}{all \: \textbf{retrieved} \: items} = \frac{A \cap B}{B}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;Recall = \frac{relevant \: items \: retrieved}{all \: \textbf{relevant}  \: items} = \frac{A \cap B}{A}&lt;/script&gt;&lt;p&gt;Recall is diﬃcult to measure on the web since we do not know really how many items are relevant.&lt;/p&gt;
&lt;p&gt;By empirical confirmation (not theorem), &lt;strong&gt;precision decreases as either the number of docs retrieved (or recall) increases.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.cos.myqcloud.com/blog_image/recommeder_system/precision%26recall_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-Harmonic-Mean-and-F-Measure&quot;&gt;&lt;a href=&quot;#2-Harmonic-Mean-and-F-Measure&quot; class=&quot;headerlink&quot; title=&quot;2. Harmonic Mean and F Measure&quot;&gt;&lt;/a&gt;2. Harmonic Mean and F Measure&lt;/h2&gt;&lt;p&gt;Pythagorean Means:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Arithmetic Mean&lt;/li&gt;
&lt;li&gt;Geometric Mean&lt;/li&gt;
&lt;li&gt;Harmonic Mean&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Harmonic-Mean&quot;&gt;&lt;a href=&quot;#Harmonic-Mean&quot; class=&quot;headerlink&quot; title=&quot;Harmonic Mean&quot;&gt;&lt;/a&gt;Harmonic Mean&lt;/h3&gt;&lt;p&gt;The &lt;strong&gt;Harmonic Mean tends strongly toward the least element of the list&lt;/strong&gt; making it useful in analyzing search engine results&lt;/p&gt;
&lt;p&gt;As a simple example, the harmonic mean of 1, 4, and 4 is 2, tends toward the least element 1.&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;HarmonicMean(1,4,4) = \left(\frac{1^{-1}+4^{-1}+4^{-1}}{3}\right)^{-1}=\frac{3}{\frac{1}{1}+\frac{1}{4}+\frac{1}{4}}=\frac{3}{1.5}=2&lt;/script&gt;&lt;h3 id=&quot;F-score&quot;&gt;&lt;a href=&quot;#F-score&quot; class=&quot;headerlink&quot; title=&quot;F-score&quot;&gt;&lt;/a&gt;F-score&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;F-score&lt;/strong&gt; (F1-score) is the harmonic mean of the precision and the recall. &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;F = \left(\frac{P^{-1}+R^{-1}}{2}\right)^{-1}=\frac{2}{\frac{1}{P}+\frac{1}{R}}=\frac {2PR}{P+R}&lt;/script&gt;&lt;p&gt;A more general form of F-score is:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;F =\frac{(\beta^2+1)PR}{\beta^2P+R}&lt;/script&gt;&lt;p&gt;$\beta$ is a parameter that controls the relative importance of recall and precision, $\beta = 1$ is F1-score.&lt;/p&gt;
&lt;h2 id=&quot;3-Mean-Average-Precision&quot;&gt;&lt;a href=&quot;#3-Mean-Average-Precision&quot; class=&quot;headerlink&quot; title=&quot;3. Mean Average Precision&quot;&gt;&lt;/a&gt;3. Mean Average Precision&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Mean average precision (MAP)&lt;/strong&gt; for a &lt;strong&gt;set&lt;/strong&gt; of queries is the &lt;strong&gt;mean&lt;/strong&gt; of the &lt;strong&gt;average precision scores for each query&lt;/strong&gt;. [wikipedia]&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;MAP = \frac{\sum_{q=1}^Q AveP(q)}{Q} \!&lt;/script&gt;&lt;p&gt;where Q is the number of queries.&lt;/p&gt;
&lt;p&gt;For example, there are two queries, query1 and query2.&lt;/p&gt;
&lt;p&gt;For &lt;strong&gt;query1&lt;/strong&gt;, there is a relavant documents {a,b,c,d,e}. Calculate Recall / Precision at Fixed Positions, use 1 for revalent document and 0 for irrevanlent. &lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Ranking#1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Precision&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.43&lt;/td&gt;
&lt;td&gt;0.38&lt;/td&gt;
&lt;td&gt;0.44&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recall&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.6&lt;/td&gt;
&lt;td&gt;0.6&lt;/td&gt;
&lt;td&gt;0.6&lt;/td&gt;
&lt;td&gt;0.8&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Average Precision for query1 is $\frac{1.0 + 0.67 + 0.5 + 0.44 + 0.5}{5} = 0.62$&lt;/p&gt;
&lt;p&gt;For &lt;strong&gt;query2&lt;/strong&gt;, there is a relavant documents {f,g,h}. Calculate Recall / Precision at Fixed Positions, use 1 for revalent document and 0 for irrevanlent. &lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Ranking#1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Precision&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.33&lt;/td&gt;
&lt;td&gt;0.25&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.33&lt;/td&gt;
&lt;td&gt;0.43&lt;/td&gt;
&lt;td&gt;0.38&lt;/td&gt;
&lt;td&gt;0.33&lt;/td&gt;
&lt;td&gt;0.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recall&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;0.33&lt;/td&gt;
&lt;td&gt;0.33&lt;/td&gt;
&lt;td&gt;0.33&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Average Precision for query1 is $\frac{0.5 + 0.4 + 0.43}{3} = 0.44$&lt;/p&gt;
&lt;p&gt;So in this case, MAP = $\frac{0.62 + 0.44}{2} = 0.53$&lt;/p&gt;
&lt;p&gt;Notice that Precesion and Recall are based on retreived relevant items, which means human relavance accessments are needed. And there are just relavant and irrelavant, results are bianry, so how about something in between? &lt;/p&gt;
&lt;h2 id=&quot;4-Discounted-Cumulative-Gain&quot;&gt;&lt;a href=&quot;#4-Discounted-Cumulative-Gain&quot; class=&quot;headerlink&quot; title=&quot;4. Discounted Cumulative Gain&quot;&gt;&lt;/a&gt;4. Discounted Cumulative Gain&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Discounted Cumulative Gain (DCG)&lt;/strong&gt; measures the usefulness, or gain, of a document &lt;strong&gt;based on its position in the result list.&lt;/strong&gt; The gain is accumulated from the top of the result list to the bottom, with the gain of each result discounted at lower ranks. [1]&lt;/p&gt;
&lt;p&gt;The Premise of DCG is that highly relavant documents appearing lower in a search result list should be &lt;strong&gt;penalized&lt;/strong&gt; as the graded relevance value is reduced logarithmically proportional to the position of the result. [2]&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;CG and Discounted CG&lt;/strong&gt; accumulated at a particular rank position p are defined as &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;CG_{p}=\sum _{i=1}^{p}rel_{i}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;DCG_{p}=rel_{1} + \sum_{i=2}^{p}\frac{rel_i}{\log _{2}i}&lt;/script&gt;&lt;p&gt;where $rel_{i}$ is the graded relevance of the result at position i.&lt;/p&gt;
&lt;h2 id=&quot;5-A-B-Testing&quot;&gt;&lt;a href=&quot;#5-A-B-Testing&quot; class=&quot;headerlink&quot; title=&quot;5. A/B Testing&quot;&gt;&lt;/a&gt;5. A/B Testing&lt;/h2&gt;&lt;p&gt;A/B testing is a way to compare two versions of a single variable typically by testing a subject’s response to variable A against variable B, and determining which of the two variables is more effective.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1]  Kalervo Jarvelin, Jaana Kekalainen: Cumulated gain-based evaluation of IR techniques. ACM Transactions on Information Systems 20(4), 422–446 (2002)&lt;br&gt;[2] Ceri S, Bozzon A, Brambilla M, Della Valle E, Fraternali P, Quarteroni S: The Information Retrieval Process. Web Information Retrieval. 2013, Heidelberg: Springer&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Lectrue in 01/17/2018&lt;/p&gt;
&lt;h2 id=&quot;1-Precision-and-Recall&quot;&gt;&lt;a href=&quot;#1-Precision-and-Recall&quot; class=&quot;headerlink&quot; title=&quot;1. Precision and Re
    
    </summary>
    
      <category term="Information Retrieval" scheme="http://louie.link/categories/Information-Retrieval/"/>
    
    
  </entry>
  
  <entry>
    <title>(01-03) Search Engine Basics and Characterizing the Web</title>
    <link href="http://louie.link/Information-Retrieval/(01-03)SearchEngineBasics/"/>
    <id>http://louie.link/Information-Retrieval/(01-03)SearchEngineBasics/</id>
    <published>2018-01-08T08:00:00.000Z</published>
    <updated>2018-02-24T05:24:52.000Z</updated>
    
    <content type="html">&lt;p&gt;Lectrue in 01/08/2018 &amp;amp; 01/10/2018&lt;/p&gt;
&lt;h3 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1. Introduction&quot;&gt;&lt;/a&gt;1. Introduction&lt;/h3&gt;&lt;p&gt;Course Introduction&lt;/p&gt;
&lt;h3 id=&quot;2-Search-Engine-Basics&quot;&gt;&lt;a href=&quot;#2-Search-Engine-Basics&quot; class=&quot;headerlink&quot; title=&quot;2. Search Engine Basics&quot;&gt;&lt;/a&gt;2. Search Engine Basics&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Search Engine&lt;/strong&gt; usually refers to a Web Search Engine. There are also other kind of SE, such as Enterprise Search Engines (search on intranets) and Personal Search Engines.&lt;/p&gt;
&lt;h4 id=&quot;Search-Engine’s-Major-Elements&quot;&gt;&lt;a href=&quot;#Search-Engine’s-Major-Elements&quot; class=&quot;headerlink&quot; title=&quot;Search Engine’s Major Elements&quot;&gt;&lt;/a&gt;Search Engine’s Major Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;The User&lt;/li&gt;
&lt;li&gt;The Query Processor&lt;/li&gt;
&lt;li&gt;The Web&lt;/li&gt;
&lt;li&gt;The Crawler/spider&lt;/li&gt;
&lt;li&gt;The Indexer&lt;/li&gt;
&lt;li&gt;The Ads&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Search Engines mainly index &lt;strong&gt;static&lt;/strong&gt; content. Most dynamic content (such as schedule of a certain flight) is missed. URLs of dynamic contents typically contain a ‘?’ character in it. Some dynamic content includes malicious spider traps (infinite loops)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Deep Web&lt;/strong&gt; are parts of the World Wide Web whose contents are not indexed by standard web search engines for any reason.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Dark Web&lt;/strong&gt; is the World Wide Web content that exists on darknets, overlay networks that use the Internet but require specific software, configurations or authorization to access. The dark web forms a small part of the deep web.&lt;/p&gt;
&lt;h4 id=&quot;User’s-Information-Needs&quot;&gt;&lt;a href=&quot;#User’s-Information-Needs&quot; class=&quot;headerlink&quot; title=&quot;User’s Information Needs&quot;&gt;&lt;/a&gt;User’s Information Needs&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Informational – want to learn about something (~40%)&lt;/li&gt;
&lt;li&gt;Navigational – want to go to that page (~25%)&lt;/li&gt;
&lt;li&gt;Transactional – want to do something (web-mediated) (~35%)&lt;/li&gt;
&lt;li&gt;Gray areas&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-Characterizing-the-Web&quot;&gt;&lt;a href=&quot;#3-Characterizing-the-Web&quot; class=&quot;headerlink&quot; title=&quot;3. Characterizing the Web&quot;&gt;&lt;/a&gt;3. Characterizing the Web&lt;/h3&gt;&lt;h3 id=&quot;Measuring-the-Web&quot;&gt;&lt;a href=&quot;#Measuring-the-Web&quot; class=&quot;headerlink&quot; title=&quot;Measuring the Web&quot;&gt;&lt;/a&gt;Measuring the Web&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;a) How many websites?&lt;/strong&gt;&lt;br&gt;1.8 billion (According to the Netcraft January 2018 Web Server Survey there are 1,805,260,010 websites)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b) How many web pages are there?&lt;/strong&gt;&lt;br&gt;30 trillion unique URLs from Google found in 2012. (told by class, but what I searched was that “The Indexed Web contains at least 4.27 billion pages, see &lt;a href=&quot;http://www.worldwidewebsize.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The size of the World Wide Web (The Internet)&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c) How are they distributed across TLDs (Top-Level Domain) or across countries?&lt;/strong&gt;&lt;br&gt;131.9 million out of 332.4 million belong to .com or about 39.7% by Q4 2017 (see &lt;a href=&quot;https://www.verisign.com/en_US/domain-names/dnib/index.xhtml?section=executive-summary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Verisign Domain Name Industry Brief&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;d) General properties of the Web graph&lt;/strong&gt;&lt;br&gt;In-degree and out-degree distribution follows a power law&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Lectrue in 01/08/2018 &amp;amp; 01/10/2018&lt;/p&gt;
&lt;h3 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1. Introduction&quot;&gt;&lt;
    
    </summary>
    
      <category term="Information Retrieval" scheme="http://louie.link/categories/Information-Retrieval/"/>
    
    
  </entry>
  
  <entry>
    <title>StockSearch[Android]</title>
    <link href="http://louie.link/ProjectImages/StockSearch-Android/"/>
    <id>http://louie.link/ProjectImages/StockSearch-Android/</id>
    <published>2017-11-24T08:00:00.000Z</published>
    <updated>2018-02-07T01:18:48.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;StockSearch-Android&quot;&gt;&lt;a href=&quot;#StockSearch-Android&quot; class=&quot;headerlink&quot; title=&quot;StockSearch - Android&quot;&gt;&lt;/a&gt;StockSearch - Android&lt;/h1&gt;&lt;p&gt;The core function of this project is to query stock details including its current and historical quotes, 8 different indicators and stock news, and displays these data in tabular or chart form. This project is implemented as a website and a android application.&lt;/p&gt;
&lt;h2 id=&quot;APP&quot;&gt;&lt;a href=&quot;#APP&quot; class=&quot;headerlink&quot; title=&quot;APP&quot;&gt;&lt;/a&gt;APP&lt;/h2&gt;&lt;p&gt;Same functionality as the website. &lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/01.png?raw=true&quot; alt=&quot;Home Page&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/02.png?raw=true&quot; alt=&quot;Auto Complete&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Home Page&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Auto Complete&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/03.png?raw=true&quot; alt=&quot;Input Stock Symbol&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/04.png?raw=true&quot; alt=&quot;Stock Details&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Input Stock Symbol&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Stock Details&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/05.png?raw=true&quot; alt=&quot;Stock Price Chart&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/06.png?raw=true&quot; alt=&quot;Change Indicators&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Stock Price Chart&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Change Indicators&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/07.png?raw=true&quot; alt=&quot;Indicator-BBANDS Chart&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/08.png?raw=true&quot; alt=&quot;Stock Historical Price&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Indicator-BBANDS Chart&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Stock Historical Price&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/09.png?raw=true&quot; alt=&quot;Stock News&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/10.png?raw=true&quot; alt=&quot;Facebook Sharing&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Stock News&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Facebook Sharing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/11.png?raw=true&quot; alt=&quot;Sorting&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/12.png?raw=true&quot; alt=&quot;Ordering&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Sorting&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ordering&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/13.png?raw=true&quot; alt=&quot;Auto Refresh - Before&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://github.com/louiehuang/StockSearch/blob/master/App/Images/14.png?raw=true&quot; alt=&quot;Auto Refresh - After&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Auto Refresh - Before&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Auto Refresh - After&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;StockSearch-Android&quot;&gt;&lt;a href=&quot;#StockSearch-Android&quot; class=&quot;headerlink&quot; title=&quot;StockSearch - Android&quot;&gt;&lt;/a&gt;StockSearch - Android&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="ProjectImages" scheme="http://louie.link/categories/ProjectImages/"/>
    
    
  </entry>
  
  <entry>
    <title>StockSearch[WEB]</title>
    <link href="http://louie.link/ProjectImages/StockSearchWEB/"/>
    <id>http://louie.link/ProjectImages/StockSearchWEB/</id>
    <published>2017-11-05T07:00:00.000Z</published>
    <updated>2018-02-07T01:11:29.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;StockSearch-WEB&quot;&gt;&lt;a href=&quot;#StockSearch-WEB&quot; class=&quot;headerlink&quot; title=&quot;StockSearch - WEB&quot;&gt;&lt;/a&gt;StockSearch - WEB&lt;/h1&gt;&lt;p&gt;The core function of this project is to query stock details including its current and historical quotes, 8 different indicators and stock news, and displays these data in tabular or chart form. This project is implemented as a website and a android application.&lt;/p&gt;
&lt;h2 id=&quot;1-Description&quot;&gt;&lt;a href=&quot;#1-Description&quot; class=&quot;headerlink&quot; title=&quot;1. Description&quot;&gt;&lt;/a&gt;1. Description&lt;/h2&gt;&lt;p&gt;Front end is built with Angular4.&lt;/p&gt;
&lt;p&gt;Back end is implemented with Node.js.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tinyurl.com/ybz4tcch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;This project is deployed at AWS Elastic Beanstalk.&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;


&lt;h2 id=&quot;2-Screenshops&quot;&gt;&lt;a href=&quot;#2-Screenshops&quot; class=&quot;headerlink&quot; title=&quot;2. Screenshops&quot;&gt;&lt;/a&gt;2. Screenshops&lt;/h2&gt;&lt;h3 id=&quot;2-1-From-PC&quot;&gt;&lt;a href=&quot;#2-1-From-PC&quot; class=&quot;headerlink&quot; title=&quot;2.1 From PC&quot;&gt;&lt;/a&gt;2.1 From PC&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/stockweb/sample.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/stockweb/sample2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-2-From-Cellphone&quot;&gt;&lt;a href=&quot;#2-2-From-Cellphone&quot; class=&quot;headerlink&quot; title=&quot;2.2 From Cellphone&quot;&gt;&lt;/a&gt;2.2 From Cellphone&lt;/h3&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/stockweb/responsive.jpg&quot; alt=&quot;Homepage&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/stockweb/responsive1.jpg&quot; alt=&quot;Quotes&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Homepage&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Quotes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/stockweb/responsive2.jpg&quot; alt=&quot;Indicators&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/stockweb/responsive3.jpg&quot; alt=&quot;Histrical Price&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Indicators&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Histrical Price&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;StockSearch-WEB&quot;&gt;&lt;a href=&quot;#StockSearch-WEB&quot; class=&quot;headerlink&quot; title=&quot;StockSearch - WEB&quot;&gt;&lt;/a&gt;StockSearch - WEB&lt;/h1&gt;&lt;p&gt;The core funct
    
    </summary>
    
      <category term="ProjectImages" scheme="http://louie.link/categories/ProjectImages/"/>
    
    
  </entry>
  
  <entry>
    <title>Recommender System</title>
    <link href="http://louie.link/ProjectImages/RecommenderSystem/"/>
    <id>http://louie.link/ProjectImages/RecommenderSystem/</id>
    <published>2017-06-01T07:00:00.000Z</published>
    <updated>2018-02-09T03:45:09.000Z</updated>
    
    <content type="html">&lt;p&gt;My thesis and project for Bachelor’s degree - &lt;em&gt;Study and Realization of Movie Recommender System Based on Hybrid Recommendation Algorithm&lt;/em&gt;. And it has been selected as &lt;em&gt;Excellent Graduation Thesis&lt;/em&gt; by CCNU.&lt;/p&gt;
&lt;p&gt;What I did:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Improved prediction accuracy of SVD-type model by infusing demographic features.&lt;/li&gt;
&lt;li&gt;Blended multiple recommendation models by employing different strategies such as GBDT,&lt;br&gt;AdaBoost and RF, and reduced RMSE from 1.1088 to 0.8427 on MovieLens-1M dataset.&lt;/li&gt;
&lt;li&gt;Formulated specific system design pertaining to movie recommender system and realized it based on hybrid recommendation model and J2EE SSH framework. Ratings were obtained&lt;br&gt;from MovieLens and detailed movie information was collected from TMDB.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve deployed &lt;a href=&quot;http://liuyin.site:8080/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a small demo here&lt;/a&gt;. Due to the limitation of the sever, I just used a small dataset (ML-100k) on the website.&lt;/p&gt;
&lt;p&gt;Some screenshots are shown bellow:&lt;/p&gt;
&lt;h3 id=&quot;1-Home-Page&quot;&gt;&lt;a href=&quot;#1-Home-Page&quot; class=&quot;headerlink&quot; title=&quot;1. Home Page&quot;&gt;&lt;/a&gt;1. Home Page&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/recommendersystem/Home.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Bootstrapping-for-new-users&quot;&gt;&lt;a href=&quot;#2-Bootstrapping-for-new-users&quot; class=&quot;headerlink&quot; title=&quot;2. Bootstrapping  for new users&quot;&gt;&lt;/a&gt;2. Bootstrapping  for new users&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/recommendersystem/Bootstrapping.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-Personal-Recommendations&quot;&gt;&lt;a href=&quot;#3-Personal-Recommendations&quot; class=&quot;headerlink&quot; title=&quot;3. Personal Recommendations&quot;&gt;&lt;/a&gt;3. Personal Recommendations&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.file.myqcloud.com/project_image/recommendersystem/Recommendaitons.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;My thesis and project for Bachelor’s degree - &lt;em&gt;Study and Realization of Movie Recommender System Based on Hybrid Recommendation Algori
    
    </summary>
    
      <category term="ProjectImages" scheme="http://louie.link/categories/ProjectImages/"/>
    
    
  </entry>
  
  <entry>
    <title>Logistic回归与梯度下降算法</title>
    <link href="http://louie.link/Recommender-System/Logistic_GradientDescent/"/>
    <id>http://louie.link/Recommender-System/Logistic_GradientDescent/</id>
    <published>2016-12-10T08:00:00.000Z</published>
    <updated>2016-12-25T07:36:01.000Z</updated>
    
    <content type="html">&lt;p&gt;假设数据集有m行(1…m)，每个样本n个特征(1…n): &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;x = (x_{1}, x_{2}, ..., x_{n})&lt;/script&gt;&lt;p&gt;1.定义估计函数:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;h(x) = h_{\theta}(x) = g(\theta_{1} + \theta_{2}x_{2} + ... + \theta_{n}x_{n})&lt;/script&gt;&lt;p&gt;令$x_{1} = 1.0$，则有&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;h(x) = h_{\theta}(x) = g(\theta_{1}x_{1} + \theta_{2}x_{2} + ... + \theta_{n}x_{n}) = g(\theta^{T}x)&lt;/script&gt;&lt;p&gt;g函数使用Sigmoid函数 $\sigma(z) = \frac{1}{1+e^{-z}}$&lt;/p&gt;
&lt;p&gt;参数$θ$，表示各特征的权重&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;2.定义&lt;strong&gt;损失函数&lt;/strong&gt;(loss function) / 错误函数(error function)，描述h函数不好的程度，用J函数表示&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = \frac{1}{2} \sum_{i=1}^{m}(h_{\theta}(x^{(i)}) - y^{(i)})^2&lt;/script&gt;&lt;p&gt;其中y为分类类别，Logistic回归中一般为2类，用0和1表示，概率分别为&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left\{
\begin{aligned}
P(y=1|x;\theta) &amp; =  h_{\theta}(x) \\
P(y=0|x;\theta) &amp; =  1 - h_{\theta}(x) 
\end{aligned}
\right.&lt;/script&gt;&lt;p&gt;分号用于区别参数，当$\theta = \theta$时，样本x分类为1的概率&lt;/p&gt;
&lt;p&gt;使用梯度下降法找到使$J(\theta)$最小的$θ$&lt;/p&gt;
&lt;p&gt;下面就是计算梯度下降的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;随机初始化θ，可以让θ是一个全零的向量&lt;/li&gt;
&lt;li&gt;迭代，如果新的θ能够获得使得J(θ)更小&lt;/li&gt;
&lt;li&gt;如果J(θ)能够继续减小，那么回到2，继续执行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;梯度是函数增长最快的方向（随机上升加上梯度，越接近局部最大值梯度越小，局部最大值点的梯度为0），梯度的负方向是函数下降最快的方向（随机下降减去梯度，越接近局部最小值梯度越小，局部极小值点的梯度为0），对于线性函数，梯度是其斜率。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;对$J(\theta)$求偏导，以对第j个分量求偏导为例：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta) = \frac{1}{2} \sum_{i=1}^{m}(h_{\theta}(x^{(i)}) - y^{(i)})^2&lt;/script&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.cos.myqcloud.com/blog_image/logistic/p1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中 i=1…m，表示样本，j=1…n，表示特征，$x_{j}^{(i)}$表示第i个样本的第j个特征&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;所以&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_{j} := \theta_{j} - \alpha \frac{\partial}{\partial\theta_{j}}J(\theta) = \theta_{j} - \alpha\sum_{i=1}^{m}(h_{\theta}(x^{(i)}) - y^{(i)})x_{j}^{(i)} = \theta_{j} - \alpha \left ( h_{\theta}(x) - y \right ) x_{j}&lt;/script&gt;&lt;p&gt;若用梯度上升（梯度下降最小化损失函数，而梯度上升最大化似然函数），则&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta_{j} := \theta_{j} + \alpha \frac{\partial}{\partial\theta_{j}}J(\theta) = \theta_{j} + \alpha\sum_{i=1}^{m}(y^{(i)} - h_{\theta}(x^{(i)}))x_{j}^{(i)} = \theta_{j} + \alpha \left (y - h_{\theta}(x)\right ) x_{j}&lt;/script&gt;&lt;p&gt;对于输入的训练集x，m个样本，每个样本n个特征值&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;x 
= \begin{bmatrix} x^{(1)} \\ x^{(2)} \\ ... \\ x^{(m)} \end{bmatrix} 
= \begin{bmatrix} x_{1}^{(1)} &amp; x_{2}^{(1)} &amp; ... &amp; x_{n}^{(1)} \\ x_{1}^{(2)} &amp; x_{2}^{(2)} &amp; ... &amp; x_{n}^{(2)} \\ ... \\ x_{1}^{(m)} &amp; x_{2}^{(m)} &amp; ... &amp; x_{n}^{(m)} \end{bmatrix}&lt;/script&gt;&lt;p&gt;y为实际值&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;y = \begin{bmatrix} y^{(1)} \\ y^{(2)} \\ ... \\ y^{(m)} \end{bmatrix}&lt;/script&gt;&lt;p&gt;带求参数$\theta$为&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta = \begin{bmatrix} \theta_{1} \\ \theta_{2} \\ ... \\ \theta_{n} \end{bmatrix}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;h_{\theta}(x) 
= \begin{bmatrix} h_{\theta}(x^{(1)}) \\ h_{\theta}(x^{(2)}) \\ ... \\ h_{\theta}(x^{(m)}) \end{bmatrix}
= \begin{bmatrix} g(\theta_{1}x_{1}^{(1)} + \theta_{2}x_{2}^{(1)} + ... + \theta_{n}x_{n}^{(1)}) \\  g(\theta_{1}x_{1}^{(2)} + \theta_{2}x_{2}^{(2)} + ... + \theta_{n}x_{n}^{(2)}) \\ ... \\ g(\theta_{1}x_{1}^{(m)} + \theta_{2}x_{2}^{(m)} + ... + \theta_{n}x_{n}^{(m)})\end{bmatrix}
= g(x\cdot\theta)&lt;/script&gt;&lt;p&gt;记$E = h_{\theta}(x) - y$&lt;/p&gt;
&lt;p&gt;则&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;E = h_{\theta}(x) - y = g(x\cdot\theta) - y&lt;/script&gt;&lt;p&gt;所以&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gitimage-10031767.cos.myqcloud.com/blog_image/logistic/p2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可得&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{bmatrix} \theta_{1} \\ \theta_{2} \\ ... \\ \theta_{n} \end{bmatrix}
:= \begin{bmatrix} \theta_{1} \\ \theta_{2} \\ ... \\ \theta_{n} \end{bmatrix} - \alpha \cdot \begin{bmatrix} x_{1}^{(1)} + x_{1}^{(2)} + ... + x_{1}^{(m)} \\  x_{2}^{(1)} + x_{2}^{(2)} + ... + x_{2}^{(m)} \\ ... \\ x_{n}^{(1)} + x_{n}^{(2)} + ... + x_{n}^{(m)} \end{bmatrix} \cdot E&lt;/script&gt;&lt;p&gt;也即&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta := \theta - \alpha \cdot x^{T} \cdot E = \theta - \alpha \cdot x^{T} \cdot (g(x\cdot\theta) - y)&lt;/script&gt;&lt;p&gt;若用梯度上升算法（Machine Learning in Action中所使用的），则为:&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta := \theta + \alpha \cdot x^{T} \cdot (y - g(x\cdot\theta))&lt;/script&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-25267728-id-4678802.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机器学习算法之梯度下降法 &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/woxincd/article/details/7040944&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;梯度下降法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blog.chinaunix.net/xmlrpc.php?r=blog/article&amp;amp;uid=9162199&amp;amp;id=4223505&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【机器学习笔记1】Logistic回归总结 &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;假设数据集有m行(1…m)，每个样本n个特征(1…n): &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;x = (x_{1}, x_{2}, ..., x_{n})&lt;/script&gt;&lt;p&gt;1.定义估计函数:&lt;/p&gt;
&lt;script t
    
    </summary>
    
      <category term="Recommender System" scheme="http://louie.link/categories/Recommender-System/"/>
    
    
  </entry>
  
  <entry>
    <title>修正余弦和Pearson相关系数在CF中的应用</title>
    <link href="http://louie.link/Recommender-System/AdjustedCosineSimandPearsoninCF/"/>
    <id>http://louie.link/Recommender-System/AdjustedCosineSimandPearsoninCF/</id>
    <published>2016-11-25T08:00:00.000Z</published>
    <updated>2016-12-25T07:18:37.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-Item-based&quot;&gt;&lt;a href=&quot;#1-Item-based&quot; class=&quot;headerlink&quot; title=&quot;1. Item-based&quot;&gt;&lt;/a&gt;1. Item-based&lt;/h2&gt;&lt;h3 id=&quot;1-1-余弦相似度-cosine-similarity&quot;&gt;&lt;a href=&quot;#1-1-余弦相似度-cosine-similarity&quot; class=&quot;headerlink&quot; title=&quot;1.1 余弦相似度(cosine similarity)&quot;&gt;&lt;/a&gt;1.1 余弦相似度(cosine similarity)&lt;/h3&gt;&lt;p&gt;对于item-based，计算物品相似度，参与计算的是两个物品评分向量（即用户-评分矩阵的列），假设用户-评分矩阵是m*n规模。&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vec{item_i} = \begin{bmatrix} r_{1i} \\ r_{2i} \\ ... \\ r_{mi} \end{bmatrix}, \quad\quad \vec{item_j} = \begin{bmatrix} r_{1j} \\ r_{2j} \\ ... \\ r_{mj} \end{bmatrix}&lt;/script&gt;&lt;p&gt;rui表示用户u对物品i的评分&lt;/p&gt;
&lt;p&gt;余弦定理计算这两个向量的相似度（$cos\theta$），有：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;w_{ij} = \frac{\sum_{u \in U}r_{ui} \cdot r_{uj}}{\sqrt{\sum_{u \in U}r_{ui}^2 \sum_{u \in U}r_{uj}^2}}&lt;/script&gt;&lt;p&gt;U是同时评价过物品i和物品j的用户的交集（用户交集）&lt;/p&gt;
&lt;h3 id=&quot;1-2-修正的余弦相似度-adjusted-cosine-similarity&quot;&gt;&lt;a href=&quot;#1-2-修正的余弦相似度-adjusted-cosine-similarity&quot; class=&quot;headerlink&quot; title=&quot;1.2 修正的余弦相似度(adjusted cosine similarity)&quot;&gt;&lt;/a&gt;1.2 修正的余弦相似度(adjusted cosine similarity)&lt;/h3&gt;&lt;p&gt;物品评分向量的各个分量由不同的用户给出的评分构成，而不同用户的评分尺度可能不同，比如用户u倾向于给高分，用户v倾向于给低分，所以去中心化后可以得到更好的效果，不直接比较$r&lt;em&gt;{ui}$和$r&lt;/em&gt;{vj}$，而是比较$r&lt;em&gt;{ui} - \bar{r_u}$和$r&lt;/em&gt;{vj} - \bar{r_v}$。&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vec i = \begin{bmatrix} r_{1i} - \bar{r_1} \\ r_{2i} - \bar{r_2} \\ ... \\ r_{mi} - \bar{r_m} \end{bmatrix}, \quad\quad \vec j = \begin{bmatrix} r_{1j} - \bar{r_1} \\ r_{2j} - \bar{r_2} \\ ... \\ r_{mj} - \bar{r_m} \end{bmatrix}&lt;/script&gt;&lt;p&gt;修正的余弦相似度：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;w_{ij} = \frac{\sum_{u \in U}(r_{ui} - \bar{r_u}) \cdot ( r_{uj} - \bar{r_u})}{\sqrt{\sum_{u \in U}(r_{ui} - \bar {r_{u}})^2 \sum_{u \in U}(r_{uj} - \bar {r_{u}})^2}}&lt;/script&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;去中心化考虑的是&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;用户u&lt;/strong&gt;&lt;/font&gt;打分的平均值，减去的是$\bar {r_u}$&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-3-Pearson相关系数-Pearson-correlation-coefficient&quot;&gt;&lt;a href=&quot;#1-3-Pearson相关系数-Pearson-correlation-coefficient&quot; class=&quot;headerlink&quot; title=&quot;1.3 Pearson相关系数(Pearson correlation coefficient)&quot;&gt;&lt;/a&gt;1.3 Pearson相关系数(Pearson correlation coefficient)&lt;/h3&gt;&lt;p&gt;两向量的协方差除以它们标准差的积：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\rho_{XY} = \frac{cov(X, Y)}{\sqrt{D(X)}\sqrt{D(Y)}} = \frac{\frac{1}{N - 1}\sum_{i=1}^{N}(X_i - \bar X)(Y_i - \bar Y)}{\sqrt{\frac{1}{N-1}\sum_{i=1}^{n}(x_i - \bar x)^2}\sqrt{\frac{1}{N-1}\sum_{i=1}^{n}(y_i - \bar y)^2}} = \frac{\sum_{i=1}^{N}(X_i - \bar X)(Y_i - \bar Y)}{\sqrt{\sum_{i=1}^{n}(x_i - \bar x)^2}\sqrt{\sum_{i=1}^{n}(y_i - \bar y)^2}}&lt;/script&gt;&lt;p&gt;在item-based里，公式为：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;w_{ij} = \frac{\sum_{u \in U}(r_{ui} - \bar{r_i}) \cdot ( r_{uj} - \bar{r_j})}{\sqrt{\sum_{u \in U}(r_{ui} - \bar {r_{i}})^2 \sum_{u \in U}(r_{uj} - \bar {r_{j}})^2}}&lt;/script&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;去中心化考虑的是&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;物品i&lt;/strong&gt;&lt;/font&gt;被打分的平均值（参与计算的是两个物品向量），减去的是$\bar {r_i}$ &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-User-based&quot;&gt;&lt;a href=&quot;#2-User-based&quot; class=&quot;headerlink&quot; title=&quot;2. User-based&quot;&gt;&lt;/a&gt;2. User-based&lt;/h2&gt;&lt;h3 id=&quot;2-1-修正的余弦相似度&quot;&gt;&lt;a href=&quot;#2-1-修正的余弦相似度&quot; class=&quot;headerlink&quot; title=&quot;2.1 修正的余弦相似度&quot;&gt;&lt;/a&gt;2.1 修正的余弦相似度&lt;/h3&gt;&lt;p&gt;对于user-based，计算用户相似度，参与计算的是两个用户评分向量（即用户-评分矩阵的行），&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vec{user_u} = \begin{bmatrix} r_{u1}, r_{u2}, ... , r_{un} \end{bmatrix}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vec{user_v} = \begin{bmatrix} r_{v1}, r_{v2}, ... , r_{vn} \end{bmatrix}&lt;/script&gt;&lt;p&gt;因为比较的两个用户u、v可能存在评分尺度不同（这里是参与计算相似度的两个用户，item-based里是共同评价过某一对物品的多个用户），需要去中心化。&lt;/p&gt;
&lt;p&gt;修正的余弦相似度：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;w_{uv} = \frac{\sum_{p \in P}(r_{up} - \bar{r_u}) \cdot ( r_{vp} - \bar{r_v})}{\sqrt{\sum_{p \in P}(r_{up} - \bar {r_{u}})^2 \sum_{p \in P}(r_{vp} - \bar {r_{v}})^2}}&lt;/script&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;去中心化考虑的是仍然是&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;用户u&lt;/strong&gt;&lt;/font&gt;打分的平均值，减去的是$\bar {r_u}$ &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-2-Pearson相关系数&quot;&gt;&lt;a href=&quot;#2-2-Pearson相关系数&quot; class=&quot;headerlink&quot; title=&quot;2.2 Pearson相关系数&quot;&gt;&lt;/a&gt;2.2 Pearson相关系数&lt;/h3&gt;&lt;p&gt;P是用户u和用户v都评价过的物品的交集（物品交集）&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;w_{uv} = \frac{\sum_{p \in P}(r_{up} - \bar{r_u}) \cdot ( r_{vp} - \bar{r_v})}{\sqrt{\sum_{p \in P}(r_{up} - \bar {r_{u}})^2 \sum_{p \in P}(r_{vp} - \bar {r_{v}})^2}}&lt;/script&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;去中心化考虑的是&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;用户u&lt;/strong&gt;&lt;/font&gt;打分的平均值（参与计算的是两个用户向量），减去的是$\bar {r_u}$ &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Item-based&quot;&gt;&lt;a href=&quot;#1-Item-based&quot; class=&quot;headerlink&quot; title=&quot;1. Item-based&quot;&gt;&lt;/a&gt;1. Item-based&lt;/h2&gt;&lt;h3 id=&quot;1-1-余弦相似度-cosine-simila
    
    </summary>
    
      <category term="Recommender System" scheme="http://louie.link/categories/Recommender-System/"/>
    
    
  </entry>
  
  <entry>
    <title>CF代码实现</title>
    <link href="http://louie.link/Recommender-System/CFcode/"/>
    <id>http://louie.link/Recommender-System/CFcode/</id>
    <published>2016-11-22T08:00:00.000Z</published>
    <updated>2016-12-25T07:24:57.000Z</updated>
    
    <content type="html">&lt;p&gt;基于物品的协同过滤&lt;/p&gt;
&lt;h3 id=&quot;1-推荐系统实战-项亮-：&quot;&gt;&lt;a href=&quot;#1-推荐系统实战-项亮-：&quot; class=&quot;headerlink&quot; title=&quot;1. 推荐系统实战(项亮)：&quot;&gt;&lt;/a&gt;1. 推荐系统实战(项亮)：&lt;/h3&gt;&lt;h4 id=&quot;1-1-加载数据集&quot;&gt;&lt;a href=&quot;#1-1-加载数据集&quot; class=&quot;headerlink&quot; title=&quot;1.1 加载数据集&quot;&gt;&lt;/a&gt;1.1 加载数据集&lt;/h4&gt;&lt;p&gt;构造训练集train，加载u3.base，是一个嵌套字典&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userId1 ： &amp;#123;itemId1 : rating11, itemId2: rating12, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userId2 ： &amp;#123;itemId1 : rating21, itemId2: rating22, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;... &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;构造测试集test，加载u3.test，同样，是一个嵌套字典&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userId1 ： &amp;#123;itemId1 : rating11, itemId2: rating12, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userId2 ： &amp;#123;itemId1 : rating21, itemId2: rating22, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-2-计算物品相似度矩阵&quot;&gt;&lt;a href=&quot;#1-2-计算物品相似度矩阵&quot; class=&quot;headerlink&quot; title=&quot;1.2 计算物品相似度矩阵&quot;&gt;&lt;/a&gt;1.2 计算物品相似度矩阵&lt;/h4&gt;&lt;h5 id=&quot;1-2-1-计算共现矩阵C&quot;&gt;&lt;a href=&quot;#1-2-1-计算共现矩阵C&quot; class=&quot;headerlink&quot; title=&quot;1.2.1 计算共现矩阵C&quot;&gt;&lt;/a&gt;1.2.1 计算共现矩阵C&lt;/h5&gt;&lt;p&gt;即找出被2个或多个用户同时有过行为(此处为评过分)的物品，计算出共现矩阵可以避免后面在计算相似度的时候求两个物品的交集（很多物品可能没有交集，因而会浪费时间）&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#共现矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C = dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;N = dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; user, items &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; train.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; items.keys():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C.setdefault(i,&amp;#123;&amp;#125;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        N[i] = N.get(i, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; items.keys():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == j:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            C[i][j] = C.get(i, &amp;#123;&amp;#125;).get(j, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#不存在时默认值为0(不存在i时默认C[i]=&amp;#123;&amp;#125;, 不存在j时默认C[i][j]=0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h5 id=&quot;1-2-2-计算相似度矩阵&quot;&gt;&lt;a href=&quot;#1-2-2-计算相似度矩阵&quot; class=&quot;headerlink&quot; title=&quot;1.2.2 计算相似度矩阵&quot;&gt;&lt;/a&gt;1.2.2 计算相似度矩阵&lt;/h5&gt;&lt;p&gt;没有使用评分数据，相似度的计算按照 $W_{ij} = \frac{|N(i)\bigcap N(j)|}{\sqrt(|N(i)||N(j)|}$，|N(i)|是喜欢物品i的用户数，公式代表：喜欢物品i的用户中有多少比例的用户也喜欢物品j&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#计算相似度矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W = dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, related_items &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; C.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j, cij &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; related_items.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        W.setdefault(i,&amp;#123;&amp;#125;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        W[i].setdefault(j,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        W[i][j] = cij / sqrt(N[i] * N[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#W相似度矩阵中，每个物品保留最相似的50个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, related_items &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; W.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tmp = sorted(W[i].items(), key = operator.itemgetter(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), reverse = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    W[i] = dict(tmp) &lt;span class=&quot;comment&quot;&gt;#dict排序后的tmp为list，需要重新转成dict&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h5 id=&quot;1-2-3-获取推荐&quot;&gt;&lt;a href=&quot;#1-2-3-获取推荐&quot; class=&quot;headerlink&quot; title=&quot;1.2.3 获取推荐&quot;&gt;&lt;/a&gt;1.2.3 获取推荐&lt;/h5&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getRecommendation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(train, user_id, W, K, N)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    计算和物品j最相似的K个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rank = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    userRated = train[user_id]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#对user_id有过行为的物品i，找出与i相似度最高的K个物品&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, rui &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; userRated.items(): &lt;span class=&quot;comment&quot;&gt;#物品id和用户u对i的兴趣程度rui，隐返回数据集单一行为，可置1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sortedWi = sorted(W[i].items(), key = operator.itemgetter(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), reverse = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : K]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j, wj &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sortedWi:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; userRated: &lt;span class=&quot;comment&quot;&gt;#已经评价过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rank.setdefault(j, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rank[j] += &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; * wj &lt;span class=&quot;comment&quot;&gt;#rui * wj，隐反馈数据集，如果用户u对i有过行为(假定只有单一行为)，则用户u对i的兴趣度定为1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#排序后返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sorted(rank.items(), key = operator.itemgetter(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), reverse = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)[: N]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-集体智慧编程-Toby-Segaran&quot;&gt;&lt;a href=&quot;#2-集体智慧编程-Toby-Segaran&quot; class=&quot;headerlink&quot; title=&quot;2. 集体智慧编程(Toby Segaran)&quot;&gt;&lt;/a&gt;2. 集体智慧编程(Toby Segaran)&lt;/h3&gt;&lt;h4 id=&quot;2-1-加载数据集&quot;&gt;&lt;a href=&quot;#2-1-加载数据集&quot; class=&quot;headerlink&quot; title=&quot;2.1 加载数据集&quot;&gt;&lt;/a&gt;2.1 加载数据集&lt;/h4&gt;&lt;p&gt;构造用户-物品数据集user_items，加载u.data，是一个嵌套字典&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userId1 ： &amp;#123;itemId1 : rating11, itemId2: rating12, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userId2 ： &amp;#123;itemId1 : rating21, itemId2: rating22, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;构造物品表items，是一个字典&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;itemId1 : title1, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;itemId2 : title2, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-2-计算物品相似度矩阵&quot;&gt;&lt;a href=&quot;#2-2-计算物品相似度矩阵&quot; class=&quot;headerlink&quot; title=&quot;2.2 计算物品相似度矩阵&quot;&gt;&lt;/a&gt;2.2 计算物品相似度矩阵&lt;/h4&gt;&lt;h5 id=&quot;2-2-1-构建物品-用户倒排表&quot;&gt;&lt;a href=&quot;#2-2-1-构建物品-用户倒排表&quot; class=&quot;headerlink&quot; title=&quot;2.2.1 构建物品-用户倒排表&quot;&gt;&lt;/a&gt;2.2.1 构建物品-用户倒排表&lt;/h5&gt;&lt;p&gt;&lt;code&gt;item_users = buildReverseTable(user_items)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h5 id=&quot;2-2-2-计算相似度&quot;&gt;&lt;a href=&quot;#2-2-2-计算相似度&quot; class=&quot;headerlink&quot; title=&quot;2.2.2 计算相似度&quot;&gt;&lt;/a&gt;2.2.2 计算相似度&lt;/h5&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calcItemSimlarity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user_items, n = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    计算物品相似度矩阵, 保存每个物品最相似的n个物品&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    实现中，两物品的评分交集在topNmatches-sim_pearson中计算&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    而实际上很多物品可能没有交集，因而浪费时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    可以在这里先计算物品的共现矩阵C，再遍历C计算相似度，此时sim_pearson中不再求评分交集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    itemSim = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#构建物品-用户倒排表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    item_users = buildReverseTable(user_items)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#计数变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; item_users:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; count % &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;%d / %d&quot;&lt;/span&gt; % (count, len(item_users))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sim = topNMatches(item_users, item, n = n) &lt;span class=&quot;comment&quot;&gt;#默认pearson相关系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        itemSim[item] = sim&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    storeItemSimlarity(itemSim, &lt;span class=&quot;string&quot;&gt;&#39;itemSimilarity.txt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; itemSim&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;topNMatches遍历物品-用户倒排表，返回与物品item最相似的n个物品，相似度使用pearson相关系数计算（def sim_pearson(dataSet, v1, v2)，在此函数中需要先求v1、v2的交集）&lt;/p&gt;
&lt;p&gt;最后pickle存储计算的结果&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;storeItemSimlarity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(itemSim, filename)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pickle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fw = open(filename, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pickle.dump(itemSim, fw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fw.close&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-3-获取推荐&quot;&gt;&lt;a href=&quot;#2-3-获取推荐&quot; class=&quot;headerlink&quot; title=&quot;2.3 获取推荐&quot;&gt;&lt;/a&gt;2.3 获取推荐&lt;/h4&gt;&lt;p&gt;&lt;code&gt;def getRecommendedItems(user_items, itemSim, user):&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为user（id）获取推荐物品&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先从user_items中获取user用户评价过的物品&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历这些物品：&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;对每个物品，从相似度矩阵itemSim中找到与其相似的物品，对用户没有评价过的那些物品，计算其评分与相似度乘积之和score以及相似度之和totalSim&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相除得到预测评分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;降序排序后返回&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getRecommendedItems&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user_items, itemSim, user)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    userRatings = user_items[user]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scores = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    totalSim = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (item, rating) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; userRatings.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(other, similarity) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; itemSim[item]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; other &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; userRatings:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scores.setdefault(other, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            scores[other] += similarity * rating&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            totalSim.setdefault(other, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            totalSim[other] += similarity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rank = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item, score &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; scores.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; totalSim[item] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;comment&quot;&gt;#可能有除0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rank.append((score / totalSim[item], item)) &lt;span class=&quot;comment&quot;&gt;#返回的是(预测评分, 物品id)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# rank = [(score / totalSim[item], items[item]) for item, score in scores.items()]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sorted(rank, reverse = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;基于物品的协同过滤&lt;/p&gt;
&lt;h3 id=&quot;1-推荐系统实战-项亮-：&quot;&gt;&lt;a href=&quot;#1-推荐系统实战-项亮-：&quot; class=&quot;headerlink&quot; title=&quot;1. 推荐系统实战(项亮)：&quot;&gt;&lt;/a&gt;1. 推荐系统实战(项亮)：&lt;/h3&gt;&lt;h4 id=&quot;1-
    
    </summary>
    
      <category term="Recommender System" scheme="http://louie.link/categories/Recommender-System/"/>
    
    
  </entry>
  
  <entry>
    <title>Pearson相关系数</title>
    <link href="http://louie.link/Recommender-System/PearsonCorrCoef/"/>
    <id>http://louie.link/Recommender-System/PearsonCorrCoef/</id>
    <published>2016-11-20T08:00:00.000Z</published>
    <updated>2016-12-21T07:38:29.000Z</updated>
    
    <content type="html">&lt;p&gt;协方差&lt;br&gt;numpy.cov&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;cov(X, Y) = E\left ( (X - E(X))(Y - E(Y)) \right) = E(XY) - E(X)E(Y)&lt;/script&gt;&lt;p&gt;样本协方差&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;cov(X, Y) = \frac{1}{N - 1}\sum_{i=1}^{N}(X_i - \bar X)(Y_i - \bar Y)&lt;/script&gt;&lt;p&gt;除以N-1是为了保证无偏性&lt;/p&gt;
&lt;p&gt;pearson相关系数&lt;br&gt;numpy.corrcoef&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\rho_{XY} = \frac{cov(X, Y)}{\sqrt{D(X)}\sqrt{D(Y)}}&lt;/script&gt;&lt;p&gt;即&lt;br&gt;np.corrcoef(x, y) = np.cov(x, y, &lt;font color=&quot;red&quot;&gt;bias = True&lt;/font&gt;) / (std(x) * std(y))&lt;/p&gt;
&lt;p&gt;std(x)求标准差, var(x)求方差&lt;/p&gt;
&lt;p&gt;np.cov中不指定bias时(bias = False, 无偏)是除以N-1，指定bias为True或1时是除以N&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = [&lt;span class=&quot;number&quot;&gt;-2.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;4.3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y = [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;0.12&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;np.cov(x,y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ &lt;span class=&quot;number&quot;&gt;11.71&lt;/span&gt;      ,  &lt;span class=&quot;number&quot;&gt;-4.286&lt;/span&gt;     ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ &lt;span class=&quot;number&quot;&gt;-4.286&lt;/span&gt;     ,   &lt;span class=&quot;number&quot;&gt;2.14413333&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;np.cov(x,y,bias=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ &lt;span class=&quot;number&quot;&gt;7.80666667&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-2.85733333&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&lt;span class=&quot;number&quot;&gt;-2.85733333&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;1.42942222&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;np.cov(x,y,bias=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;) / (std(x) * std(y))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ &lt;span class=&quot;number&quot;&gt;2.33696686&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-0.85535781&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&lt;span class=&quot;number&quot;&gt;-0.85535781&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;0.42790508&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;np.corrcoef(x,y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;        , &lt;span class=&quot;number&quot;&gt;-0.85535781&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&lt;span class=&quot;number&quot;&gt;-0.85535781&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;        ]])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;矩阵的第i行j列数据表示第i组数与第j组数的相关系数，对角线为1(自己和自己的相关为1，第0行0列除以 (std(x) * std(x))，第1行1列除以 (std(y) * std(y)) )&lt;/p&gt;
&lt;p&gt;pearson相关系数也可以以下列公式计算&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\rho_{XY} = \frac{cov(X, Y)}{\sqrt{D(X)}\sqrt{D(Y)}} = \frac{\frac{1}{N - 1}\sum_{i=1}^{N}(X_i - \bar X)(Y_i - \bar Y)}{\sqrt{\frac{1}{N-1}\sum_{i=1}^{n}(x_i - \bar x)^2}\sqrt{\frac{1}{N-1}\sum_{i=1}^{n}(y_i - \bar y)^2}} = \frac{\sum_{i=1}^{N}(X_i - \bar X)(Y_i - \bar Y)}{\sqrt{\sum_{i=1}^{n}(x_i - \bar x)^2}\sqrt{\sum_{i=1}^{n}(y_i - \bar y)^2}}&lt;/script&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;num = sum((x-mean(x))*(y-mean(y)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dex = sum((x - mean(x))**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)**&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dey = sum((y - mean(y))**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)**&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;denom = dex * dey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;num / denom &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;-0.85535780952279472&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;np.corrcoef有一个参数rowvar，帮助文档对其的解释为:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rowvar&lt;/strong&gt; : int, optional&lt;br&gt;If rowvar is non-zero (default), then each row represents a variable, with observations in the columns. Otherwise, the relationship is transposed: each column represents a variable, while the rows contain observations.&lt;/p&gt;
&lt;p&gt;也就是说，默认的np.corrcoef(x, y)是计算&lt;strong&gt;行向量&lt;/strong&gt;的相似度，x、y都是行向量，如x = [-2.1, -1,  4.3]&lt;br&gt;如果计算&lt;strong&gt;列向量&lt;/strong&gt;的相似度，可以将rowvar的值置为0&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = [&lt;span class=&quot;number&quot;&gt;-2.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;4.3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y = [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;0.12&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Mx = mat(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Mx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;matrix([[&lt;span class=&quot;number&quot;&gt;-2.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1.&lt;/span&gt; ,  &lt;span class=&quot;number&quot;&gt;4.3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;MxT = Mx.T&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;MxT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;matrix([[&lt;span class=&quot;number&quot;&gt;-2.1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;number&quot;&gt;-1.&lt;/span&gt; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [ &lt;span class=&quot;number&quot;&gt;4.3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;My = mat(y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;My&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;matrix([[ &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;  ,  &lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt; ,  &lt;span class=&quot;number&quot;&gt;0.12&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;MyT = My.T&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;MyT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;matrix([[ &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;  ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [ &lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [ &lt;span class=&quot;number&quot;&gt;0.12&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;np.corrcoef(MxT, MyT, rowvar=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;        , &lt;span class=&quot;number&quot;&gt;-0.85535781&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&lt;span class=&quot;number&quot;&gt;-0.85535781&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;        ]])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;协方差&lt;br&gt;numpy.cov&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;cov(X, Y) = E\left ( (X - E(X))(Y - E(Y)) \right) = E(XY) - E(X)E(Y)&lt;/script&gt;&lt;
    
    </summary>
    
      <category term="Recommender System" scheme="http://louie.link/categories/Recommender-System/"/>
    
    
  </entry>
  
  <entry>
    <title>信息熵与分类算法[转]</title>
    <link href="http://louie.link/Recommender-System/Information_entropy/"/>
    <id>http://louie.link/Recommender-System/Information_entropy/</id>
    <published>2016-09-20T07:00:00.000Z</published>
    <updated>2016-11-21T14:53:35.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://gaofeihang.blog.163.com/blog/static/8450828520128139648199/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转载链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在介绍熵之前，先从另一个概念说起：信息量&lt;/p&gt;
&lt;p&gt;世界杯决赛的两支球队中，哪支球队获得了冠军？在对球队实力没有任何了解的情况下，每支球队夺冠的概率都是1/2，&lt;br&gt;所以谁获得冠军这条信息的信息量是 $-log&lt;em&gt;{2}{\frac{1}{2}} = 1$ bit&lt;br&gt;如果信息是四强中的球队谁获得了冠军，它的信息量是 $-log&lt;/em&gt;{2}{\frac{1}{4}} = 2$ bit&lt;/p&gt;
&lt;p&gt;其实这正好对应了计算机对数字的表示，如果用二进制表示，每一位出现0和1的概率都是1/2，所以每一位的信息量是1bit。如果用十六进制表示，每一位出现任意一个符号的概率是1/16，所以每一位能表示 $-log&lt;em&gt;{2} {\frac{1}{16}} = 4$ bit。所以1位十六进制的信息量，和4位二进制信息量是相同的。&lt;br&gt;（求表示2种可能性最少需要几个数，$log&lt;/em&gt;{2}{2} = 1$，求表示4种可能性最少需要几个数，$log_{2}{4} = 2$ …）&lt;/p&gt;
&lt;p&gt;这样就比较好理解另一个经典的例子，英文有26个字母，假设每个字母出现的概率是一样的，每个字母的信息量就是 - log2 1/26 = 4.7；常用的汉字有2500个，每个汉字的信息量是 - log2 1/2500 = 11.3。所以在信息量相同的情况下，使用的汉字要比英文字母要少——这其实就是十六进制和二进制的区别，在这个例子中，apple成了5位26进制的数值，信息量4.7 &lt;em&gt; 5 = 23.5；而苹果成为2位2500进制的数值，信息量11.3 &lt;/em&gt; 2 = 22.6。虽然表示的方式不同，但信息量差不多（这是一个很巧合的例子，仅用于说明信息量的含义，大多数词语都不会这么接近）。&lt;/p&gt;
&lt;p&gt;在实际的情况中，每种可能情况出现的概率并不是相同的，所以熵（entropy）就用来衡量整个系统的平均信息量，其计算公式如下：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;H_{s} = \sum_{i=1}^{n}{p_{i} \cdot I_{e}} = - \sum_{i=1}^{n}{}p_{i} \cdot log_{2}{p_{i}}&lt;/script&gt;&lt;p&gt;（推荐系统中，$p_i = \frac{物品i的流行度}{所有物品流行度之和}$）&lt;/p&gt;
&lt;p&gt;熵是平均信息量，也可以理解为不确定性。例如进行决赛的巴西和南非，假设根据经验判断，巴西夺冠的几率是80%，南非夺冠的几率是20%，则谁能获得冠军的信息量就变为 - 0.8 &lt;em&gt; log2 0.8 - 0.2 &lt;/em&gt; log2 0.2 = 0.257 + 0.464 = 0.721，小于1 bit了。经验减少了判断所需的信息量，消除了不确定性。&lt;/p&gt;
&lt;p&gt;而且通过计算可以发现，巴西夺冠的几率越高，计算出的熵就越小，即越是确定的情况，不确定性越小，信息量越少。如果巴西100%夺冠，那么熵是0，相当于没有任何信息。当两队几率都是50%最难判断，所熵达到最大值1。其实之前的 - log2 1/2 = 1 bit 是简化了的计算过程，其结果也是通过熵的公式来计算的 - 0.5 &lt;em&gt; log2 0.5 - 0.5 &lt;/em&gt; log2 0.5 = 1 bit，计算信息量要综合考虑每种结果的可能性。&lt;/p&gt;
&lt;p&gt;另一个会迷惑的问题是熵会大于1吗？答案当然是肯定的，刚刚计算的最大值为1bit，是因为最终的结果只有两种情况。在有四支球队的时候，其最大值就是 - 0.25 &lt;em&gt; log2 0.25 - 0.25 &lt;/em&gt; log2 0.25 - 0.25 &lt;em&gt; log2 0.25 - 0.25 &lt;/em&gt; log2 0.25 = 2 bit，当四支球队夺冠概率不等的时候，熵会小于2 bit。&lt;/p&gt;
&lt;p&gt;数据挖掘分类问题中构建决策树的算法ID3和C4.5，就是对熵的一个典型的应用。&lt;br&gt;以经典的根据天气判断是否打高尔夫球的例子来说明&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@relation weather.symbolic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@attribute outlook &amp;#123;sunny, overcast, rainy&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@attribute temperature &amp;#123;hot, mild, cool&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@attribute humidity &amp;#123;high, normal&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@attribute windy &amp;#123;TRUE, FALSE&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@attribute play &amp;#123;yes, no&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sunny,hot,high,FALSE,no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sunny,hot,high,TRUE,no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;overcast,hot,high,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rainy,mild,high,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rainy,cool,normal,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rainy,cool,normal,TRUE,no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;overcast,cool,normal,TRUE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sunny,mild,high,FALSE,no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sunny,cool,normal,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rainy,mild,normal,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sunny,mild,normal,TRUE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;overcast,mild,high,TRUE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;overcast,hot,normal,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rainy,mild,high,TRUE,no&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为最终的结果只有yes和no两种，判断是否打高尔夫球所需的信息量（熵、不确定性）是1 bit。构建决策树的过程就是通过各种天气特征，来消除不确定性（使熵减少）。&lt;/p&gt;
&lt;p&gt;在选择分裂属性之前会计算一个初始的熵，但这个值却不是刚才提到的1。因为在只知道Class Label的情况下，是有一些经验上的信息的。如训练集中，有9个yes和5个no，这就好比我们知道在两队的交手记录中巴西获胜过几次，所以由此可以推算出现yes的概率是9/14，出现no的概率是5/14。所以初始的熵为 H-init =  - 9/14 &lt;em&gt; log2 9/14 - 5/14 &lt;/em&gt; log2 5/14 = 0.94。&lt;/p&gt;
&lt;p&gt;属性是如何使熵减少的呢？假设我们选取的是outlook，则通过这个属性可以将训练集划分成3个集合&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sunny,hot,high,FALSE,no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sunny,hot,high,TRUE,no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sunny,mild,high,FALSE,no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sunny,cool,normal,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sunny,mild,normal,TRUE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;overcast,hot,high,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;overcast,cool,normal,TRUE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;overcast,mild,high,TRUE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;overcast,hot,normal,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rainy,mild,high,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rainy,cool,normal,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rainy,cool,normal,TRUE,no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rainy,mild,normal,FALSE,yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rainy,mild,high,TRUE,no&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;某些子集在分割后变得更加纯净了，如当 outlook = overcast 的时候，全部为yes，该子集的熵为0，使得总体的熵（各个子集熵的平均值）减少。&lt;br&gt;H-sunny = - 0.4 &lt;em&gt; log2 0.4 - 0.6 &lt;/em&gt; log2 0.6 = 0.971&lt;br&gt;H-overcast = - 1 &lt;em&gt; log2 1 - 0 = 0&lt;br&gt;H-rainy = - 0.6 &lt;/em&gt; log2 0.6 - 0.4 &lt;em&gt; log2 0.4 = 0.971&lt;br&gt;H-average = 0.971 &lt;/em&gt; 5 / 14 + 0 &lt;em&gt; 4 / 14 + 0.971 &lt;/em&gt; 5 / 14 = 0.694&lt;/p&gt;
&lt;p&gt;初始熵与分割后的总体熵的差值，就是信息增益 InfoGain = H-init - H-average = 0.94 - 0.694 = 0.246&lt;br&gt;相当于获得了有用的信息，使判断出结果所需的信息量减少了。所以ID3算法在每次分割时，都选取信息增益最大的属性，这样使用最少的分支判断就可以得到最终的结果。&lt;/p&gt;
&lt;p&gt;熵表示不确定性，可以衡量混乱程度或纯净度，因此也用作分类或聚类结果的评价标准。类似地，在得到了所划分的n个集合后，分别计算每个集合的熵，公式中的n为集合中类别的个数，pi为第i个类别在该集合中出现的概率。如集合中有4个元素，分别属于4个类别，那么这个集合的熵就是2。之后计算各个集合熵的加权平均值，即是整个划分结果的熵。同理，熵越低表示划分得越准确。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/leoo2sk/archive/2010/09/19/1831151.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于决策树算法的详细介绍&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://gaofeihang.blog.163.com/blog/static/8450828520128139648199/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转载链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在介绍熵之前，先从另一个概
    
    </summary>
    
      <category term="Recommender System" scheme="http://louie.link/categories/Recommender-System/"/>
    
    
  </entry>
  
</feed>
